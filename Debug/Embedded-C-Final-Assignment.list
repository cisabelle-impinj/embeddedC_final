
Embedded-C-Final-Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  08007cf8  08007cf8  00017cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080c0  080080c0  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080080c0  080080c0  000180c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080c8  080080c8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080c8  080080c8  000180c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080cc  080080cc  000180cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080080d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000760  20000084  08008154  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007e4  08008154  000207e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c8a4  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003922  00000000  00000000  0003c958  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a40  00000000  00000000  00040280  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001878  00000000  00000000  00041cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ac3f  00000000  00000000  00043538  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014236  00000000  00000000  0006e177  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ffbfa  00000000  00000000  000823ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00181fa7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007624  00000000  00000000  00182024  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ce0 	.word	0x08007ce0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08007ce0 	.word	0x08007ce0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <BSP_LED_On>:
  * @param  Led  LED to be set on 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <BSP_LED_On+0x28>)
 800057e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000582:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000586:	b291      	uxth	r1, r2
 8000588:	2201      	movs	r2, #1
 800058a:	4618      	mov	r0, r3
 800058c:	f000 ffea 	bl	8001564 <HAL_GPIO_WritePin>
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000000 	.word	0x20000000

0800059c <BSP_LED_Off>:
  * @param  Led  LED to be set off
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <BSP_LED_Off+0x28>)
 80005aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005b2:	b291      	uxth	r1, r2
 80005b4:	2200      	movs	r2, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 ffd4 	bl	8001564 <HAL_GPIO_WritePin>
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000000 	.word	0x20000000

080005c8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80005d0:	4b27      	ldr	r3, [pc, #156]	; (8000670 <I2Cx_MspInit+0xa8>)
 80005d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d4:	4a26      	ldr	r2, [pc, #152]	; (8000670 <I2Cx_MspInit+0xa8>)
 80005d6:	f043 0302 	orr.w	r3, r3, #2
 80005da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005dc:	4b24      	ldr	r3, [pc, #144]	; (8000670 <I2Cx_MspInit+0xa8>)
 80005de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e0:	f003 0302 	and.w	r3, r3, #2
 80005e4:	613b      	str	r3, [r7, #16]
 80005e6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80005e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005ec:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80005ee:	2312      	movs	r3, #18
 80005f0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80005f2:	2301      	movs	r3, #1
 80005f4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f6:	2303      	movs	r3, #3
 80005f8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80005fa:	2304      	movs	r3, #4
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	4619      	mov	r1, r3
 8000604:	481b      	ldr	r0, [pc, #108]	; (8000674 <I2Cx_MspInit+0xac>)
 8000606:	f000 fd11 	bl	800102c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	4818      	ldr	r0, [pc, #96]	; (8000674 <I2Cx_MspInit+0xac>)
 8000612:	f000 fd0b 	bl	800102c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8000616:	4b16      	ldr	r3, [pc, #88]	; (8000670 <I2Cx_MspInit+0xa8>)
 8000618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800061a:	4a15      	ldr	r2, [pc, #84]	; (8000670 <I2Cx_MspInit+0xa8>)
 800061c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000620:	6593      	str	r3, [r2, #88]	; 0x58
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <I2Cx_MspInit+0xa8>)
 8000624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <I2Cx_MspInit+0xa8>)
 8000630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000632:	4a0f      	ldr	r2, [pc, #60]	; (8000670 <I2Cx_MspInit+0xa8>)
 8000634:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000638:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <I2Cx_MspInit+0xa8>)
 800063c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800063e:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <I2Cx_MspInit+0xa8>)
 8000640:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000644:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	210f      	movs	r1, #15
 800064a:	2021      	movs	r0, #33	; 0x21
 800064c:	f000 fba1 	bl	8000d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000650:	2021      	movs	r0, #33	; 0x21
 8000652:	f000 fbba 	bl	8000dca <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8000656:	2200      	movs	r2, #0
 8000658:	210f      	movs	r1, #15
 800065a:	2022      	movs	r0, #34	; 0x22
 800065c:	f000 fb99 	bl	8000d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8000660:	2022      	movs	r0, #34	; 0x22
 8000662:	f000 fbb2 	bl	8000dca <HAL_NVIC_EnableIRQ>
}
 8000666:	bf00      	nop
 8000668:	3728      	adds	r7, #40	; 0x28
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40021000 	.word	0x40021000
 8000674:	48000400 	.word	0x48000400

08000678 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4a12      	ldr	r2, [pc, #72]	; (80006cc <I2Cx_Init+0x54>)
 8000684:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a11      	ldr	r2, [pc, #68]	; (80006d0 <I2Cx_Init+0x58>)
 800068a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2201      	movs	r2, #1
 8000696:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2200      	movs	r2, #0
 80006a2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f7ff ff89 	bl	80005c8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f000 ff85 	bl	80015c6 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80006bc:	2100      	movs	r1, #0
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f001 fc8a 	bl	8001fd8 <HAL_I2CEx_ConfigAnalogFilter>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40005800 	.word	0x40005800
 80006d0:	00702681 	.word	0x00702681

080006d4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af04      	add	r7, sp, #16
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	4608      	mov	r0, r1
 80006de:	4611      	mov	r1, r2
 80006e0:	461a      	mov	r2, r3
 80006e2:	4603      	mov	r3, r0
 80006e4:	72fb      	strb	r3, [r7, #11]
 80006e6:	460b      	mov	r3, r1
 80006e8:	813b      	strh	r3, [r7, #8]
 80006ea:	4613      	mov	r3, r2
 80006ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80006ee:	2300      	movs	r3, #0
 80006f0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80006f2:	7afb      	ldrb	r3, [r7, #11]
 80006f4:	b299      	uxth	r1, r3
 80006f6:	88f8      	ldrh	r0, [r7, #6]
 80006f8:	893a      	ldrh	r2, [r7, #8]
 80006fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fe:	9302      	str	r3, [sp, #8]
 8000700:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	6a3b      	ldr	r3, [r7, #32]
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	4603      	mov	r3, r0
 800070a:	68f8      	ldr	r0, [r7, #12]
 800070c:	f001 f92e 	bl	800196c <HAL_I2C_Mem_Read>
 8000710:	4603      	mov	r3, r0
 8000712:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000714:	7dfb      	ldrb	r3, [r7, #23]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d004      	beq.n	8000724 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800071a:	7afb      	ldrb	r3, [r7, #11]
 800071c:	4619      	mov	r1, r3
 800071e:	68f8      	ldr	r0, [r7, #12]
 8000720:	f000 f832 	bl	8000788 <I2Cx_Error>
  }
  return status;
 8000724:	7dfb      	ldrb	r3, [r7, #23]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b08a      	sub	sp, #40	; 0x28
 8000732:	af04      	add	r7, sp, #16
 8000734:	60f8      	str	r0, [r7, #12]
 8000736:	4608      	mov	r0, r1
 8000738:	4611      	mov	r1, r2
 800073a:	461a      	mov	r2, r3
 800073c:	4603      	mov	r3, r0
 800073e:	72fb      	strb	r3, [r7, #11]
 8000740:	460b      	mov	r3, r1
 8000742:	813b      	strh	r3, [r7, #8]
 8000744:	4613      	mov	r3, r2
 8000746:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000748:	2300      	movs	r3, #0
 800074a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800074c:	7afb      	ldrb	r3, [r7, #11]
 800074e:	b299      	uxth	r1, r3
 8000750:	88f8      	ldrh	r0, [r7, #6]
 8000752:	893a      	ldrh	r2, [r7, #8]
 8000754:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000758:	9302      	str	r3, [sp, #8]
 800075a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800075c:	9301      	str	r3, [sp, #4]
 800075e:	6a3b      	ldr	r3, [r7, #32]
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	4603      	mov	r3, r0
 8000764:	68f8      	ldr	r0, [r7, #12]
 8000766:	f000 ffed 	bl	8001744 <HAL_I2C_Mem_Write>
 800076a:	4603      	mov	r3, r0
 800076c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800076e:	7dfb      	ldrb	r3, [r7, #23]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d004      	beq.n	800077e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8000774:	7afb      	ldrb	r3, [r7, #11]
 8000776:	4619      	mov	r1, r3
 8000778:	68f8      	ldr	r0, [r7, #12]
 800077a:	f000 f805 	bl	8000788 <I2Cx_Error>
  }
  return status;
 800077e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	460b      	mov	r3, r1
 8000792:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 ffa5 	bl	80016e4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f7ff ff6c 	bl	8000678 <I2Cx_Init>
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80007ac:	4802      	ldr	r0, [pc, #8]	; (80007b8 <SENSOR_IO_Init+0x10>)
 80007ae:	f7ff ff63 	bl	8000678 <I2Cx_Init>
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	2000015c 	.word	0x2000015c

080007bc <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af02      	add	r7, sp, #8
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
 80007c6:	460b      	mov	r3, r1
 80007c8:	71bb      	strb	r3, [r7, #6]
 80007ca:	4613      	mov	r3, r2
 80007cc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80007ce:	79bb      	ldrb	r3, [r7, #6]
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	79f9      	ldrb	r1, [r7, #7]
 80007d4:	2301      	movs	r3, #1
 80007d6:	9301      	str	r3, [sp, #4]
 80007d8:	1d7b      	adds	r3, r7, #5
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	2301      	movs	r3, #1
 80007de:	4803      	ldr	r0, [pc, #12]	; (80007ec <SENSOR_IO_Write+0x30>)
 80007e0:	f7ff ffa5 	bl	800072e <I2Cx_WriteMultiple>
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	2000015c 	.word	0x2000015c

080007f0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af02      	add	r7, sp, #8
 80007f6:	4603      	mov	r3, r0
 80007f8:	460a      	mov	r2, r1
 80007fa:	71fb      	strb	r3, [r7, #7]
 80007fc:	4613      	mov	r3, r2
 80007fe:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8000804:	79bb      	ldrb	r3, [r7, #6]
 8000806:	b29a      	uxth	r2, r3
 8000808:	79f9      	ldrb	r1, [r7, #7]
 800080a:	2301      	movs	r3, #1
 800080c:	9301      	str	r3, [sp, #4]
 800080e:	f107 030f 	add.w	r3, r7, #15
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	2301      	movs	r3, #1
 8000816:	4804      	ldr	r0, [pc, #16]	; (8000828 <SENSOR_IO_Read+0x38>)
 8000818:	f7ff ff5c 	bl	80006d4 <I2Cx_ReadMultiple>

  return read_value;
 800081c:	7bfb      	ldrb	r3, [r7, #15]
}
 800081e:	4618      	mov	r0, r3
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	2000015c 	.word	0x2000015c

0800082c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af02      	add	r7, sp, #8
 8000832:	603a      	str	r2, [r7, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
 800083a:	460b      	mov	r3, r1
 800083c:	71bb      	strb	r3, [r7, #6]
 800083e:	4613      	mov	r3, r2
 8000840:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8000842:	79bb      	ldrb	r3, [r7, #6]
 8000844:	b29a      	uxth	r2, r3
 8000846:	79f9      	ldrb	r1, [r7, #7]
 8000848:	88bb      	ldrh	r3, [r7, #4]
 800084a:	9301      	str	r3, [sp, #4]
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	2301      	movs	r3, #1
 8000852:	4804      	ldr	r0, [pc, #16]	; (8000864 <SENSOR_IO_ReadMultiple+0x38>)
 8000854:	f7ff ff3e 	bl	80006d4 <I2Cx_ReadMultiple>
 8000858:	4603      	mov	r3, r0
 800085a:	b29b      	uxth	r3, r3
}
 800085c:	4618      	mov	r0, r3
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	2000015c 	.word	0x2000015c

08000868 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <BSP_TSENSOR_Init+0x30>)
 8000874:	4a09      	ldr	r2, [pc, #36]	; (800089c <BSP_TSENSOR_Init+0x34>)
 8000876:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8000878:	f7ff ff96 	bl	80007a8 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <BSP_TSENSOR_Init+0x30>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2100      	movs	r1, #0
 8000884:	20be      	movs	r0, #190	; 0xbe
 8000886:	4798      	blx	r3

  ret = TSENSOR_OK;
 8000888:	2300      	movs	r3, #0
 800088a:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800088c:	79fb      	ldrb	r3, [r7, #7]
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200000a0 	.word	0x200000a0
 800089c:	20000004 	.word	0x20000004

080008a0 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80008a4:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <BSP_TSENSOR_ReadTemp+0x18>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	68db      	ldr	r3, [r3, #12]
 80008aa:	20be      	movs	r0, #190	; 0xbe
 80008ac:	4798      	blx	r3
 80008ae:	eef0 7a40 	vmov.f32	s15, s0
}
 80008b2:	eeb0 0a67 	vmov.f32	s0, s15
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200000a0 	.word	0x200000a0

080008bc <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	6039      	str	r1, [r7, #0]
 80008c6:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80008c8:	88fb      	ldrh	r3, [r7, #6]
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	2120      	movs	r1, #32
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff ff8e 	bl	80007f0 <SENSOR_IO_Read>
 80008d4:	4603      	mov	r3, r0
 80008d6:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
 80008da:	f023 0304 	bic.w	r3, r3, #4
 80008de:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	f043 0304 	orr.w	r3, r3, #4
 80008e6:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	f023 0303 	bic.w	r3, r3, #3
 80008ee:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80008f0:	7bfb      	ldrb	r3, [r7, #15]
 80008f2:	f043 0301 	orr.w	r3, r3, #1
 80008f6:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008fe:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	b2db      	uxtb	r3, r3
 8000904:	7bfa      	ldrb	r2, [r7, #15]
 8000906:	2120      	movs	r1, #32
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff57 	bl	80007bc <SENSOR_IO_Write>
}
 800090e:	bf00      	nop
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b088      	sub	sp, #32
 800091a:	af00      	add	r7, sp, #0
 800091c:	4603      	mov	r3, r0
 800091e:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8000920:	88fb      	ldrh	r3, [r7, #6]
 8000922:	b2d8      	uxtb	r0, r3
 8000924:	f107 0208 	add.w	r2, r7, #8
 8000928:	2302      	movs	r3, #2
 800092a:	21b2      	movs	r1, #178	; 0xb2
 800092c:	f7ff ff7e 	bl	800082c <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8000930:	88fb      	ldrh	r3, [r7, #6]
 8000932:	b2db      	uxtb	r3, r3
 8000934:	2135      	movs	r1, #53	; 0x35
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff ff5a 	bl	80007f0 <SENSOR_IO_Read>
 800093c:	4603      	mov	r3, r0
 800093e:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8000940:	7ffb      	ldrb	r3, [r7, #31]
 8000942:	021b      	lsls	r3, r3, #8
 8000944:	b21b      	sxth	r3, r3
 8000946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800094a:	b21a      	sxth	r2, r3
 800094c:	7a3b      	ldrb	r3, [r7, #8]
 800094e:	b21b      	sxth	r3, r3
 8000950:	4313      	orrs	r3, r2
 8000952:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8000954:	7ffb      	ldrb	r3, [r7, #31]
 8000956:	019b      	lsls	r3, r3, #6
 8000958:	b21b      	sxth	r3, r3
 800095a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800095e:	b21a      	sxth	r2, r3
 8000960:	7a7b      	ldrb	r3, [r7, #9]
 8000962:	b21b      	sxth	r3, r3
 8000964:	4313      	orrs	r3, r2
 8000966:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8000968:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800096c:	10db      	asrs	r3, r3, #3
 800096e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8000970:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000974:	10db      	asrs	r3, r3, #3
 8000976:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8000978:	88fb      	ldrh	r3, [r7, #6]
 800097a:	b2d8      	uxtb	r0, r3
 800097c:	f107 0208 	add.w	r2, r7, #8
 8000980:	2304      	movs	r3, #4
 8000982:	21bc      	movs	r1, #188	; 0xbc
 8000984:	f7ff ff52 	bl	800082c <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000988:	7a7b      	ldrb	r3, [r7, #9]
 800098a:	021b      	lsls	r3, r3, #8
 800098c:	b21a      	sxth	r2, r3
 800098e:	7a3b      	ldrb	r3, [r7, #8]
 8000990:	b21b      	sxth	r3, r3
 8000992:	4313      	orrs	r3, r2
 8000994:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8000996:	7afb      	ldrb	r3, [r7, #11]
 8000998:	021b      	lsls	r3, r3, #8
 800099a:	b21a      	sxth	r2, r3
 800099c:	7abb      	ldrb	r3, [r7, #10]
 800099e:	b21b      	sxth	r3, r3
 80009a0:	4313      	orrs	r3, r2
 80009a2:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80009a4:	88fb      	ldrh	r3, [r7, #6]
 80009a6:	b2d8      	uxtb	r0, r3
 80009a8:	f107 0208 	add.w	r2, r7, #8
 80009ac:	2302      	movs	r3, #2
 80009ae:	21aa      	movs	r1, #170	; 0xaa
 80009b0:	f7ff ff3c 	bl	800082c <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80009b4:	7a7b      	ldrb	r3, [r7, #9]
 80009b6:	021b      	lsls	r3, r3, #8
 80009b8:	b21a      	sxth	r2, r3
 80009ba:	7a3b      	ldrb	r3, [r7, #8]
 80009bc:	b21b      	sxth	r3, r3
 80009be:	4313      	orrs	r3, r2
 80009c0:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80009c2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80009c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80009ca:	1ad3      	subs	r3, r2, r3
 80009cc:	ee07 3a90 	vmov	s15, r3
 80009d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80009d8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	ee07 3a90 	vmov	s15, r3
 80009e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009e6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80009ea:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80009ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	ee07 3a90 	vmov	s15, r3
 80009f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000a00:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000a04:	ee07 3a90 	vmov	s15, r3
 8000a08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a10:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	ee07 3a90 	vmov	s15, r3
}
 8000a1a:	eeb0 0a67 	vmov.f32	s0, s15
 8000a1e:	3720      	adds	r7, #32
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a2e:	2003      	movs	r0, #3
 8000a30:	f000 f9a4 	bl	8000d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a34:	2000      	movs	r0, #0
 8000a36:	f000 f80d 	bl	8000a54 <HAL_InitTick>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d002      	beq.n	8000a46 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a40:	2301      	movs	r3, #1
 8000a42:	71fb      	strb	r3, [r7, #7]
 8000a44:	e001      	b.n	8000a4a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a46:	f005 fdb1 	bl	80065ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <HAL_InitTick+0x68>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d022      	beq.n	8000aae <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a68:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_InitTick+0x6c>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <HAL_InitTick+0x68>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a74:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f000 f9b2 	bl	8000de6 <HAL_SYSTICK_Config>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d10f      	bne.n	8000aa8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2b0f      	cmp	r3, #15
 8000a8c:	d809      	bhi.n	8000aa2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	6879      	ldr	r1, [r7, #4]
 8000a92:	f04f 30ff 	mov.w	r0, #4294967295
 8000a96:	f000 f97c 	bl	8000d92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <HAL_InitTick+0x70>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6013      	str	r3, [r2, #0]
 8000aa0:	e007      	b.n	8000ab2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	73fb      	strb	r3, [r7, #15]
 8000aa6:	e004      	b.n	8000ab2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	73fb      	strb	r3, [r7, #15]
 8000aac:	e001      	b.n	8000ab2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000018 	.word	0x20000018
 8000ac0:	2000001c 	.word	0x2000001c
 8000ac4:	20000014 	.word	0x20000014

08000ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <HAL_IncTick+0x1c>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <HAL_IncTick+0x20>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	4a03      	ldr	r2, [pc, #12]	; (8000ae4 <HAL_IncTick+0x1c>)
 8000ad8:	6013      	str	r3, [r2, #0]
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	200001a8 	.word	0x200001a8
 8000ae8:	20000018 	.word	0x20000018

08000aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return uwTick;
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <HAL_GetTick+0x14>)
 8000af2:	681b      	ldr	r3, [r3, #0]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	200001a8 	.word	0x200001a8

08000b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b0c:	f7ff ffee 	bl	8000aec <HAL_GetTick>
 8000b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b1c:	d004      	beq.n	8000b28 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <HAL_Delay+0x40>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	4413      	add	r3, r2
 8000b26:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b28:	bf00      	nop
 8000b2a:	f7ff ffdf 	bl	8000aec <HAL_GetTick>
 8000b2e:	4602      	mov	r2, r0
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	1ad3      	subs	r3, r2, r3
 8000b34:	68fa      	ldr	r2, [r7, #12]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d8f7      	bhi.n	8000b2a <HAL_Delay+0x26>
  {
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000018 	.word	0x20000018

08000b48 <HAL_GetHalVersion>:
/**
  * @brief  Return the HAL revision.
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return STM32L4XX_HAL_VERSION;
 8000b4c:	f04f 7385 	mov.w	r3, #17432576	; 0x10a0000
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
	...

08000b5c <HAL_GetREVID>:
/**
  * @brief  Return the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <HAL_GetREVID+0x18>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	0c1b      	lsrs	r3, r3, #16
 8000b66:	b29b      	uxth	r3, r3
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e0042000 	.word	0xe0042000

08000b78 <HAL_GetDEVID>:
/**
  * @brief  Return the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return(DBGMCU->IDCODE & DBGMCU_IDCODE_DEV_ID);
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <HAL_GetDEVID+0x18>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e0042000 	.word	0xe0042000

08000b94 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <HAL_GetUIDw0+0x14>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	1fff7590 	.word	0x1fff7590

08000bac <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <HAL_GetUIDw1+0x14>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	1fff7594 	.word	0x1fff7594

08000bc4 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <HAL_GetUIDw2+0x14>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	1fff7598 	.word	0x1fff7598

08000bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0e:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	60d3      	str	r3, [r2, #12]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <__NVIC_GetPriorityGrouping+0x18>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	0a1b      	lsrs	r3, r3, #8
 8000c2e:	f003 0307 	and.w	r3, r3, #7
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	db0b      	blt.n	8000c6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	f003 021f 	and.w	r2, r3, #31
 8000c58:	4907      	ldr	r1, [pc, #28]	; (8000c78 <__NVIC_EnableIRQ+0x38>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	095b      	lsrs	r3, r3, #5
 8000c60:	2001      	movs	r0, #1
 8000c62:	fa00 f202 	lsl.w	r2, r0, r2
 8000c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000e100 	.word	0xe000e100

08000c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	db0a      	blt.n	8000ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	490c      	ldr	r1, [pc, #48]	; (8000cc8 <__NVIC_SetPriority+0x4c>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca4:	e00a      	b.n	8000cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4908      	ldr	r1, [pc, #32]	; (8000ccc <__NVIC_SetPriority+0x50>)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	3b04      	subs	r3, #4
 8000cb4:	0112      	lsls	r2, r2, #4
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	440b      	add	r3, r1
 8000cba:	761a      	strb	r2, [r3, #24]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	; 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f1c3 0307 	rsb	r3, r3, #7
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	bf28      	it	cs
 8000cee:	2304      	movcs	r3, #4
 8000cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d902      	bls.n	8000d00 <NVIC_EncodePriority+0x30>
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3b03      	subs	r3, #3
 8000cfe:	e000      	b.n	8000d02 <NVIC_EncodePriority+0x32>
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43d9      	mvns	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	4313      	orrs	r3, r2
         );
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3724      	adds	r7, #36	; 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d48:	d301      	bcc.n	8000d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00f      	b.n	8000d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <SysTick_Config+0x40>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d56:	210f      	movs	r1, #15
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	f7ff ff8e 	bl	8000c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <SysTick_Config+0x40>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d66:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <SysTick_Config+0x40>)
 8000d68:	2207      	movs	r2, #7
 8000d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	e000e010 	.word	0xe000e010

08000d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff ff29 	bl	8000bdc <__NVIC_SetPriorityGrouping>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b086      	sub	sp, #24
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000da4:	f7ff ff3e 	bl	8000c24 <__NVIC_GetPriorityGrouping>
 8000da8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	68b9      	ldr	r1, [r7, #8]
 8000dae:	6978      	ldr	r0, [r7, #20]
 8000db0:	f7ff ff8e 	bl	8000cd0 <NVIC_EncodePriority>
 8000db4:	4602      	mov	r2, r0
 8000db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff5d 	bl	8000c7c <__NVIC_SetPriority>
}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff31 	bl	8000c40 <__NVIC_EnableIRQ>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff ffa2 	bl	8000d38 <SysTick_Config>
 8000df4:	4603      	mov	r3, r0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d101      	bne.n	8000e12 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e0ac      	b.n	8000f6c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 f8b2 	bl	8000f80 <DFSDM_GetChannelFromInstance>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	4b55      	ldr	r3, [pc, #340]	; (8000f74 <HAL_DFSDM_ChannelInit+0x174>)
 8000e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e09f      	b.n	8000f6c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f005 fbe1 	bl	80065f4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8000e32:	4b51      	ldr	r3, [pc, #324]	; (8000f78 <HAL_DFSDM_ChannelInit+0x178>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	3301      	adds	r3, #1
 8000e38:	4a4f      	ldr	r2, [pc, #316]	; (8000f78 <HAL_DFSDM_ChannelInit+0x178>)
 8000e3a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8000e3c:	4b4e      	ldr	r3, [pc, #312]	; (8000f78 <HAL_DFSDM_ChannelInit+0x178>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d125      	bne.n	8000e90 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000e44:	4b4d      	ldr	r3, [pc, #308]	; (8000f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a4c      	ldr	r2, [pc, #304]	; (8000f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8000e4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000e4e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8000e50:	4b4a      	ldr	r3, [pc, #296]	; (8000f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	4948      	ldr	r1, [pc, #288]	; (8000f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000e5e:	4b47      	ldr	r3, [pc, #284]	; (8000f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a46      	ldr	r2, [pc, #280]	; (8000f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8000e64:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000e68:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	791b      	ldrb	r3, [r3, #4]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d108      	bne.n	8000e84 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8000e72:	4b42      	ldr	r3, [pc, #264]	; (8000f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	041b      	lsls	r3, r3, #16
 8000e7e:	493f      	ldr	r1, [pc, #252]	; (8000f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8000e80:	4313      	orrs	r3, r2
 8000e82:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000e84:	4b3d      	ldr	r3, [pc, #244]	; (8000f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a3c      	ldr	r2, [pc, #240]	; (8000f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8000e8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e8e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8000e9e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	6819      	ldr	r1, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000eae:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000eb4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 020f 	bic.w	r2, r2, #15
 8000ecc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	6819      	ldr	r1, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000edc:	431a      	orrs	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8000ef4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	6899      	ldr	r1, [r3, #8]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f04:	3b01      	subs	r3, #1
 8000f06:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f002 0207 	and.w	r2, r2, #7
 8000f20:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	6859      	ldr	r1, [r3, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000f34:	431a      	orrs	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f4c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2201      	movs	r2, #1
 8000f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f810 	bl	8000f80 <DFSDM_GetChannelFromInstance>
 8000f60:	4601      	mov	r1, r0
 8000f62:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_DFSDM_ChannelInit+0x174>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	200000a8 	.word	0x200000a8
 8000f78:	200000a4 	.word	0x200000a4
 8000f7c:	40016000 	.word	0x40016000

08000f80 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a20      	ldr	r2, [pc, #128]	; (800100c <DFSDM_GetChannelFromInstance+0x8c>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d102      	bne.n	8000f96 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	e032      	b.n	8000ffc <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel1)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a1d      	ldr	r2, [pc, #116]	; (8001010 <DFSDM_GetChannelFromInstance+0x90>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d102      	bne.n	8000fa4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	e02b      	b.n	8000ffc <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel2)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a1b      	ldr	r2, [pc, #108]	; (8001014 <DFSDM_GetChannelFromInstance+0x94>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d102      	bne.n	8000fb2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8000fac:	2302      	movs	r3, #2
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	e024      	b.n	8000ffc <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel3)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a18      	ldr	r2, [pc, #96]	; (8001018 <DFSDM_GetChannelFromInstance+0x98>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d102      	bne.n	8000fc0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	e01d      	b.n	8000ffc <DFSDM_GetChannelFromInstance+0x7c>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a16      	ldr	r2, [pc, #88]	; (800101c <DFSDM_GetChannelFromInstance+0x9c>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d102      	bne.n	8000fce <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	e016      	b.n	8000ffc <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel5)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a13      	ldr	r2, [pc, #76]	; (8001020 <DFSDM_GetChannelFromInstance+0xa0>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d102      	bne.n	8000fdc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8000fd6:	2305      	movs	r3, #5
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	e00f      	b.n	8000ffc <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel6)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a11      	ldr	r2, [pc, #68]	; (8001024 <DFSDM_GetChannelFromInstance+0xa4>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d102      	bne.n	8000fea <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8000fe4:	2306      	movs	r3, #6
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	e008      	b.n	8000ffc <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel7)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <DFSDM_GetChannelFromInstance+0xa8>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d102      	bne.n	8000ff8 <DFSDM_GetChannelFromInstance+0x78>
  {
    channel = 7;
 8000ff2:	2307      	movs	r3, #7
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	e001      	b.n	8000ffc <DFSDM_GetChannelFromInstance+0x7c>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    channel = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40016000 	.word	0x40016000
 8001010:	40016020 	.word	0x40016020
 8001014:	40016040 	.word	0x40016040
 8001018:	40016060 	.word	0x40016060
 800101c:	40016080 	.word	0x40016080
 8001020:	400160a0 	.word	0x400160a0
 8001024:	400160c0 	.word	0x400160c0
 8001028:	400160e0 	.word	0x400160e0

0800102c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800102c:	b480      	push	{r7}
 800102e:	b087      	sub	sp, #28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800103a:	e17f      	b.n	800133c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	2101      	movs	r1, #1
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	fa01 f303 	lsl.w	r3, r1, r3
 8001048:	4013      	ands	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2b00      	cmp	r3, #0
 8001050:	f000 8171 	beq.w	8001336 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x38>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b12      	cmp	r3, #18
 8001062:	d123      	bne.n	80010ac <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	08da      	lsrs	r2, r3, #3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3208      	adds	r2, #8
 800106c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	f003 0307 	and.w	r3, r3, #7
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	220f      	movs	r2, #15
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	691a      	ldr	r2, [r3, #16]
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	08da      	lsrs	r2, r3, #3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3208      	adds	r2, #8
 80010a6:	6939      	ldr	r1, [r7, #16]
 80010a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	2203      	movs	r2, #3
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0203 	and.w	r2, r3, #3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d00b      	beq.n	8001100 <HAL_GPIO_Init+0xd4>
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d007      	beq.n	8001100 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010f4:	2b11      	cmp	r3, #17
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b12      	cmp	r3, #18
 80010fe:	d130      	bne.n	8001162 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	68da      	ldr	r2, [r3, #12]
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001136:	2201      	movs	r2, #1
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	091b      	lsrs	r3, r3, #4
 800114c:	f003 0201 	and.w	r2, r3, #1
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	2b03      	cmp	r3, #3
 800116c:	d118      	bne.n	80011a0 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001172:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001174:	2201      	movs	r2, #1
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	08db      	lsrs	r3, r3, #3
 800118a:	f003 0201 	and.w	r2, r3, #1
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	2203      	movs	r2, #3
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 80ac 	beq.w	8001336 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	4b5e      	ldr	r3, [pc, #376]	; (8001358 <HAL_GPIO_Init+0x32c>)
 80011e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e2:	4a5d      	ldr	r2, [pc, #372]	; (8001358 <HAL_GPIO_Init+0x32c>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6613      	str	r3, [r2, #96]	; 0x60
 80011ea:	4b5b      	ldr	r3, [pc, #364]	; (8001358 <HAL_GPIO_Init+0x32c>)
 80011ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011f6:	4a59      	ldr	r2, [pc, #356]	; (800135c <HAL_GPIO_Init+0x330>)
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	3302      	adds	r3, #2
 80011fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001202:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	220f      	movs	r2, #15
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001220:	d025      	beq.n	800126e <HAL_GPIO_Init+0x242>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4e      	ldr	r2, [pc, #312]	; (8001360 <HAL_GPIO_Init+0x334>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d01f      	beq.n	800126a <HAL_GPIO_Init+0x23e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4d      	ldr	r2, [pc, #308]	; (8001364 <HAL_GPIO_Init+0x338>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d019      	beq.n	8001266 <HAL_GPIO_Init+0x23a>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4c      	ldr	r2, [pc, #304]	; (8001368 <HAL_GPIO_Init+0x33c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d013      	beq.n	8001262 <HAL_GPIO_Init+0x236>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4b      	ldr	r2, [pc, #300]	; (800136c <HAL_GPIO_Init+0x340>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d00d      	beq.n	800125e <HAL_GPIO_Init+0x232>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4a      	ldr	r2, [pc, #296]	; (8001370 <HAL_GPIO_Init+0x344>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d007      	beq.n	800125a <HAL_GPIO_Init+0x22e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a49      	ldr	r2, [pc, #292]	; (8001374 <HAL_GPIO_Init+0x348>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d101      	bne.n	8001256 <HAL_GPIO_Init+0x22a>
 8001252:	2306      	movs	r3, #6
 8001254:	e00c      	b.n	8001270 <HAL_GPIO_Init+0x244>
 8001256:	2307      	movs	r3, #7
 8001258:	e00a      	b.n	8001270 <HAL_GPIO_Init+0x244>
 800125a:	2305      	movs	r3, #5
 800125c:	e008      	b.n	8001270 <HAL_GPIO_Init+0x244>
 800125e:	2304      	movs	r3, #4
 8001260:	e006      	b.n	8001270 <HAL_GPIO_Init+0x244>
 8001262:	2303      	movs	r3, #3
 8001264:	e004      	b.n	8001270 <HAL_GPIO_Init+0x244>
 8001266:	2302      	movs	r3, #2
 8001268:	e002      	b.n	8001270 <HAL_GPIO_Init+0x244>
 800126a:	2301      	movs	r3, #1
 800126c:	e000      	b.n	8001270 <HAL_GPIO_Init+0x244>
 800126e:	2300      	movs	r3, #0
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	f002 0203 	and.w	r2, r2, #3
 8001276:	0092      	lsls	r2, r2, #2
 8001278:	4093      	lsls	r3, r2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001280:	4936      	ldr	r1, [pc, #216]	; (800135c <HAL_GPIO_Init+0x330>)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	3302      	adds	r3, #2
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800128e:	4b3a      	ldr	r3, [pc, #232]	; (8001378 <HAL_GPIO_Init+0x34c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012b2:	4a31      	ldr	r2, [pc, #196]	; (8001378 <HAL_GPIO_Init+0x34c>)
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80012b8:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <HAL_GPIO_Init+0x34c>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012dc:	4a26      	ldr	r2, [pc, #152]	; (8001378 <HAL_GPIO_Init+0x34c>)
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012e2:	4b25      	ldr	r3, [pc, #148]	; (8001378 <HAL_GPIO_Init+0x34c>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4313      	orrs	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001306:	4a1c      	ldr	r2, [pc, #112]	; (8001378 <HAL_GPIO_Init+0x34c>)
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <HAL_GPIO_Init+0x34c>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	43db      	mvns	r3, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001330:	4a11      	ldr	r2, [pc, #68]	; (8001378 <HAL_GPIO_Init+0x34c>)
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	3301      	adds	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa22 f303 	lsr.w	r3, r2, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	f47f ae78 	bne.w	800103c <HAL_GPIO_Init+0x10>
  }
}
 800134c:	bf00      	nop
 800134e:	371c      	adds	r7, #28
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	40021000 	.word	0x40021000
 800135c:	40010000 	.word	0x40010000
 8001360:	48000400 	.word	0x48000400
 8001364:	48000800 	.word	0x48000800
 8001368:	48000c00 	.word	0x48000c00
 800136c:	48001000 	.word	0x48001000
 8001370:	48001400 	.word	0x48001400
 8001374:	48001800 	.word	0x48001800
 8001378:	40010400 	.word	0x40010400

0800137c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800137c:	b480      	push	{r7}
 800137e:	b087      	sub	sp, #28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800138a:	e0cd      	b.n	8001528 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800138c:	2201      	movs	r2, #1
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	2b00      	cmp	r3, #0
 800139e:	f000 80c0 	beq.w	8001522 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80013a2:	4a68      	ldr	r2, [pc, #416]	; (8001544 <HAL_GPIO_DeInit+0x1c8>)
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	089b      	lsrs	r3, r3, #2
 80013a8:	3302      	adds	r3, #2
 80013aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ae:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	220f      	movs	r2, #15
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	4013      	ands	r3, r2
 80013c2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013ca:	d025      	beq.n	8001418 <HAL_GPIO_DeInit+0x9c>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a5e      	ldr	r2, [pc, #376]	; (8001548 <HAL_GPIO_DeInit+0x1cc>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d01f      	beq.n	8001414 <HAL_GPIO_DeInit+0x98>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a5d      	ldr	r2, [pc, #372]	; (800154c <HAL_GPIO_DeInit+0x1d0>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d019      	beq.n	8001410 <HAL_GPIO_DeInit+0x94>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a5c      	ldr	r2, [pc, #368]	; (8001550 <HAL_GPIO_DeInit+0x1d4>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d013      	beq.n	800140c <HAL_GPIO_DeInit+0x90>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a5b      	ldr	r2, [pc, #364]	; (8001554 <HAL_GPIO_DeInit+0x1d8>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d00d      	beq.n	8001408 <HAL_GPIO_DeInit+0x8c>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a5a      	ldr	r2, [pc, #360]	; (8001558 <HAL_GPIO_DeInit+0x1dc>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d007      	beq.n	8001404 <HAL_GPIO_DeInit+0x88>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a59      	ldr	r2, [pc, #356]	; (800155c <HAL_GPIO_DeInit+0x1e0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d101      	bne.n	8001400 <HAL_GPIO_DeInit+0x84>
 80013fc:	2306      	movs	r3, #6
 80013fe:	e00c      	b.n	800141a <HAL_GPIO_DeInit+0x9e>
 8001400:	2307      	movs	r3, #7
 8001402:	e00a      	b.n	800141a <HAL_GPIO_DeInit+0x9e>
 8001404:	2305      	movs	r3, #5
 8001406:	e008      	b.n	800141a <HAL_GPIO_DeInit+0x9e>
 8001408:	2304      	movs	r3, #4
 800140a:	e006      	b.n	800141a <HAL_GPIO_DeInit+0x9e>
 800140c:	2303      	movs	r3, #3
 800140e:	e004      	b.n	800141a <HAL_GPIO_DeInit+0x9e>
 8001410:	2302      	movs	r3, #2
 8001412:	e002      	b.n	800141a <HAL_GPIO_DeInit+0x9e>
 8001414:	2301      	movs	r3, #1
 8001416:	e000      	b.n	800141a <HAL_GPIO_DeInit+0x9e>
 8001418:	2300      	movs	r3, #0
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	f002 0203 	and.w	r2, r2, #3
 8001420:	0092      	lsls	r2, r2, #2
 8001422:	4093      	lsls	r3, r2
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	429a      	cmp	r2, r3
 8001428:	d132      	bne.n	8001490 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800142a:	4b4d      	ldr	r3, [pc, #308]	; (8001560 <HAL_GPIO_DeInit+0x1e4>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	43db      	mvns	r3, r3
 8001432:	494b      	ldr	r1, [pc, #300]	; (8001560 <HAL_GPIO_DeInit+0x1e4>)
 8001434:	4013      	ands	r3, r2
 8001436:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001438:	4b49      	ldr	r3, [pc, #292]	; (8001560 <HAL_GPIO_DeInit+0x1e4>)
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	43db      	mvns	r3, r3
 8001440:	4947      	ldr	r1, [pc, #284]	; (8001560 <HAL_GPIO_DeInit+0x1e4>)
 8001442:	4013      	ands	r3, r2
 8001444:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001446:	4b46      	ldr	r3, [pc, #280]	; (8001560 <HAL_GPIO_DeInit+0x1e4>)
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	43db      	mvns	r3, r3
 800144e:	4944      	ldr	r1, [pc, #272]	; (8001560 <HAL_GPIO_DeInit+0x1e4>)
 8001450:	4013      	ands	r3, r2
 8001452:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001454:	4b42      	ldr	r3, [pc, #264]	; (8001560 <HAL_GPIO_DeInit+0x1e4>)
 8001456:	68da      	ldr	r2, [r3, #12]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	43db      	mvns	r3, r3
 800145c:	4940      	ldr	r1, [pc, #256]	; (8001560 <HAL_GPIO_DeInit+0x1e4>)
 800145e:	4013      	ands	r3, r2
 8001460:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	220f      	movs	r2, #15
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001472:	4a34      	ldr	r2, [pc, #208]	; (8001544 <HAL_GPIO_DeInit+0x1c8>)
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	089b      	lsrs	r3, r3, #2
 8001478:	3302      	adds	r3, #2
 800147a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	43da      	mvns	r2, r3
 8001482:	4830      	ldr	r0, [pc, #192]	; (8001544 <HAL_GPIO_DeInit+0x1c8>)
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	089b      	lsrs	r3, r3, #2
 8001488:	400a      	ands	r2, r1
 800148a:	3302      	adds	r3, #2
 800148c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	2103      	movs	r1, #3
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	08da      	lsrs	r2, r3, #3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3208      	adds	r2, #8
 80014ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	220f      	movs	r2, #15
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	08d2      	lsrs	r2, r2, #3
 80014c4:	4019      	ands	r1, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3208      	adds	r2, #8
 80014ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	2103      	movs	r1, #3
 80014d8:	fa01 f303 	lsl.w	r3, r1, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	401a      	ands	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	2101      	movs	r1, #1
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	fa01 f303 	lsl.w	r3, r1, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	401a      	ands	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68da      	ldr	r2, [r3, #12]
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	2103      	movs	r1, #3
 8001502:	fa01 f303 	lsl.w	r3, r1, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	401a      	ands	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001512:	2101      	movs	r1, #1
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	fa01 f303 	lsl.w	r3, r1, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	401a      	ands	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	3301      	adds	r3, #1
 8001526:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	fa22 f303 	lsr.w	r3, r2, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	f47f af2b 	bne.w	800138c <HAL_GPIO_DeInit+0x10>
  }
}
 8001536:	bf00      	nop
 8001538:	371c      	adds	r7, #28
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40010000 	.word	0x40010000
 8001548:	48000400 	.word	0x48000400
 800154c:	48000800 	.word	0x48000800
 8001550:	48000c00 	.word	0x48000c00
 8001554:	48001000 	.word	0x48001000
 8001558:	48001400 	.word	0x48001400
 800155c:	48001800 	.word	0x48001800
 8001560:	40010400 	.word	0x40010400

08001564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	807b      	strh	r3, [r7, #2]
 8001570:	4613      	mov	r3, r2
 8001572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001574:	787b      	ldrb	r3, [r7, #1]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800157a:	887a      	ldrh	r2, [r7, #2]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001580:	e002      	b.n	8001588 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001582:	887a      	ldrh	r2, [r7, #2]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	695a      	ldr	r2, [r3, #20]
 80015a4:	887b      	ldrh	r3, [r7, #2]
 80015a6:	4013      	ands	r3, r2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015ac:	887a      	ldrh	r2, [r7, #2]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80015b2:	e002      	b.n	80015ba <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015b4:	887a      	ldrh	r2, [r7, #2]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	619a      	str	r2, [r3, #24]
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e081      	b.n	80016dc <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d106      	bne.n	80015f2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f005 f845 	bl	800667c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2224      	movs	r2, #36	; 0x24
 80015f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 0201 	bic.w	r2, r2, #1
 8001608:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001616:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001626:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d107      	bne.n	8001640 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	e006      	b.n	800164e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800164c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d104      	bne.n	8001660 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800165e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800166e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001672:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001682:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691a      	ldr	r2, [r3, #16]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	695b      	ldr	r3, [r3, #20]
 800168c:	ea42 0103 	orr.w	r1, r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	021a      	lsls	r2, r3, #8
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69d9      	ldr	r1, [r3, #28]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a1a      	ldr	r2, [r3, #32]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f042 0201 	orr.w	r2, r2, #1
 80016bc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2220      	movs	r2, #32
 80016c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e021      	b.n	800173a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2224      	movs	r2, #36	; 0x24
 80016fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0201 	bic.w	r2, r2, #1
 800170c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f004 fff8 	bl	8006704 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af02      	add	r7, sp, #8
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	4608      	mov	r0, r1
 800174e:	4611      	mov	r1, r2
 8001750:	461a      	mov	r2, r3
 8001752:	4603      	mov	r3, r0
 8001754:	817b      	strh	r3, [r7, #10]
 8001756:	460b      	mov	r3, r1
 8001758:	813b      	strh	r3, [r7, #8]
 800175a:	4613      	mov	r3, r2
 800175c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b20      	cmp	r3, #32
 8001768:	f040 80f9 	bne.w	800195e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800176c:	6a3b      	ldr	r3, [r7, #32]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d002      	beq.n	8001778 <HAL_I2C_Mem_Write+0x34>
 8001772:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001774:	2b00      	cmp	r3, #0
 8001776:	d105      	bne.n	8001784 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800177e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e0ed      	b.n	8001960 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800178a:	2b01      	cmp	r3, #1
 800178c:	d101      	bne.n	8001792 <HAL_I2C_Mem_Write+0x4e>
 800178e:	2302      	movs	r3, #2
 8001790:	e0e6      	b.n	8001960 <HAL_I2C_Mem_Write+0x21c>
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800179a:	f7ff f9a7 	bl	8000aec <HAL_GetTick>
 800179e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	2319      	movs	r3, #25
 80017a6:	2201      	movs	r2, #1
 80017a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f000 fac3 	bl	8001d38 <I2C_WaitOnFlagUntilTimeout>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0d1      	b.n	8001960 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2221      	movs	r2, #33	; 0x21
 80017c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2240      	movs	r2, #64	; 0x40
 80017c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6a3a      	ldr	r2, [r7, #32]
 80017d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2200      	movs	r2, #0
 80017e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017e4:	88f8      	ldrh	r0, [r7, #6]
 80017e6:	893a      	ldrh	r2, [r7, #8]
 80017e8:	8979      	ldrh	r1, [r7, #10]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	9301      	str	r3, [sp, #4]
 80017ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	4603      	mov	r3, r0
 80017f4:	68f8      	ldr	r0, [r7, #12]
 80017f6:	f000 f9d3 	bl	8001ba0 <I2C_RequestMemoryWrite>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e0a9      	b.n	8001960 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001810:	b29b      	uxth	r3, r3
 8001812:	2bff      	cmp	r3, #255	; 0xff
 8001814:	d90e      	bls.n	8001834 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	22ff      	movs	r2, #255	; 0xff
 800181a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001820:	b2da      	uxtb	r2, r3
 8001822:	8979      	ldrh	r1, [r7, #10]
 8001824:	2300      	movs	r3, #0
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800182c:	68f8      	ldr	r0, [r7, #12]
 800182e:	f000 fba5 	bl	8001f7c <I2C_TransferConfig>
 8001832:	e00f      	b.n	8001854 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001838:	b29a      	uxth	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001842:	b2da      	uxtb	r2, r3
 8001844:	8979      	ldrh	r1, [r7, #10]
 8001846:	2300      	movs	r3, #0
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 fb94 	bl	8001f7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f000 faad 	bl	8001db8 <I2C_WaitOnTXISFlagUntilTimeout>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e07b      	b.n	8001960 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	781a      	ldrb	r2, [r3, #0]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001882:	b29b      	uxth	r3, r3
 8001884:	3b01      	subs	r3, #1
 8001886:	b29a      	uxth	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001890:	3b01      	subs	r3, #1
 8001892:	b29a      	uxth	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800189c:	b29b      	uxth	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d034      	beq.n	800190c <HAL_I2C_Mem_Write+0x1c8>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d130      	bne.n	800190c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b0:	2200      	movs	r2, #0
 80018b2:	2180      	movs	r1, #128	; 0x80
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f000 fa3f 	bl	8001d38 <I2C_WaitOnFlagUntilTimeout>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e04d      	b.n	8001960 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	2bff      	cmp	r3, #255	; 0xff
 80018cc:	d90e      	bls.n	80018ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	22ff      	movs	r2, #255	; 0xff
 80018d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	8979      	ldrh	r1, [r7, #10]
 80018dc:	2300      	movs	r3, #0
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 fb49 	bl	8001f7c <I2C_TransferConfig>
 80018ea:	e00f      	b.n	800190c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	8979      	ldrh	r1, [r7, #10]
 80018fe:	2300      	movs	r3, #0
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f000 fb38 	bl	8001f7c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001910:	b29b      	uxth	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d19e      	bne.n	8001854 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f000 fa8c 	bl	8001e38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e01a      	b.n	8001960 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2220      	movs	r2, #32
 8001930:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6859      	ldr	r1, [r3, #4]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_I2C_Mem_Write+0x224>)
 800193e:	400b      	ands	r3, r1
 8001940:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2220      	movs	r2, #32
 8001946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	e000      	b.n	8001960 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800195e:	2302      	movs	r3, #2
  }
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	fe00e800 	.word	0xfe00e800

0800196c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af02      	add	r7, sp, #8
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	4608      	mov	r0, r1
 8001976:	4611      	mov	r1, r2
 8001978:	461a      	mov	r2, r3
 800197a:	4603      	mov	r3, r0
 800197c:	817b      	strh	r3, [r7, #10]
 800197e:	460b      	mov	r3, r1
 8001980:	813b      	strh	r3, [r7, #8]
 8001982:	4613      	mov	r3, r2
 8001984:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b20      	cmp	r3, #32
 8001990:	f040 80fd 	bne.w	8001b8e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001994:	6a3b      	ldr	r3, [r7, #32]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d002      	beq.n	80019a0 <HAL_I2C_Mem_Read+0x34>
 800199a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800199c:	2b00      	cmp	r3, #0
 800199e:	d105      	bne.n	80019ac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e0f1      	b.n	8001b90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d101      	bne.n	80019ba <HAL_I2C_Mem_Read+0x4e>
 80019b6:	2302      	movs	r3, #2
 80019b8:	e0ea      	b.n	8001b90 <HAL_I2C_Mem_Read+0x224>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019c2:	f7ff f893 	bl	8000aec <HAL_GetTick>
 80019c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	2319      	movs	r3, #25
 80019ce:	2201      	movs	r2, #1
 80019d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f000 f9af 	bl	8001d38 <I2C_WaitOnFlagUntilTimeout>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0d5      	b.n	8001b90 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2222      	movs	r2, #34	; 0x22
 80019e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2240      	movs	r2, #64	; 0x40
 80019f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2200      	movs	r2, #0
 80019f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6a3a      	ldr	r2, [r7, #32]
 80019fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a0c:	88f8      	ldrh	r0, [r7, #6]
 8001a0e:	893a      	ldrh	r2, [r7, #8]
 8001a10:	8979      	ldrh	r1, [r7, #10]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f000 f913 	bl	8001c48 <I2C_RequestMemoryRead>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0ad      	b.n	8001b90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	2bff      	cmp	r3, #255	; 0xff
 8001a3c:	d90e      	bls.n	8001a5c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	22ff      	movs	r2, #255	; 0xff
 8001a42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	8979      	ldrh	r1, [r7, #10]
 8001a4c:	4b52      	ldr	r3, [pc, #328]	; (8001b98 <HAL_I2C_Mem_Read+0x22c>)
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f000 fa91 	bl	8001f7c <I2C_TransferConfig>
 8001a5a:	e00f      	b.n	8001a7c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	8979      	ldrh	r1, [r7, #10]
 8001a6e:	4b4a      	ldr	r3, [pc, #296]	; (8001b98 <HAL_I2C_Mem_Read+0x22c>)
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 fa80 	bl	8001f7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a82:	2200      	movs	r2, #0
 8001a84:	2104      	movs	r1, #4
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 f956 	bl	8001d38 <I2C_WaitOnFlagUntilTimeout>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e07c      	b.n	8001b90 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d034      	beq.n	8001b3c <HAL_I2C_Mem_Read+0x1d0>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d130      	bne.n	8001b3c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2180      	movs	r1, #128	; 0x80
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f000 f927 	bl	8001d38 <I2C_WaitOnFlagUntilTimeout>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e04d      	b.n	8001b90 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	2bff      	cmp	r3, #255	; 0xff
 8001afc:	d90e      	bls.n	8001b1c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	22ff      	movs	r2, #255	; 0xff
 8001b02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	8979      	ldrh	r1, [r7, #10]
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 fa31 	bl	8001f7c <I2C_TransferConfig>
 8001b1a:	e00f      	b.n	8001b3c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	8979      	ldrh	r1, [r7, #10]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 fa20 	bl	8001f7c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d19a      	bne.n	8001a7c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 f974 	bl	8001e38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e01a      	b.n	8001b90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2220      	movs	r2, #32
 8001b60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6859      	ldr	r1, [r3, #4]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_I2C_Mem_Read+0x230>)
 8001b6e:	400b      	ands	r3, r1
 8001b70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2220      	movs	r2, #32
 8001b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e000      	b.n	8001b90 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001b8e:	2302      	movs	r3, #2
  }
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	80002400 	.word	0x80002400
 8001b9c:	fe00e800 	.word	0xfe00e800

08001ba0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af02      	add	r7, sp, #8
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	4608      	mov	r0, r1
 8001baa:	4611      	mov	r1, r2
 8001bac:	461a      	mov	r2, r3
 8001bae:	4603      	mov	r3, r0
 8001bb0:	817b      	strh	r3, [r7, #10]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	813b      	strh	r3, [r7, #8]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	8979      	ldrh	r1, [r7, #10]
 8001bc0:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <I2C_RequestMemoryWrite+0xa4>)
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f000 f9d7 	bl	8001f7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bce:	69fa      	ldr	r2, [r7, #28]
 8001bd0:	69b9      	ldr	r1, [r7, #24]
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f000 f8f0 	bl	8001db8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e02c      	b.n	8001c3c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d105      	bne.n	8001bf4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001be8:	893b      	ldrh	r3, [r7, #8]
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	629a      	str	r2, [r3, #40]	; 0x28
 8001bf2:	e015      	b.n	8001c20 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001bf4:	893b      	ldrh	r3, [r7, #8]
 8001bf6:	0a1b      	lsrs	r3, r3, #8
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	69b9      	ldr	r1, [r7, #24]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 f8d6 	bl	8001db8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e012      	b.n	8001c3c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c16:	893b      	ldrh	r3, [r7, #8]
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	2200      	movs	r2, #0
 8001c28:	2180      	movs	r1, #128	; 0x80
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f000 f884 	bl	8001d38 <I2C_WaitOnFlagUntilTimeout>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	80002000 	.word	0x80002000

08001c48 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	4608      	mov	r0, r1
 8001c52:	4611      	mov	r1, r2
 8001c54:	461a      	mov	r2, r3
 8001c56:	4603      	mov	r3, r0
 8001c58:	817b      	strh	r3, [r7, #10]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	813b      	strh	r3, [r7, #8]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001c62:	88fb      	ldrh	r3, [r7, #6]
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	8979      	ldrh	r1, [r7, #10]
 8001c68:	4b20      	ldr	r3, [pc, #128]	; (8001cec <I2C_RequestMemoryRead+0xa4>)
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 f984 	bl	8001f7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c74:	69fa      	ldr	r2, [r7, #28]
 8001c76:	69b9      	ldr	r1, [r7, #24]
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 f89d 	bl	8001db8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e02c      	b.n	8001ce2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d105      	bne.n	8001c9a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c8e:	893b      	ldrh	r3, [r7, #8]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	629a      	str	r2, [r3, #40]	; 0x28
 8001c98:	e015      	b.n	8001cc6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c9a:	893b      	ldrh	r3, [r7, #8]
 8001c9c:	0a1b      	lsrs	r3, r3, #8
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ca8:	69fa      	ldr	r2, [r7, #28]
 8001caa:	69b9      	ldr	r1, [r7, #24]
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 f883 	bl	8001db8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e012      	b.n	8001ce2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cbc:	893b      	ldrh	r3, [r7, #8]
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2140      	movs	r1, #64	; 0x40
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f000 f831 	bl	8001d38 <I2C_WaitOnFlagUntilTimeout>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e000      	b.n	8001ce2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	80002000 	.word	0x80002000

08001cf0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d103      	bne.n	8001d0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d007      	beq.n	8001d2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	699a      	ldr	r2, [r3, #24]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0201 	orr.w	r2, r2, #1
 8001d2a:	619a      	str	r2, [r3, #24]
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	4613      	mov	r3, r2
 8001d46:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d48:	e022      	b.n	8001d90 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d50:	d01e      	beq.n	8001d90 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d52:	f7fe fecb 	bl	8000aec <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d302      	bcc.n	8001d68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d113      	bne.n	8001d90 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6c:	f043 0220 	orr.w	r2, r3, #32
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2220      	movs	r2, #32
 8001d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e00f      	b.n	8001db0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699a      	ldr	r2, [r3, #24]
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	bf0c      	ite	eq
 8001da0:	2301      	moveq	r3, #1
 8001da2:	2300      	movne	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	461a      	mov	r2, r3
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d0cd      	beq.n	8001d4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001dc4:	e02c      	b.n	8001e20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 f870 	bl	8001eb0 <I2C_IsAcknowledgeFailed>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e02a      	b.n	8001e30 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de0:	d01e      	beq.n	8001e20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001de2:	f7fe fe83 	bl	8000aec <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d302      	bcc.n	8001df8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d113      	bne.n	8001e20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfc:	f043 0220 	orr.w	r2, r3, #32
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2220      	movs	r2, #32
 8001e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e007      	b.n	8001e30 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d1cb      	bne.n	8001dc6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e44:	e028      	b.n	8001e98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f000 f830 	bl	8001eb0 <I2C_IsAcknowledgeFailed>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e026      	b.n	8001ea8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e5a:	f7fe fe47 	bl	8000aec <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d302      	bcc.n	8001e70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d113      	bne.n	8001e98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e74:	f043 0220 	orr.w	r2, r3, #32
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e007      	b.n	8001ea8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	f003 0320 	and.w	r3, r3, #32
 8001ea2:	2b20      	cmp	r3, #32
 8001ea4:	d1cf      	bne.n	8001e46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	f003 0310 	and.w	r3, r3, #16
 8001ec6:	2b10      	cmp	r3, #16
 8001ec8:	d151      	bne.n	8001f6e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001eca:	e022      	b.n	8001f12 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed2:	d01e      	beq.n	8001f12 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ed4:	f7fe fe0a 	bl	8000aec <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d302      	bcc.n	8001eea <I2C_IsAcknowledgeFailed+0x3a>
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d113      	bne.n	8001f12 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	f043 0220 	orr.w	r2, r3, #32
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2220      	movs	r2, #32
 8001efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e02e      	b.n	8001f70 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f003 0320 	and.w	r3, r3, #32
 8001f1c:	2b20      	cmp	r3, #32
 8001f1e:	d1d5      	bne.n	8001ecc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2210      	movs	r2, #16
 8001f26:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f7ff fedd 	bl	8001cf0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6859      	ldr	r1, [r3, #4]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <I2C_IsAcknowledgeFailed+0xc8>)
 8001f42:	400b      	ands	r3, r1
 8001f44:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	f043 0204 	orr.w	r2, r3, #4
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2220      	movs	r2, #32
 8001f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	fe00e800 	.word	0xfe00e800

08001f7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	607b      	str	r3, [r7, #4]
 8001f86:	460b      	mov	r3, r1
 8001f88:	817b      	strh	r3, [r7, #10]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	0d5b      	lsrs	r3, r3, #21
 8001f98:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001f9c:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <I2C_TransferConfig+0x58>)
 8001f9e:	430b      	orrs	r3, r1
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	ea02 0103 	and.w	r1, r2, r3
 8001fa6:	897b      	ldrh	r3, [r7, #10]
 8001fa8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fac:	7a7b      	ldrb	r3, [r7, #9]
 8001fae:	041b      	lsls	r3, r3, #16
 8001fb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	03ff63ff 	.word	0x03ff63ff

08001fd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b20      	cmp	r3, #32
 8001fec:	d138      	bne.n	8002060 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e032      	b.n	8002062 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2224      	movs	r2, #36	; 0x24
 8002008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0201 	bic.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800202a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6819      	ldr	r1, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0201 	orr.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2220      	movs	r2, #32
 8002050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	e000      	b.n	8002062 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002060:	2302      	movs	r3, #2
  }
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800206e:	b480      	push	{r7}
 8002070:	b085      	sub	sp, #20
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b20      	cmp	r3, #32
 8002082:	d139      	bne.n	80020f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800208e:	2302      	movs	r3, #2
 8002090:	e033      	b.n	80020fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2224      	movs	r2, #36	; 0x24
 800209e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0201 	bic.w	r2, r2, #1
 80020b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	021b      	lsls	r3, r3, #8
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 0201 	orr.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2220      	movs	r2, #32
 80020e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	e000      	b.n	80020fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020f8:	2302      	movs	r3, #2
  }
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002106:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002108:	b08f      	sub	sp, #60	; 0x3c
 800210a:	af0a      	add	r7, sp, #40	; 0x28
 800210c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e116      	b.n	8002346 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f004 fc34 	bl	80069a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2203      	movs	r2, #3
 800213c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002148:	2b00      	cmp	r3, #0
 800214a:	d102      	bne.n	8002152 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f002 ff70 	bl	800503c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	603b      	str	r3, [r7, #0]
 8002162:	687e      	ldr	r6, [r7, #4]
 8002164:	466d      	mov	r5, sp
 8002166:	f106 0410 	add.w	r4, r6, #16
 800216a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800216c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800216e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002170:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002172:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002176:	e885 0003 	stmia.w	r5, {r0, r1}
 800217a:	1d33      	adds	r3, r6, #4
 800217c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800217e:	6838      	ldr	r0, [r7, #0]
 8002180:	f002 ff0a 	bl	8004f98 <USB_CoreInit>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d005      	beq.n	8002196 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2202      	movs	r2, #2
 800218e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e0d7      	b.n	8002346 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2100      	movs	r1, #0
 800219c:	4618      	mov	r0, r3
 800219e:	f002 ff5e 	bl	800505e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021a2:	2300      	movs	r3, #0
 80021a4:	73fb      	strb	r3, [r7, #15]
 80021a6:	e04a      	b.n	800223e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021a8:	7bfa      	ldrb	r2, [r7, #15]
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	1a9b      	subs	r3, r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	333d      	adds	r3, #61	; 0x3d
 80021b8:	2201      	movs	r2, #1
 80021ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021bc:	7bfa      	ldrb	r2, [r7, #15]
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	1a9b      	subs	r3, r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	333c      	adds	r3, #60	; 0x3c
 80021cc:	7bfa      	ldrb	r2, [r7, #15]
 80021ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021d0:	7bfa      	ldrb	r2, [r7, #15]
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
 80021d4:	b298      	uxth	r0, r3
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	4613      	mov	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	1a9b      	subs	r3, r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	3342      	adds	r3, #66	; 0x42
 80021e4:	4602      	mov	r2, r0
 80021e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021e8:	7bfa      	ldrb	r2, [r7, #15]
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	333f      	adds	r3, #63	; 0x3f
 80021f8:	2200      	movs	r2, #0
 80021fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021fc:	7bfa      	ldrb	r2, [r7, #15]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	3344      	adds	r3, #68	; 0x44
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002210:	7bfa      	ldrb	r2, [r7, #15]
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	4613      	mov	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	1a9b      	subs	r3, r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	3348      	adds	r3, #72	; 0x48
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002224:	7bfa      	ldrb	r2, [r7, #15]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	3350      	adds	r3, #80	; 0x50
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	3301      	adds	r3, #1
 800223c:	73fb      	strb	r3, [r7, #15]
 800223e:	7bfa      	ldrb	r2, [r7, #15]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	429a      	cmp	r2, r3
 8002246:	d3af      	bcc.n	80021a8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002248:	2300      	movs	r3, #0
 800224a:	73fb      	strb	r3, [r7, #15]
 800224c:	e044      	b.n	80022d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800224e:	7bfa      	ldrb	r2, [r7, #15]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	1a9b      	subs	r3, r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002260:	2200      	movs	r2, #0
 8002262:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002264:	7bfa      	ldrb	r2, [r7, #15]
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	1a9b      	subs	r3, r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002276:	7bfa      	ldrb	r2, [r7, #15]
 8002278:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800227a:	7bfa      	ldrb	r2, [r7, #15]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	1a9b      	subs	r3, r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002290:	7bfa      	ldrb	r2, [r7, #15]
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	1a9b      	subs	r3, r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022a6:	7bfa      	ldrb	r2, [r7, #15]
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	440b      	add	r3, r1
 80022b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022bc:	7bfa      	ldrb	r2, [r7, #15]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	1a9b      	subs	r3, r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	3301      	adds	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
 80022d8:	7bfa      	ldrb	r2, [r7, #15]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d3b5      	bcc.n	800224e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	603b      	str	r3, [r7, #0]
 80022e8:	687e      	ldr	r6, [r7, #4]
 80022ea:	466d      	mov	r5, sp
 80022ec:	f106 0410 	add.w	r4, r6, #16
 80022f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002300:	1d33      	adds	r3, r6, #4
 8002302:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002304:	6838      	ldr	r0, [r7, #0]
 8002306:	f002 fed5 	bl	80050b4 <USB_DevInit>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e014      	b.n	8002346 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	2b01      	cmp	r3, #1
 8002332:	d102      	bne.n	800233a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f80a 	bl	800234e <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f003 f85b 	bl	80053fa <USB_DevDisconnect>

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800234e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800234e:	b480      	push	{r7}
 8002350:	b085      	sub	sp, #20
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002380:	f043 0303 	orr.w	r3, r3, #3
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
	...

08002398 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a04      	ldr	r2, [pc, #16]	; (80023b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a6:	6013      	str	r3, [r2, #0]
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40007000 	.word	0x40007000

080023b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80023bc:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40007000 	.word	0x40007000

080023d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023e2:	d130      	bne.n	8002446 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80023e4:	4b23      	ldr	r3, [pc, #140]	; (8002474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023f0:	d038      	beq.n	8002464 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023f2:	4b20      	ldr	r3, [pc, #128]	; (8002474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023fa:	4a1e      	ldr	r2, [pc, #120]	; (8002474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002400:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002402:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2232      	movs	r2, #50	; 0x32
 8002408:	fb02 f303 	mul.w	r3, r2, r3
 800240c:	4a1b      	ldr	r2, [pc, #108]	; (800247c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800240e:	fba2 2303 	umull	r2, r3, r2, r3
 8002412:	0c9b      	lsrs	r3, r3, #18
 8002414:	3301      	adds	r3, #1
 8002416:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002418:	e002      	b.n	8002420 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	3b01      	subs	r3, #1
 800241e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002420:	4b14      	ldr	r3, [pc, #80]	; (8002474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800242c:	d102      	bne.n	8002434 <HAL_PWREx_ControlVoltageScaling+0x60>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1f2      	bne.n	800241a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002434:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002440:	d110      	bne.n	8002464 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e00f      	b.n	8002466 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002446:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800244e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002452:	d007      	beq.n	8002464 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002454:	4b07      	ldr	r3, [pc, #28]	; (8002474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800245c:	4a05      	ldr	r2, [pc, #20]	; (8002474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800245e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002462:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40007000 	.word	0x40007000
 8002478:	2000001c 	.word	0x2000001c
 800247c:	431bde83 	.word	0x431bde83

08002480 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4a04      	ldr	r2, [pc, #16]	; (800249c <HAL_PWREx_EnableVddUSB+0x1c>)
 800248a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800248e:	6053      	str	r3, [r2, #4]
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40007000 	.word	0x40007000

080024a0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af02      	add	r7, sp, #8
 80024a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80024a8:	f7fe fb20 	bl	8000aec <HAL_GetTick>
 80024ac:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e06f      	b.n	8002598 <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d101      	bne.n	80024c8 <HAL_QSPI_Init+0x28>
 80024c4:	2302      	movs	r3, #2
 80024c6:	e067      	b.n	8002598 <HAL_QSPI_Init+0xf8>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10b      	bne.n	80024f4 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f004 f92b 	bl	8006740 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80024ea:	f241 3188 	movw	r1, #5000	; 0x1388
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f858 	bl	80025a4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	3b01      	subs	r3, #1
 8002504:	021a      	lsls	r2, r3, #8
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	2120      	movs	r1, #32
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f850 	bl	80025c0 <QSPI_WaitFlagStateUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002524:	7afb      	ldrb	r3, [r7, #11]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d131      	bne.n	800258e <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002534:	f023 0310 	bic.w	r3, r3, #16
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6852      	ldr	r2, [r2, #4]
 800253c:	0611      	lsls	r1, r2, #24
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68d2      	ldr	r2, [r2, #12]
 8002542:	4311      	orrs	r1, r2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	430b      	orrs	r3, r1
 800254a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <HAL_QSPI_Init+0x100>)
 8002554:	4013      	ands	r3, r2
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6912      	ldr	r2, [r2, #16]
 800255a:	0411      	lsls	r1, r2, #16
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6952      	ldr	r2, [r2, #20]
 8002560:	4311      	orrs	r1, r2
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6992      	ldr	r2, [r2, #24]
 8002566:	4311      	orrs	r1, r2
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	430b      	orrs	r3, r1
 800256e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002596:	7afb      	ldrb	r3, [r7, #11]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	ffe0f8fe 	.word	0xffe0f8fe

080025a4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	603b      	str	r3, [r7, #0]
 80025cc:	4613      	mov	r3, r2
 80025ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80025d0:	e01a      	b.n	8002608 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d8:	d016      	beq.n	8002608 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025da:	f7fe fa87 	bl	8000aec <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d302      	bcc.n	80025f0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10b      	bne.n	8002608 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2204      	movs	r2, #4
 80025f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fc:	f043 0201 	orr.w	r2, r3, #1
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e00e      	b.n	8002626 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	4013      	ands	r3, r2
 8002612:	2b00      	cmp	r3, #0
 8002614:	bf14      	ite	ne
 8002616:	2301      	movne	r3, #1
 8002618:	2300      	moveq	r3, #0
 800261a:	b2db      	uxtb	r3, r3
 800261c:	461a      	mov	r2, r3
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	429a      	cmp	r2, r3
 8002622:	d1d6      	bne.n	80025d2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e39d      	b.n	8002d7e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002642:	4ba4      	ldr	r3, [pc, #656]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800264c:	4ba1      	ldr	r3, [pc, #644]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0310 	and.w	r3, r3, #16
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 80e1 	beq.w	8002826 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d007      	beq.n	800267a <HAL_RCC_OscConfig+0x4a>
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	2b0c      	cmp	r3, #12
 800266e:	f040 8088 	bne.w	8002782 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2b01      	cmp	r3, #1
 8002676:	f040 8084 	bne.w	8002782 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800267a:	4b96      	ldr	r3, [pc, #600]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d005      	beq.n	8002692 <HAL_RCC_OscConfig+0x62>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e375      	b.n	8002d7e <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1a      	ldr	r2, [r3, #32]
 8002696:	4b8f      	ldr	r3, [pc, #572]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d004      	beq.n	80026ac <HAL_RCC_OscConfig+0x7c>
 80026a2:	4b8c      	ldr	r3, [pc, #560]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026aa:	e005      	b.n	80026b8 <HAL_RCC_OscConfig+0x88>
 80026ac:	4b89      	ldr	r3, [pc, #548]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 80026ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026b2:	091b      	lsrs	r3, r3, #4
 80026b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d223      	bcs.n	8002704 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f000 fd09 	bl	80030d8 <RCC_SetFlashLatencyFromMSIRange>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e356      	b.n	8002d7e <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026d0:	4b80      	ldr	r3, [pc, #512]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a7f      	ldr	r2, [pc, #508]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 80026d6:	f043 0308 	orr.w	r3, r3, #8
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	4b7d      	ldr	r3, [pc, #500]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	497a      	ldr	r1, [pc, #488]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ee:	4b79      	ldr	r3, [pc, #484]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	4975      	ldr	r1, [pc, #468]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	604b      	str	r3, [r1, #4]
 8002702:	e022      	b.n	800274a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002704:	4b73      	ldr	r3, [pc, #460]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a72      	ldr	r2, [pc, #456]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 800270a:	f043 0308 	orr.w	r3, r3, #8
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	4b70      	ldr	r3, [pc, #448]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	496d      	ldr	r1, [pc, #436]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 800271e:	4313      	orrs	r3, r2
 8002720:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002722:	4b6c      	ldr	r3, [pc, #432]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	021b      	lsls	r3, r3, #8
 8002730:	4968      	ldr	r1, [pc, #416]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 8002732:	4313      	orrs	r3, r2
 8002734:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	4618      	mov	r0, r3
 800273c:	f000 fccc 	bl	80030d8 <RCC_SetFlashLatencyFromMSIRange>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e319      	b.n	8002d7e <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800274a:	f000 fc03 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 800274e:	4601      	mov	r1, r0
 8002750:	4b60      	ldr	r3, [pc, #384]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	091b      	lsrs	r3, r3, #4
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	4a5f      	ldr	r2, [pc, #380]	; (80028d8 <HAL_RCC_OscConfig+0x2a8>)
 800275c:	5cd3      	ldrb	r3, [r2, r3]
 800275e:	f003 031f 	and.w	r3, r3, #31
 8002762:	fa21 f303 	lsr.w	r3, r1, r3
 8002766:	4a5d      	ldr	r2, [pc, #372]	; (80028dc <HAL_RCC_OscConfig+0x2ac>)
 8002768:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800276a:	4b5d      	ldr	r3, [pc, #372]	; (80028e0 <HAL_RCC_OscConfig+0x2b0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe f970 	bl	8000a54 <HAL_InitTick>
 8002774:	4603      	mov	r3, r0
 8002776:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d052      	beq.n	8002824 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800277e:	7bfb      	ldrb	r3, [r7, #15]
 8002780:	e2fd      	b.n	8002d7e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d032      	beq.n	80027f0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800278a:	4b52      	ldr	r3, [pc, #328]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a51      	ldr	r2, [pc, #324]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002796:	f7fe f9a9 	bl	8000aec <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800279e:	f7fe f9a5 	bl	8000aec <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e2e6      	b.n	8002d7e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027b0:	4b48      	ldr	r3, [pc, #288]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027bc:	4b45      	ldr	r3, [pc, #276]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a44      	ldr	r2, [pc, #272]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 80027c2:	f043 0308 	orr.w	r3, r3, #8
 80027c6:	6013      	str	r3, [r2, #0]
 80027c8:	4b42      	ldr	r3, [pc, #264]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	493f      	ldr	r1, [pc, #252]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027da:	4b3e      	ldr	r3, [pc, #248]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	021b      	lsls	r3, r3, #8
 80027e8:	493a      	ldr	r1, [pc, #232]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	604b      	str	r3, [r1, #4]
 80027ee:	e01a      	b.n	8002826 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027f0:	4b38      	ldr	r3, [pc, #224]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a37      	ldr	r2, [pc, #220]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 80027f6:	f023 0301 	bic.w	r3, r3, #1
 80027fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027fc:	f7fe f976 	bl	8000aec <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002804:	f7fe f972 	bl	8000aec <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e2b3      	b.n	8002d7e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002816:	4b2f      	ldr	r3, [pc, #188]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f0      	bne.n	8002804 <HAL_RCC_OscConfig+0x1d4>
 8002822:	e000      	b.n	8002826 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002824:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d074      	beq.n	800291c <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	2b08      	cmp	r3, #8
 8002836:	d005      	beq.n	8002844 <HAL_RCC_OscConfig+0x214>
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	2b0c      	cmp	r3, #12
 800283c:	d10e      	bne.n	800285c <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2b03      	cmp	r3, #3
 8002842:	d10b      	bne.n	800285c <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002844:	4b23      	ldr	r3, [pc, #140]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d064      	beq.n	800291a <HAL_RCC_OscConfig+0x2ea>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d160      	bne.n	800291a <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e290      	b.n	8002d7e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002864:	d106      	bne.n	8002874 <HAL_RCC_OscConfig+0x244>
 8002866:	4b1b      	ldr	r3, [pc, #108]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a1a      	ldr	r2, [pc, #104]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 800286c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	e01d      	b.n	80028b0 <HAL_RCC_OscConfig+0x280>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800287c:	d10c      	bne.n	8002898 <HAL_RCC_OscConfig+0x268>
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a14      	ldr	r2, [pc, #80]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 8002884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a11      	ldr	r2, [pc, #68]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 8002890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	e00b      	b.n	80028b0 <HAL_RCC_OscConfig+0x280>
 8002898:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a0d      	ldr	r2, [pc, #52]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 800289e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a2:	6013      	str	r3, [r2, #0]
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a0a      	ldr	r2, [pc, #40]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 80028aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d01c      	beq.n	80028f2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b8:	f7fe f918 	bl	8000aec <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028be:	e011      	b.n	80028e4 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c0:	f7fe f914 	bl	8000aec <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b64      	cmp	r3, #100	; 0x64
 80028cc:	d90a      	bls.n	80028e4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e255      	b.n	8002d7e <HAL_RCC_OscConfig+0x74e>
 80028d2:	bf00      	nop
 80028d4:	40021000 	.word	0x40021000
 80028d8:	08007fe0 	.word	0x08007fe0
 80028dc:	2000001c 	.word	0x2000001c
 80028e0:	20000014 	.word	0x20000014
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028e4:	4bae      	ldr	r3, [pc, #696]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0e7      	beq.n	80028c0 <HAL_RCC_OscConfig+0x290>
 80028f0:	e014      	b.n	800291c <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f2:	f7fe f8fb 	bl	8000aec <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028fa:	f7fe f8f7 	bl	8000aec <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b64      	cmp	r3, #100	; 0x64
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e238      	b.n	8002d7e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800290c:	4ba4      	ldr	r3, [pc, #656]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1f0      	bne.n	80028fa <HAL_RCC_OscConfig+0x2ca>
 8002918:	e000      	b.n	800291c <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d060      	beq.n	80029ea <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	2b04      	cmp	r3, #4
 800292c:	d005      	beq.n	800293a <HAL_RCC_OscConfig+0x30a>
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	2b0c      	cmp	r3, #12
 8002932:	d119      	bne.n	8002968 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d116      	bne.n	8002968 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800293a:	4b99      	ldr	r3, [pc, #612]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002942:	2b00      	cmp	r3, #0
 8002944:	d005      	beq.n	8002952 <HAL_RCC_OscConfig+0x322>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e215      	b.n	8002d7e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002952:	4b93      	ldr	r3, [pc, #588]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	061b      	lsls	r3, r3, #24
 8002960:	498f      	ldr	r1, [pc, #572]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 8002962:	4313      	orrs	r3, r2
 8002964:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002966:	e040      	b.n	80029ea <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d023      	beq.n	80029b8 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002970:	4b8b      	ldr	r3, [pc, #556]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a8a      	ldr	r2, [pc, #552]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 8002976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297c:	f7fe f8b6 	bl	8000aec <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002984:	f7fe f8b2 	bl	8000aec <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e1f3      	b.n	8002d7e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002996:	4b82      	ldr	r3, [pc, #520]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a2:	4b7f      	ldr	r3, [pc, #508]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	061b      	lsls	r3, r3, #24
 80029b0:	497b      	ldr	r1, [pc, #492]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	604b      	str	r3, [r1, #4]
 80029b6:	e018      	b.n	80029ea <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029b8:	4b79      	ldr	r3, [pc, #484]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a78      	ldr	r2, [pc, #480]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 80029be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c4:	f7fe f892 	bl	8000aec <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029cc:	f7fe f88e 	bl	8000aec <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e1cf      	b.n	8002d7e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029de:	4b70      	ldr	r3, [pc, #448]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d03c      	beq.n	8002a70 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d01c      	beq.n	8002a38 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029fe:	4b68      	ldr	r3, [pc, #416]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 8002a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a04:	4a66      	ldr	r2, [pc, #408]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0e:	f7fe f86d 	bl	8000aec <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a16:	f7fe f869 	bl	8000aec <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e1aa      	b.n	8002d7e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a28:	4b5d      	ldr	r3, [pc, #372]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 8002a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0ef      	beq.n	8002a16 <HAL_RCC_OscConfig+0x3e6>
 8002a36:	e01b      	b.n	8002a70 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a38:	4b59      	ldr	r3, [pc, #356]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 8002a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a3e:	4a58      	ldr	r2, [pc, #352]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 8002a40:	f023 0301 	bic.w	r3, r3, #1
 8002a44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a48:	f7fe f850 	bl	8000aec <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a50:	f7fe f84c 	bl	8000aec <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e18d      	b.n	8002d7e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a62:	4b4f      	ldr	r3, [pc, #316]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 8002a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1ef      	bne.n	8002a50 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 80a5 	beq.w	8002bc8 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a82:	4b47      	ldr	r3, [pc, #284]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 8002a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10d      	bne.n	8002aaa <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a8e:	4b44      	ldr	r3, [pc, #272]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 8002a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a92:	4a43      	ldr	r2, [pc, #268]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 8002a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a98:	6593      	str	r3, [r2, #88]	; 0x58
 8002a9a:	4b41      	ldr	r3, [pc, #260]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aaa:	4b3e      	ldr	r3, [pc, #248]	; (8002ba4 <HAL_RCC_OscConfig+0x574>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d118      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ab6:	4b3b      	ldr	r3, [pc, #236]	; (8002ba4 <HAL_RCC_OscConfig+0x574>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a3a      	ldr	r2, [pc, #232]	; (8002ba4 <HAL_RCC_OscConfig+0x574>)
 8002abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac2:	f7fe f813 	bl	8000aec <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aca:	f7fe f80f 	bl	8000aec <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e150      	b.n	8002d7e <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002adc:	4b31      	ldr	r3, [pc, #196]	; (8002ba4 <HAL_RCC_OscConfig+0x574>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d108      	bne.n	8002b02 <HAL_RCC_OscConfig+0x4d2>
 8002af0:	4b2b      	ldr	r3, [pc, #172]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 8002af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af6:	4a2a      	ldr	r2, [pc, #168]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b00:	e024      	b.n	8002b4c <HAL_RCC_OscConfig+0x51c>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b05      	cmp	r3, #5
 8002b08:	d110      	bne.n	8002b2c <HAL_RCC_OscConfig+0x4fc>
 8002b0a:	4b25      	ldr	r3, [pc, #148]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 8002b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b10:	4a23      	ldr	r2, [pc, #140]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 8002b12:	f043 0304 	orr.w	r3, r3, #4
 8002b16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b1a:	4b21      	ldr	r3, [pc, #132]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 8002b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b20:	4a1f      	ldr	r2, [pc, #124]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b2a:	e00f      	b.n	8002b4c <HAL_RCC_OscConfig+0x51c>
 8002b2c:	4b1c      	ldr	r3, [pc, #112]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 8002b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b32:	4a1b      	ldr	r2, [pc, #108]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 8002b34:	f023 0301 	bic.w	r3, r3, #1
 8002b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b3c:	4b18      	ldr	r3, [pc, #96]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 8002b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b42:	4a17      	ldr	r2, [pc, #92]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 8002b44:	f023 0304 	bic.w	r3, r3, #4
 8002b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d016      	beq.n	8002b82 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b54:	f7fd ffca 	bl	8000aec <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b5a:	e00a      	b.n	8002b72 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5c:	f7fd ffc6 	bl	8000aec <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e105      	b.n	8002d7e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b72:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <HAL_RCC_OscConfig+0x570>)
 8002b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0ed      	beq.n	8002b5c <HAL_RCC_OscConfig+0x52c>
 8002b80:	e019      	b.n	8002bb6 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b82:	f7fd ffb3 	bl	8000aec <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b88:	e00e      	b.n	8002ba8 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8a:	f7fd ffaf 	bl	8000aec <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d905      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e0ee      	b.n	8002d7e <HAL_RCC_OscConfig+0x74e>
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ba8:	4b77      	ldr	r3, [pc, #476]	; (8002d88 <HAL_RCC_OscConfig+0x758>)
 8002baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1e9      	bne.n	8002b8a <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bb6:	7ffb      	ldrb	r3, [r7, #31]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d105      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bbc:	4b72      	ldr	r3, [pc, #456]	; (8002d88 <HAL_RCC_OscConfig+0x758>)
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc0:	4a71      	ldr	r2, [pc, #452]	; (8002d88 <HAL_RCC_OscConfig+0x758>)
 8002bc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 80d5 	beq.w	8002d7c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	2b0c      	cmp	r3, #12
 8002bd6:	f000 808e 	beq.w	8002cf6 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d15b      	bne.n	8002c9a <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be2:	4b69      	ldr	r3, [pc, #420]	; (8002d88 <HAL_RCC_OscConfig+0x758>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a68      	ldr	r2, [pc, #416]	; (8002d88 <HAL_RCC_OscConfig+0x758>)
 8002be8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bee:	f7fd ff7d 	bl	8000aec <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf6:	f7fd ff79 	bl	8000aec <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e0ba      	b.n	8002d7e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c08:	4b5f      	ldr	r3, [pc, #380]	; (8002d88 <HAL_RCC_OscConfig+0x758>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f0      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c14:	4b5c      	ldr	r3, [pc, #368]	; (8002d88 <HAL_RCC_OscConfig+0x758>)
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	4b5c      	ldr	r3, [pc, #368]	; (8002d8c <HAL_RCC_OscConfig+0x75c>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c24:	3a01      	subs	r2, #1
 8002c26:	0112      	lsls	r2, r2, #4
 8002c28:	4311      	orrs	r1, r2
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c2e:	0212      	lsls	r2, r2, #8
 8002c30:	4311      	orrs	r1, r2
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c36:	0852      	lsrs	r2, r2, #1
 8002c38:	3a01      	subs	r2, #1
 8002c3a:	0552      	lsls	r2, r2, #21
 8002c3c:	4311      	orrs	r1, r2
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c42:	0852      	lsrs	r2, r2, #1
 8002c44:	3a01      	subs	r2, #1
 8002c46:	0652      	lsls	r2, r2, #25
 8002c48:	4311      	orrs	r1, r2
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c4e:	0912      	lsrs	r2, r2, #4
 8002c50:	0452      	lsls	r2, r2, #17
 8002c52:	430a      	orrs	r2, r1
 8002c54:	494c      	ldr	r1, [pc, #304]	; (8002d88 <HAL_RCC_OscConfig+0x758>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c5a:	4b4b      	ldr	r3, [pc, #300]	; (8002d88 <HAL_RCC_OscConfig+0x758>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a4a      	ldr	r2, [pc, #296]	; (8002d88 <HAL_RCC_OscConfig+0x758>)
 8002c60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c64:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c66:	4b48      	ldr	r3, [pc, #288]	; (8002d88 <HAL_RCC_OscConfig+0x758>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	4a47      	ldr	r2, [pc, #284]	; (8002d88 <HAL_RCC_OscConfig+0x758>)
 8002c6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c70:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c72:	f7fd ff3b 	bl	8000aec <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c78:	e008      	b.n	8002c8c <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7a:	f7fd ff37 	bl	8000aec <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e078      	b.n	8002d7e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c8c:	4b3e      	ldr	r3, [pc, #248]	; (8002d88 <HAL_RCC_OscConfig+0x758>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0f0      	beq.n	8002c7a <HAL_RCC_OscConfig+0x64a>
 8002c98:	e070      	b.n	8002d7c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9a:	4b3b      	ldr	r3, [pc, #236]	; (8002d88 <HAL_RCC_OscConfig+0x758>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a3a      	ldr	r2, [pc, #232]	; (8002d88 <HAL_RCC_OscConfig+0x758>)
 8002ca0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ca4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002ca6:	4b38      	ldr	r3, [pc, #224]	; (8002d88 <HAL_RCC_OscConfig+0x758>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d105      	bne.n	8002cbe <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002cb2:	4b35      	ldr	r3, [pc, #212]	; (8002d88 <HAL_RCC_OscConfig+0x758>)
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	4a34      	ldr	r2, [pc, #208]	; (8002d88 <HAL_RCC_OscConfig+0x758>)
 8002cb8:	f023 0303 	bic.w	r3, r3, #3
 8002cbc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002cbe:	4b32      	ldr	r3, [pc, #200]	; (8002d88 <HAL_RCC_OscConfig+0x758>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	4a31      	ldr	r2, [pc, #196]	; (8002d88 <HAL_RCC_OscConfig+0x758>)
 8002cc4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ccc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cce:	f7fd ff0d 	bl	8000aec <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd6:	f7fd ff09 	bl	8000aec <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e04a      	b.n	8002d7e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ce8:	4b27      	ldr	r3, [pc, #156]	; (8002d88 <HAL_RCC_OscConfig+0x758>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1f0      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x6a6>
 8002cf4:	e042      	b.n	8002d7c <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e03d      	b.n	8002d7e <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002d02:	4b21      	ldr	r3, [pc, #132]	; (8002d88 <HAL_RCC_OscConfig+0x758>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f003 0203 	and.w	r2, r3, #3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d130      	bne.n	8002d78 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	3b01      	subs	r3, #1
 8002d22:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d127      	bne.n	8002d78 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d32:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d11f      	bne.n	8002d78 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d42:	2a07      	cmp	r2, #7
 8002d44:	bf14      	ite	ne
 8002d46:	2201      	movne	r2, #1
 8002d48:	2200      	moveq	r2, #0
 8002d4a:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d113      	bne.n	8002d78 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5a:	085b      	lsrs	r3, r3, #1
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d109      	bne.n	8002d78 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	085b      	lsrs	r3, r3, #1
 8002d70:	3b01      	subs	r3, #1
 8002d72:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d001      	beq.n	8002d7c <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e000      	b.n	8002d7e <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3720      	adds	r7, #32
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	f99d808c 	.word	0xf99d808c

08002d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0c8      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002da4:	4b66      	ldr	r3, [pc, #408]	; (8002f40 <HAL_RCC_ClockConfig+0x1b0>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d910      	bls.n	8002dd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db2:	4b63      	ldr	r3, [pc, #396]	; (8002f40 <HAL_RCC_ClockConfig+0x1b0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f023 0207 	bic.w	r2, r3, #7
 8002dba:	4961      	ldr	r1, [pc, #388]	; (8002f40 <HAL_RCC_ClockConfig+0x1b0>)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc2:	4b5f      	ldr	r3, [pc, #380]	; (8002f40 <HAL_RCC_ClockConfig+0x1b0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e0b0      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d04c      	beq.n	8002e7a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d107      	bne.n	8002df8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002de8:	4b56      	ldr	r3, [pc, #344]	; (8002f44 <HAL_RCC_ClockConfig+0x1b4>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d121      	bne.n	8002e38 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e09e      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d107      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e00:	4b50      	ldr	r3, [pc, #320]	; (8002f44 <HAL_RCC_ClockConfig+0x1b4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d115      	bne.n	8002e38 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e092      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d107      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e18:	4b4a      	ldr	r3, [pc, #296]	; (8002f44 <HAL_RCC_ClockConfig+0x1b4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d109      	bne.n	8002e38 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e086      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e28:	4b46      	ldr	r3, [pc, #280]	; (8002f44 <HAL_RCC_ClockConfig+0x1b4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e07e      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e38:	4b42      	ldr	r3, [pc, #264]	; (8002f44 <HAL_RCC_ClockConfig+0x1b4>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f023 0203 	bic.w	r2, r3, #3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	493f      	ldr	r1, [pc, #252]	; (8002f44 <HAL_RCC_ClockConfig+0x1b4>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e4a:	f7fd fe4f 	bl	8000aec <HAL_GetTick>
 8002e4e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e50:	e00a      	b.n	8002e68 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e52:	f7fd fe4b 	bl	8000aec <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e066      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e68:	4b36      	ldr	r3, [pc, #216]	; (8002f44 <HAL_RCC_ClockConfig+0x1b4>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 020c 	and.w	r2, r3, #12
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d1eb      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d008      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e86:	4b2f      	ldr	r3, [pc, #188]	; (8002f44 <HAL_RCC_ClockConfig+0x1b4>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	492c      	ldr	r1, [pc, #176]	; (8002f44 <HAL_RCC_ClockConfig+0x1b4>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e98:	4b29      	ldr	r3, [pc, #164]	; (8002f40 <HAL_RCC_ClockConfig+0x1b0>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d210      	bcs.n	8002ec8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea6:	4b26      	ldr	r3, [pc, #152]	; (8002f40 <HAL_RCC_ClockConfig+0x1b0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f023 0207 	bic.w	r2, r3, #7
 8002eae:	4924      	ldr	r1, [pc, #144]	; (8002f40 <HAL_RCC_ClockConfig+0x1b0>)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb6:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <HAL_RCC_ClockConfig+0x1b0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d001      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e036      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d008      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed4:	4b1b      	ldr	r3, [pc, #108]	; (8002f44 <HAL_RCC_ClockConfig+0x1b4>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	4918      	ldr	r1, [pc, #96]	; (8002f44 <HAL_RCC_ClockConfig+0x1b4>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d009      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ef2:	4b14      	ldr	r3, [pc, #80]	; (8002f44 <HAL_RCC_ClockConfig+0x1b4>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	4910      	ldr	r1, [pc, #64]	; (8002f44 <HAL_RCC_ClockConfig+0x1b4>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f06:	f000 f825 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8002f0a:	4601      	mov	r1, r0
 8002f0c:	4b0d      	ldr	r3, [pc, #52]	; (8002f44 <HAL_RCC_ClockConfig+0x1b4>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	091b      	lsrs	r3, r3, #4
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	4a0c      	ldr	r2, [pc, #48]	; (8002f48 <HAL_RCC_ClockConfig+0x1b8>)
 8002f18:	5cd3      	ldrb	r3, [r2, r3]
 8002f1a:	f003 031f 	and.w	r3, r3, #31
 8002f1e:	fa21 f303 	lsr.w	r3, r1, r3
 8002f22:	4a0a      	ldr	r2, [pc, #40]	; (8002f4c <HAL_RCC_ClockConfig+0x1bc>)
 8002f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f26:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <HAL_RCC_ClockConfig+0x1c0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fd fd92 	bl	8000a54 <HAL_InitTick>
 8002f30:	4603      	mov	r3, r0
 8002f32:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f34:	7afb      	ldrb	r3, [r7, #11]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40022000 	.word	0x40022000
 8002f44:	40021000 	.word	0x40021000
 8002f48:	08007fe0 	.word	0x08007fe0
 8002f4c:	2000001c 	.word	0x2000001c
 8002f50:	20000014 	.word	0x20000014

08002f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b089      	sub	sp, #36	; 0x24
 8002f58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f62:	4b3d      	ldr	r3, [pc, #244]	; (8003058 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 030c 	and.w	r3, r3, #12
 8002f6a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f6c:	4b3a      	ldr	r3, [pc, #232]	; (8003058 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f003 0303 	and.w	r3, r3, #3
 8002f74:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0x34>
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	2b0c      	cmp	r3, #12
 8002f80:	d121      	bne.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d11e      	bne.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f88:	4b33      	ldr	r3, [pc, #204]	; (8003058 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d107      	bne.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f94:	4b30      	ldr	r3, [pc, #192]	; (8003058 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f9a:	0a1b      	lsrs	r3, r3, #8
 8002f9c:	f003 030f 	and.w	r3, r3, #15
 8002fa0:	61fb      	str	r3, [r7, #28]
 8002fa2:	e005      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fa4:	4b2c      	ldr	r3, [pc, #176]	; (8003058 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	091b      	lsrs	r3, r3, #4
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fb0:	4a2a      	ldr	r2, [pc, #168]	; (800305c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fb8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10d      	bne.n	8002fdc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fc4:	e00a      	b.n	8002fdc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d102      	bne.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fcc:	4b24      	ldr	r3, [pc, #144]	; (8003060 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002fce:	61bb      	str	r3, [r7, #24]
 8002fd0:	e004      	b.n	8002fdc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d101      	bne.n	8002fdc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fd8:	4b22      	ldr	r3, [pc, #136]	; (8003064 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fda:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	2b0c      	cmp	r3, #12
 8002fe0:	d133      	bne.n	800304a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fe2:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d002      	beq.n	8002ff8 <HAL_RCC_GetSysClockFreq+0xa4>
 8002ff2:	2b03      	cmp	r3, #3
 8002ff4:	d003      	beq.n	8002ffe <HAL_RCC_GetSysClockFreq+0xaa>
 8002ff6:	e005      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ff8:	4b19      	ldr	r3, [pc, #100]	; (8003060 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ffa:	617b      	str	r3, [r7, #20]
      break;
 8002ffc:	e005      	b.n	800300a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ffe:	4b19      	ldr	r3, [pc, #100]	; (8003064 <HAL_RCC_GetSysClockFreq+0x110>)
 8003000:	617b      	str	r3, [r7, #20]
      break;
 8003002:	e002      	b.n	800300a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	617b      	str	r3, [r7, #20]
      break;
 8003008:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800300a:	4b13      	ldr	r3, [pc, #76]	; (8003058 <HAL_RCC_GetSysClockFreq+0x104>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	091b      	lsrs	r3, r3, #4
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	3301      	adds	r3, #1
 8003016:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003018:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <HAL_RCC_GetSysClockFreq+0x104>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	0a1b      	lsrs	r3, r3, #8
 800301e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	fb02 f203 	mul.w	r2, r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	fbb2 f3f3 	udiv	r3, r2, r3
 800302e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003030:	4b09      	ldr	r3, [pc, #36]	; (8003058 <HAL_RCC_GetSysClockFreq+0x104>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	0e5b      	lsrs	r3, r3, #25
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	3301      	adds	r3, #1
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	fbb2 f3f3 	udiv	r3, r2, r3
 8003048:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800304a:	69bb      	ldr	r3, [r7, #24]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3724      	adds	r7, #36	; 0x24
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	40021000 	.word	0x40021000
 800305c:	08007ff8 	.word	0x08007ff8
 8003060:	00f42400 	.word	0x00f42400
 8003064:	007a1200 	.word	0x007a1200

08003068 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800306c:	4b03      	ldr	r3, [pc, #12]	; (800307c <HAL_RCC_GetHCLKFreq+0x14>)
 800306e:	681b      	ldr	r3, [r3, #0]
}
 8003070:	4618      	mov	r0, r3
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	2000001c 	.word	0x2000001c

08003080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003084:	f7ff fff0 	bl	8003068 <HAL_RCC_GetHCLKFreq>
 8003088:	4601      	mov	r1, r0
 800308a:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	0a1b      	lsrs	r3, r3, #8
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	4a04      	ldr	r2, [pc, #16]	; (80030a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003096:	5cd3      	ldrb	r3, [r2, r3]
 8003098:	f003 031f 	and.w	r3, r3, #31
 800309c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40021000 	.word	0x40021000
 80030a8:	08007ff0 	.word	0x08007ff0

080030ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030b0:	f7ff ffda 	bl	8003068 <HAL_RCC_GetHCLKFreq>
 80030b4:	4601      	mov	r1, r0
 80030b6:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	0adb      	lsrs	r3, r3, #11
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	4a04      	ldr	r2, [pc, #16]	; (80030d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030c2:	5cd3      	ldrb	r3, [r2, r3]
 80030c4:	f003 031f 	and.w	r3, r3, #31
 80030c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40021000 	.word	0x40021000
 80030d4:	08007ff0 	.word	0x08007ff0

080030d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80030e0:	2300      	movs	r3, #0
 80030e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030e4:	4b2a      	ldr	r3, [pc, #168]	; (8003190 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030f0:	f7ff f962 	bl	80023b8 <HAL_PWREx_GetVoltageRange>
 80030f4:	6178      	str	r0, [r7, #20]
 80030f6:	e014      	b.n	8003122 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030f8:	4b25      	ldr	r3, [pc, #148]	; (8003190 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fc:	4a24      	ldr	r2, [pc, #144]	; (8003190 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003102:	6593      	str	r3, [r2, #88]	; 0x58
 8003104:	4b22      	ldr	r3, [pc, #136]	; (8003190 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003110:	f7ff f952 	bl	80023b8 <HAL_PWREx_GetVoltageRange>
 8003114:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003116:	4b1e      	ldr	r3, [pc, #120]	; (8003190 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311a:	4a1d      	ldr	r2, [pc, #116]	; (8003190 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800311c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003120:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003128:	d10b      	bne.n	8003142 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b80      	cmp	r3, #128	; 0x80
 800312e:	d919      	bls.n	8003164 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2ba0      	cmp	r3, #160	; 0xa0
 8003134:	d902      	bls.n	800313c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003136:	2302      	movs	r3, #2
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	e013      	b.n	8003164 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800313c:	2301      	movs	r3, #1
 800313e:	613b      	str	r3, [r7, #16]
 8003140:	e010      	b.n	8003164 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b80      	cmp	r3, #128	; 0x80
 8003146:	d902      	bls.n	800314e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003148:	2303      	movs	r3, #3
 800314a:	613b      	str	r3, [r7, #16]
 800314c:	e00a      	b.n	8003164 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b80      	cmp	r3, #128	; 0x80
 8003152:	d102      	bne.n	800315a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003154:	2302      	movs	r3, #2
 8003156:	613b      	str	r3, [r7, #16]
 8003158:	e004      	b.n	8003164 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b70      	cmp	r3, #112	; 0x70
 800315e:	d101      	bne.n	8003164 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003160:	2301      	movs	r3, #1
 8003162:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003164:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f023 0207 	bic.w	r2, r3, #7
 800316c:	4909      	ldr	r1, [pc, #36]	; (8003194 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	4313      	orrs	r3, r2
 8003172:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003174:	4b07      	ldr	r3, [pc, #28]	; (8003194 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	429a      	cmp	r2, r3
 8003180:	d001      	beq.n	8003186 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40021000 	.word	0x40021000
 8003194:	40022000 	.word	0x40022000

08003198 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031a0:	2300      	movs	r3, #0
 80031a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031a4:	2300      	movs	r3, #0
 80031a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d03f      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031bc:	d01c      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80031be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031c2:	d802      	bhi.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x32>
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00e      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80031c8:	e01f      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80031ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031ce:	d003      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80031d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031d4:	d01c      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80031d6:	e018      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031d8:	4b85      	ldr	r3, [pc, #532]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	4a84      	ldr	r2, [pc, #528]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031e4:	e015      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3304      	adds	r3, #4
 80031ea:	2100      	movs	r1, #0
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fac9 	bl	8003784 <RCCEx_PLLSAI1_Config>
 80031f2:	4603      	mov	r3, r0
 80031f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031f6:	e00c      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3320      	adds	r3, #32
 80031fc:	2100      	movs	r1, #0
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 fbb0 	bl	8003964 <RCCEx_PLLSAI2_Config>
 8003204:	4603      	mov	r3, r0
 8003206:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003208:	e003      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	74fb      	strb	r3, [r7, #19]
      break;
 800320e:	e000      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003210:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003212:	7cfb      	ldrb	r3, [r7, #19]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10b      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003218:	4b75      	ldr	r3, [pc, #468]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003226:	4972      	ldr	r1, [pc, #456]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800322e:	e001      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003230:	7cfb      	ldrb	r3, [r7, #19]
 8003232:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d03f      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003248:	d01c      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800324a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800324e:	d802      	bhi.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00e      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003254:	e01f      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003256:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800325a:	d003      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800325c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003260:	d01c      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003262:	e018      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003264:	4b62      	ldr	r3, [pc, #392]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	4a61      	ldr	r2, [pc, #388]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800326a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800326e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003270:	e015      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3304      	adds	r3, #4
 8003276:	2100      	movs	r1, #0
 8003278:	4618      	mov	r0, r3
 800327a:	f000 fa83 	bl	8003784 <RCCEx_PLLSAI1_Config>
 800327e:	4603      	mov	r3, r0
 8003280:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003282:	e00c      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3320      	adds	r3, #32
 8003288:	2100      	movs	r1, #0
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fb6a 	bl	8003964 <RCCEx_PLLSAI2_Config>
 8003290:	4603      	mov	r3, r0
 8003292:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003294:	e003      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	74fb      	strb	r3, [r7, #19]
      break;
 800329a:	e000      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800329c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800329e:	7cfb      	ldrb	r3, [r7, #19]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10b      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032a4:	4b52      	ldr	r3, [pc, #328]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032b2:	494f      	ldr	r1, [pc, #316]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032ba:	e001      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032bc:	7cfb      	ldrb	r3, [r7, #19]
 80032be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 80a0 	beq.w	800340e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ce:	2300      	movs	r3, #0
 80032d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032d2:	4b47      	ldr	r3, [pc, #284]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80032e2:	2300      	movs	r3, #0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00d      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e8:	4b41      	ldr	r3, [pc, #260]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ec:	4a40      	ldr	r2, [pc, #256]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f2:	6593      	str	r3, [r2, #88]	; 0x58
 80032f4:	4b3e      	ldr	r3, [pc, #248]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003300:	2301      	movs	r3, #1
 8003302:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003304:	4b3b      	ldr	r3, [pc, #236]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a3a      	ldr	r2, [pc, #232]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800330a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800330e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003310:	f7fd fbec 	bl	8000aec <HAL_GetTick>
 8003314:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003316:	e009      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003318:	f7fd fbe8 	bl	8000aec <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d902      	bls.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	74fb      	strb	r3, [r7, #19]
        break;
 800332a:	e005      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800332c:	4b31      	ldr	r3, [pc, #196]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0ef      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003338:	7cfb      	ldrb	r3, [r7, #19]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d15c      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800333e:	4b2c      	ldr	r3, [pc, #176]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003348:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d01f      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	429a      	cmp	r2, r3
 800335a:	d019      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800335c:	4b24      	ldr	r3, [pc, #144]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800335e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003366:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003368:	4b21      	ldr	r3, [pc, #132]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800336a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336e:	4a20      	ldr	r2, [pc, #128]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003378:	4b1d      	ldr	r3, [pc, #116]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800337a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337e:	4a1c      	ldr	r2, [pc, #112]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003388:	4a19      	ldr	r2, [pc, #100]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d016      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339a:	f7fd fba7 	bl	8000aec <HAL_GetTick>
 800339e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033a0:	e00b      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a2:	f7fd fba3 	bl	8000aec <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d902      	bls.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	74fb      	strb	r3, [r7, #19]
            break;
 80033b8:	e006      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ba:	4b0d      	ldr	r3, [pc, #52]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0ec      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80033c8:	7cfb      	ldrb	r3, [r7, #19]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ce:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033de:	4904      	ldr	r1, [pc, #16]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80033e6:	e009      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033e8:	7cfb      	ldrb	r3, [r7, #19]
 80033ea:	74bb      	strb	r3, [r7, #18]
 80033ec:	e006      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x264>
 80033ee:	bf00      	nop
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f8:	7cfb      	ldrb	r3, [r7, #19]
 80033fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033fc:	7c7b      	ldrb	r3, [r7, #17]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d105      	bne.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003402:	4b9e      	ldr	r3, [pc, #632]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003406:	4a9d      	ldr	r2, [pc, #628]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800340c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800341a:	4b98      	ldr	r3, [pc, #608]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800341c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003420:	f023 0203 	bic.w	r2, r3, #3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003428:	4994      	ldr	r1, [pc, #592]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00a      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800343c:	4b8f      	ldr	r3, [pc, #572]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800343e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003442:	f023 020c 	bic.w	r2, r3, #12
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344a:	498c      	ldr	r1, [pc, #560]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0304 	and.w	r3, r3, #4
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800345e:	4b87      	ldr	r3, [pc, #540]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003464:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	4983      	ldr	r1, [pc, #524]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003480:	4b7e      	ldr	r3, [pc, #504]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003486:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	497b      	ldr	r1, [pc, #492]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0310 	and.w	r3, r3, #16
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034a2:	4b76      	ldr	r3, [pc, #472]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b0:	4972      	ldr	r1, [pc, #456]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0320 	and.w	r3, r3, #32
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034c4:	4b6d      	ldr	r3, [pc, #436]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d2:	496a      	ldr	r1, [pc, #424]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034e6:	4b65      	ldr	r3, [pc, #404]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f4:	4961      	ldr	r1, [pc, #388]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003508:	4b5c      	ldr	r3, [pc, #368]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003516:	4959      	ldr	r1, [pc, #356]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800352a:	4b54      	ldr	r3, [pc, #336]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800352c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003530:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003538:	4950      	ldr	r1, [pc, #320]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800354c:	4b4b      	ldr	r3, [pc, #300]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003552:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355a:	4948      	ldr	r1, [pc, #288]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800356e:	4b43      	ldr	r3, [pc, #268]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003574:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357c:	493f      	ldr	r1, [pc, #252]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d028      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003590:	4b3a      	ldr	r3, [pc, #232]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003596:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800359e:	4937      	ldr	r1, [pc, #220]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035ae:	d106      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035b0:	4b32      	ldr	r3, [pc, #200]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	4a31      	ldr	r2, [pc, #196]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ba:	60d3      	str	r3, [r2, #12]
 80035bc:	e011      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035c6:	d10c      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3304      	adds	r3, #4
 80035cc:	2101      	movs	r1, #1
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 f8d8 	bl	8003784 <RCCEx_PLLSAI1_Config>
 80035d4:	4603      	mov	r3, r0
 80035d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80035d8:	7cfb      	ldrb	r3, [r7, #19]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80035de:	7cfb      	ldrb	r3, [r7, #19]
 80035e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d028      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035ee:	4b23      	ldr	r3, [pc, #140]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fc:	491f      	ldr	r1, [pc, #124]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003608:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800360c:	d106      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800360e:	4b1b      	ldr	r3, [pc, #108]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	4a1a      	ldr	r2, [pc, #104]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003614:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003618:	60d3      	str	r3, [r2, #12]
 800361a:	e011      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003620:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003624:	d10c      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3304      	adds	r3, #4
 800362a:	2101      	movs	r1, #1
 800362c:	4618      	mov	r0, r3
 800362e:	f000 f8a9 	bl	8003784 <RCCEx_PLLSAI1_Config>
 8003632:	4603      	mov	r3, r0
 8003634:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003636:	7cfb      	ldrb	r3, [r7, #19]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800363c:	7cfb      	ldrb	r3, [r7, #19]
 800363e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d02b      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003652:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800365a:	4908      	ldr	r1, [pc, #32]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003666:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800366a:	d109      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800366c:	4b03      	ldr	r3, [pc, #12]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4a02      	ldr	r2, [pc, #8]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003676:	60d3      	str	r3, [r2, #12]
 8003678:	e014      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800367a:	bf00      	nop
 800367c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003684:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003688:	d10c      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3304      	adds	r3, #4
 800368e:	2101      	movs	r1, #1
 8003690:	4618      	mov	r0, r3
 8003692:	f000 f877 	bl	8003784 <RCCEx_PLLSAI1_Config>
 8003696:	4603      	mov	r3, r0
 8003698:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800369a:	7cfb      	ldrb	r3, [r7, #19]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80036a0:	7cfb      	ldrb	r3, [r7, #19]
 80036a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d02f      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036b0:	4b2b      	ldr	r3, [pc, #172]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036be:	4928      	ldr	r1, [pc, #160]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036ce:	d10d      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3304      	adds	r3, #4
 80036d4:	2102      	movs	r1, #2
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 f854 	bl	8003784 <RCCEx_PLLSAI1_Config>
 80036dc:	4603      	mov	r3, r0
 80036de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036e0:	7cfb      	ldrb	r3, [r7, #19]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d014      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80036e6:	7cfb      	ldrb	r3, [r7, #19]
 80036e8:	74bb      	strb	r3, [r7, #18]
 80036ea:	e011      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036f4:	d10c      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3320      	adds	r3, #32
 80036fa:	2102      	movs	r1, #2
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 f931 	bl	8003964 <RCCEx_PLLSAI2_Config>
 8003702:	4603      	mov	r3, r0
 8003704:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003706:	7cfb      	ldrb	r3, [r7, #19]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800370c:	7cfb      	ldrb	r3, [r7, #19]
 800370e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800371c:	4b10      	ldr	r3, [pc, #64]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800371e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003722:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800372a:	490d      	ldr	r1, [pc, #52]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00b      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800373e:	4b08      	ldr	r3, [pc, #32]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003744:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800374e:	4904      	ldr	r1, [pc, #16]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003756:	7cbb      	ldrb	r3, [r7, #18]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40021000 	.word	0x40021000

08003764 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003768:	4b05      	ldr	r3, [pc, #20]	; (8003780 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a04      	ldr	r2, [pc, #16]	; (8003780 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800376e:	f043 0304 	orr.w	r3, r3, #4
 8003772:	6013      	str	r3, [r2, #0]
}
 8003774:	bf00      	nop
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40021000 	.word	0x40021000

08003784 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003792:	4b73      	ldr	r3, [pc, #460]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d018      	beq.n	80037d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800379e:	4b70      	ldr	r3, [pc, #448]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f003 0203 	and.w	r2, r3, #3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d10d      	bne.n	80037ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
       ||
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d009      	beq.n	80037ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037b6:	4b6a      	ldr	r3, [pc, #424]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	091b      	lsrs	r3, r3, #4
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
       ||
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d044      	beq.n	8003854 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	73fb      	strb	r3, [r7, #15]
 80037ce:	e041      	b.n	8003854 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d00c      	beq.n	80037f2 <RCCEx_PLLSAI1_Config+0x6e>
 80037d8:	2b03      	cmp	r3, #3
 80037da:	d013      	beq.n	8003804 <RCCEx_PLLSAI1_Config+0x80>
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d120      	bne.n	8003822 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037e0:	4b5f      	ldr	r3, [pc, #380]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d11d      	bne.n	8003828 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037f0:	e01a      	b.n	8003828 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037f2:	4b5b      	ldr	r3, [pc, #364]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d116      	bne.n	800382c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003802:	e013      	b.n	800382c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003804:	4b56      	ldr	r3, [pc, #344]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10f      	bne.n	8003830 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003810:	4b53      	ldr	r3, [pc, #332]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d109      	bne.n	8003830 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003820:	e006      	b.n	8003830 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	73fb      	strb	r3, [r7, #15]
      break;
 8003826:	e004      	b.n	8003832 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003828:	bf00      	nop
 800382a:	e002      	b.n	8003832 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800382c:	bf00      	nop
 800382e:	e000      	b.n	8003832 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003830:	bf00      	nop
    }

    if(status == HAL_OK)
 8003832:	7bfb      	ldrb	r3, [r7, #15]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10d      	bne.n	8003854 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003838:	4b49      	ldr	r3, [pc, #292]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6819      	ldr	r1, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	3b01      	subs	r3, #1
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	430b      	orrs	r3, r1
 800384e:	4944      	ldr	r1, [pc, #272]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003850:	4313      	orrs	r3, r2
 8003852:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d17d      	bne.n	8003956 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800385a:	4b41      	ldr	r3, [pc, #260]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a40      	ldr	r2, [pc, #256]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003860:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003864:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003866:	f7fd f941 	bl	8000aec <HAL_GetTick>
 800386a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800386c:	e009      	b.n	8003882 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800386e:	f7fd f93d 	bl	8000aec <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d902      	bls.n	8003882 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	73fb      	strb	r3, [r7, #15]
        break;
 8003880:	e005      	b.n	800388e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003882:	4b37      	ldr	r3, [pc, #220]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1ef      	bne.n	800386e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800388e:	7bfb      	ldrb	r3, [r7, #15]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d160      	bne.n	8003956 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d111      	bne.n	80038be <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800389a:	4b31      	ldr	r3, [pc, #196]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6892      	ldr	r2, [r2, #8]
 80038aa:	0211      	lsls	r1, r2, #8
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	68d2      	ldr	r2, [r2, #12]
 80038b0:	0912      	lsrs	r2, r2, #4
 80038b2:	0452      	lsls	r2, r2, #17
 80038b4:	430a      	orrs	r2, r1
 80038b6:	492a      	ldr	r1, [pc, #168]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	610b      	str	r3, [r1, #16]
 80038bc:	e027      	b.n	800390e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d112      	bne.n	80038ea <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038c4:	4b26      	ldr	r3, [pc, #152]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80038cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6892      	ldr	r2, [r2, #8]
 80038d4:	0211      	lsls	r1, r2, #8
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6912      	ldr	r2, [r2, #16]
 80038da:	0852      	lsrs	r2, r2, #1
 80038dc:	3a01      	subs	r2, #1
 80038de:	0552      	lsls	r2, r2, #21
 80038e0:	430a      	orrs	r2, r1
 80038e2:	491f      	ldr	r1, [pc, #124]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	610b      	str	r3, [r1, #16]
 80038e8:	e011      	b.n	800390e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038ea:	4b1d      	ldr	r3, [pc, #116]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6892      	ldr	r2, [r2, #8]
 80038fa:	0211      	lsls	r1, r2, #8
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6952      	ldr	r2, [r2, #20]
 8003900:	0852      	lsrs	r2, r2, #1
 8003902:	3a01      	subs	r2, #1
 8003904:	0652      	lsls	r2, r2, #25
 8003906:	430a      	orrs	r2, r1
 8003908:	4915      	ldr	r1, [pc, #84]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 800390a:	4313      	orrs	r3, r2
 800390c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800390e:	4b14      	ldr	r3, [pc, #80]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a13      	ldr	r2, [pc, #76]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003914:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003918:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391a:	f7fd f8e7 	bl	8000aec <HAL_GetTick>
 800391e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003920:	e009      	b.n	8003936 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003922:	f7fd f8e3 	bl	8000aec <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d902      	bls.n	8003936 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	73fb      	strb	r3, [r7, #15]
          break;
 8003934:	e005      	b.n	8003942 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003936:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0ef      	beq.n	8003922 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003942:	7bfb      	ldrb	r3, [r7, #15]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d106      	bne.n	8003956 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003948:	4b05      	ldr	r3, [pc, #20]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	4903      	ldr	r1, [pc, #12]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003952:	4313      	orrs	r3, r2
 8003954:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003956:	7bfb      	ldrb	r3, [r7, #15]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40021000 	.word	0x40021000

08003964 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003972:	4b68      	ldr	r3, [pc, #416]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d018      	beq.n	80039b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800397e:	4b65      	ldr	r3, [pc, #404]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f003 0203 	and.w	r2, r3, #3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d10d      	bne.n	80039aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
       ||
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003996:	4b5f      	ldr	r3, [pc, #380]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	091b      	lsrs	r3, r3, #4
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
       ||
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d044      	beq.n	8003a34 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	73fb      	strb	r3, [r7, #15]
 80039ae:	e041      	b.n	8003a34 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d00c      	beq.n	80039d2 <RCCEx_PLLSAI2_Config+0x6e>
 80039b8:	2b03      	cmp	r3, #3
 80039ba:	d013      	beq.n	80039e4 <RCCEx_PLLSAI2_Config+0x80>
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d120      	bne.n	8003a02 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039c0:	4b54      	ldr	r3, [pc, #336]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d11d      	bne.n	8003a08 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039d0:	e01a      	b.n	8003a08 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039d2:	4b50      	ldr	r3, [pc, #320]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d116      	bne.n	8003a0c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039e2:	e013      	b.n	8003a0c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039e4:	4b4b      	ldr	r3, [pc, #300]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10f      	bne.n	8003a10 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039f0:	4b48      	ldr	r3, [pc, #288]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d109      	bne.n	8003a10 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a00:	e006      	b.n	8003a10 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	73fb      	strb	r3, [r7, #15]
      break;
 8003a06:	e004      	b.n	8003a12 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003a08:	bf00      	nop
 8003a0a:	e002      	b.n	8003a12 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003a0c:	bf00      	nop
 8003a0e:	e000      	b.n	8003a12 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003a10:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10d      	bne.n	8003a34 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a18:	4b3e      	ldr	r3, [pc, #248]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6819      	ldr	r1, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	430b      	orrs	r3, r1
 8003a2e:	4939      	ldr	r1, [pc, #228]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a34:	7bfb      	ldrb	r3, [r7, #15]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d167      	bne.n	8003b0a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a3a:	4b36      	ldr	r3, [pc, #216]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a35      	ldr	r2, [pc, #212]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a46:	f7fd f851 	bl	8000aec <HAL_GetTick>
 8003a4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a4c:	e009      	b.n	8003a62 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a4e:	f7fd f84d 	bl	8000aec <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d902      	bls.n	8003a62 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	73fb      	strb	r3, [r7, #15]
        break;
 8003a60:	e005      	b.n	8003a6e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a62:	4b2c      	ldr	r3, [pc, #176]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1ef      	bne.n	8003a4e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d14a      	bne.n	8003b0a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d111      	bne.n	8003a9e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a7a:	4b26      	ldr	r3, [pc, #152]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6892      	ldr	r2, [r2, #8]
 8003a8a:	0211      	lsls	r1, r2, #8
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	68d2      	ldr	r2, [r2, #12]
 8003a90:	0912      	lsrs	r2, r2, #4
 8003a92:	0452      	lsls	r2, r2, #17
 8003a94:	430a      	orrs	r2, r1
 8003a96:	491f      	ldr	r1, [pc, #124]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	614b      	str	r3, [r1, #20]
 8003a9c:	e011      	b.n	8003ac2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003aa6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6892      	ldr	r2, [r2, #8]
 8003aae:	0211      	lsls	r1, r2, #8
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6912      	ldr	r2, [r2, #16]
 8003ab4:	0852      	lsrs	r2, r2, #1
 8003ab6:	3a01      	subs	r2, #1
 8003ab8:	0652      	lsls	r2, r2, #25
 8003aba:	430a      	orrs	r2, r1
 8003abc:	4915      	ldr	r1, [pc, #84]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ac2:	4b14      	ldr	r3, [pc, #80]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a13      	ldr	r2, [pc, #76]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003acc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ace:	f7fd f80d 	bl	8000aec <HAL_GetTick>
 8003ad2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ad4:	e009      	b.n	8003aea <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ad6:	f7fd f809 	bl	8000aec <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d902      	bls.n	8003aea <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	73fb      	strb	r3, [r7, #15]
          break;
 8003ae8:	e005      	b.n	8003af6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003aea:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0ef      	beq.n	8003ad6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d106      	bne.n	8003b0a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003afe:	695a      	ldr	r2, [r3, #20]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	4903      	ldr	r1, [pc, #12]	; (8003b14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40021000 	.word	0x40021000

08003b18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e07c      	b.n	8003c24 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d106      	bne.n	8003b4a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f002 fe3f 	bl	80067c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b60:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b6a:	d902      	bls.n	8003b72 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	e002      	b.n	8003b78 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b76:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b80:	d007      	beq.n	8003b92 <HAL_SPI_Init+0x7a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b8a:	d002      	beq.n	8003b92 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10b      	bne.n	8003bb2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ba2:	d903      	bls.n	8003bac <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	631a      	str	r2, [r3, #48]	; 0x30
 8003baa:	e002      	b.n	8003bb2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	ea42 0103 	orr.w	r1, r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	0c1b      	lsrs	r3, r3, #16
 8003bf2:	f003 0204 	and.w	r2, r3, #4
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	ea42 0103 	orr.w	r1, r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e040      	b.n	8003cc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f002 fe30 	bl	80068b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2224      	movs	r2, #36	; 0x24
 8003c58:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0201 	bic.w	r2, r2, #1
 8003c68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f98c 	bl	8003f88 <UART_SetConfig>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d101      	bne.n	8003c7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e022      	b.n	8003cc0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 fcc8 	bl	8004618 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ca6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fd4f 	bl	800475c <UART_CheckIdleState>
 8003cbe:	4603      	mov	r3, r0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08a      	sub	sp, #40	; 0x28
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cdc:	2b20      	cmp	r3, #32
 8003cde:	f040 8081 	bne.w	8003de4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d002      	beq.n	8003cee <HAL_UART_Transmit+0x26>
 8003ce8:	88fb      	ldrh	r3, [r7, #6]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e079      	b.n	8003de6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_UART_Transmit+0x38>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e072      	b.n	8003de6 <HAL_UART_Transmit+0x11e>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2221      	movs	r2, #33	; 0x21
 8003d12:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003d14:	f7fc feea 	bl	8000aec <HAL_GetTick>
 8003d18:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	88fa      	ldrh	r2, [r7, #6]
 8003d1e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	88fa      	ldrh	r2, [r7, #6]
 8003d26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d32:	d108      	bne.n	8003d46 <HAL_UART_Transmit+0x7e>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d104      	bne.n	8003d46 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	61bb      	str	r3, [r7, #24]
 8003d44:	e003      	b.n	8003d4e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d4e:	e02d      	b.n	8003dac <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	2200      	movs	r2, #0
 8003d58:	2180      	movs	r1, #128	; 0x80
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 fd43 	bl	80047e6 <UART_WaitOnFlagUntilTimeout>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e03d      	b.n	8003de6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10b      	bne.n	8003d88 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	881a      	ldrh	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d7c:	b292      	uxth	r2, r2
 8003d7e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	3302      	adds	r3, #2
 8003d84:	61bb      	str	r3, [r7, #24]
 8003d86:	e008      	b.n	8003d9a <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	781a      	ldrb	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	b292      	uxth	r2, r2
 8003d92:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	3301      	adds	r3, #1
 8003d98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1cb      	bne.n	8003d50 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	2140      	movs	r1, #64	; 0x40
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 fd0f 	bl	80047e6 <UART_WaitOnFlagUntilTimeout>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e009      	b.n	8003de6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	e000      	b.n	8003de6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003de4:	2302      	movs	r3, #2
  }
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3720      	adds	r7, #32
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b08a      	sub	sp, #40	; 0x28
 8003df2:	af02      	add	r7, sp, #8
 8003df4:	60f8      	str	r0, [r7, #12]
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	603b      	str	r3, [r7, #0]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	f040 80bb 	bne.w	8003f7e <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <HAL_UART_Receive+0x26>
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0b3      	b.n	8003f80 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_UART_Receive+0x38>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e0ac      	b.n	8003f80 <HAL_UART_Receive+0x192>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2222      	movs	r2, #34	; 0x22
 8003e38:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003e3a:	f7fc fe57 	bl	8000aec <HAL_GetTick>
 8003e3e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	88fa      	ldrh	r2, [r7, #6]
 8003e44:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	88fa      	ldrh	r2, [r7, #6]
 8003e4c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e58:	d10e      	bne.n	8003e78 <HAL_UART_Receive+0x8a>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d105      	bne.n	8003e6e <HAL_UART_Receive+0x80>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003e68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e6c:	e02d      	b.n	8003eca <HAL_UART_Receive+0xdc>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	22ff      	movs	r2, #255	; 0xff
 8003e72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e76:	e028      	b.n	8003eca <HAL_UART_Receive+0xdc>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10d      	bne.n	8003e9c <HAL_UART_Receive+0xae>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d104      	bne.n	8003e92 <HAL_UART_Receive+0xa4>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	22ff      	movs	r2, #255	; 0xff
 8003e8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e90:	e01b      	b.n	8003eca <HAL_UART_Receive+0xdc>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	227f      	movs	r2, #127	; 0x7f
 8003e96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e9a:	e016      	b.n	8003eca <HAL_UART_Receive+0xdc>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ea4:	d10d      	bne.n	8003ec2 <HAL_UART_Receive+0xd4>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d104      	bne.n	8003eb8 <HAL_UART_Receive+0xca>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	227f      	movs	r2, #127	; 0x7f
 8003eb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003eb6:	e008      	b.n	8003eca <HAL_UART_Receive+0xdc>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	223f      	movs	r2, #63	; 0x3f
 8003ebc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ec0:	e003      	b.n	8003eca <HAL_UART_Receive+0xdc>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003ed0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eda:	d108      	bne.n	8003eee <HAL_UART_Receive+0x100>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d104      	bne.n	8003eee <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	61bb      	str	r3, [r7, #24]
 8003eec:	e003      	b.n	8003ef6 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003ef6:	e033      	b.n	8003f60 <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	2200      	movs	r2, #0
 8003f00:	2120      	movs	r1, #32
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 fc6f 	bl	80047e6 <UART_WaitOnFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e036      	b.n	8003f80 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10c      	bne.n	8003f32 <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	8a7b      	ldrh	r3, [r7, #18]
 8003f22:	4013      	ands	r3, r2
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	3302      	adds	r3, #2
 8003f2e:	61bb      	str	r3, [r7, #24]
 8003f30:	e00d      	b.n	8003f4e <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	8a7b      	ldrh	r3, [r7, #18]
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	4013      	ands	r3, r2
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1c5      	bne.n	8003ef8 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	e000      	b.n	8003f80 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8003f7e:	2302      	movs	r3, #2
  }
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3720      	adds	r7, #32
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f88:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003f8c:	b088      	sub	sp, #32
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	4bac      	ldr	r3, [pc, #688]	; (8004270 <UART_SetConfig+0x2e8>)
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6812      	ldr	r2, [r2, #0]
 8003fc4:	69f9      	ldr	r1, [r7, #28]
 8003fc6:	430b      	orrs	r3, r1
 8003fc8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4aa2      	ldr	r2, [pc, #648]	; (8004274 <UART_SetConfig+0x2ec>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d004      	beq.n	8003ffa <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	69fa      	ldr	r2, [r7, #28]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	69fa      	ldr	r2, [r7, #28]
 800400a:	430a      	orrs	r2, r1
 800400c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a99      	ldr	r2, [pc, #612]	; (8004278 <UART_SetConfig+0x2f0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d121      	bne.n	800405c <UART_SetConfig+0xd4>
 8004018:	4b98      	ldr	r3, [pc, #608]	; (800427c <UART_SetConfig+0x2f4>)
 800401a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	2b03      	cmp	r3, #3
 8004024:	d816      	bhi.n	8004054 <UART_SetConfig+0xcc>
 8004026:	a201      	add	r2, pc, #4	; (adr r2, 800402c <UART_SetConfig+0xa4>)
 8004028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402c:	0800403d 	.word	0x0800403d
 8004030:	08004049 	.word	0x08004049
 8004034:	08004043 	.word	0x08004043
 8004038:	0800404f 	.word	0x0800404f
 800403c:	2301      	movs	r3, #1
 800403e:	76fb      	strb	r3, [r7, #27]
 8004040:	e0e8      	b.n	8004214 <UART_SetConfig+0x28c>
 8004042:	2302      	movs	r3, #2
 8004044:	76fb      	strb	r3, [r7, #27]
 8004046:	e0e5      	b.n	8004214 <UART_SetConfig+0x28c>
 8004048:	2304      	movs	r3, #4
 800404a:	76fb      	strb	r3, [r7, #27]
 800404c:	e0e2      	b.n	8004214 <UART_SetConfig+0x28c>
 800404e:	2308      	movs	r3, #8
 8004050:	76fb      	strb	r3, [r7, #27]
 8004052:	e0df      	b.n	8004214 <UART_SetConfig+0x28c>
 8004054:	2310      	movs	r3, #16
 8004056:	76fb      	strb	r3, [r7, #27]
 8004058:	bf00      	nop
 800405a:	e0db      	b.n	8004214 <UART_SetConfig+0x28c>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a87      	ldr	r2, [pc, #540]	; (8004280 <UART_SetConfig+0x2f8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d134      	bne.n	80040d0 <UART_SetConfig+0x148>
 8004066:	4b85      	ldr	r3, [pc, #532]	; (800427c <UART_SetConfig+0x2f4>)
 8004068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406c:	f003 030c 	and.w	r3, r3, #12
 8004070:	2b0c      	cmp	r3, #12
 8004072:	d829      	bhi.n	80040c8 <UART_SetConfig+0x140>
 8004074:	a201      	add	r2, pc, #4	; (adr r2, 800407c <UART_SetConfig+0xf4>)
 8004076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407a:	bf00      	nop
 800407c:	080040b1 	.word	0x080040b1
 8004080:	080040c9 	.word	0x080040c9
 8004084:	080040c9 	.word	0x080040c9
 8004088:	080040c9 	.word	0x080040c9
 800408c:	080040bd 	.word	0x080040bd
 8004090:	080040c9 	.word	0x080040c9
 8004094:	080040c9 	.word	0x080040c9
 8004098:	080040c9 	.word	0x080040c9
 800409c:	080040b7 	.word	0x080040b7
 80040a0:	080040c9 	.word	0x080040c9
 80040a4:	080040c9 	.word	0x080040c9
 80040a8:	080040c9 	.word	0x080040c9
 80040ac:	080040c3 	.word	0x080040c3
 80040b0:	2300      	movs	r3, #0
 80040b2:	76fb      	strb	r3, [r7, #27]
 80040b4:	e0ae      	b.n	8004214 <UART_SetConfig+0x28c>
 80040b6:	2302      	movs	r3, #2
 80040b8:	76fb      	strb	r3, [r7, #27]
 80040ba:	e0ab      	b.n	8004214 <UART_SetConfig+0x28c>
 80040bc:	2304      	movs	r3, #4
 80040be:	76fb      	strb	r3, [r7, #27]
 80040c0:	e0a8      	b.n	8004214 <UART_SetConfig+0x28c>
 80040c2:	2308      	movs	r3, #8
 80040c4:	76fb      	strb	r3, [r7, #27]
 80040c6:	e0a5      	b.n	8004214 <UART_SetConfig+0x28c>
 80040c8:	2310      	movs	r3, #16
 80040ca:	76fb      	strb	r3, [r7, #27]
 80040cc:	bf00      	nop
 80040ce:	e0a1      	b.n	8004214 <UART_SetConfig+0x28c>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a6b      	ldr	r2, [pc, #428]	; (8004284 <UART_SetConfig+0x2fc>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d120      	bne.n	800411c <UART_SetConfig+0x194>
 80040da:	4b68      	ldr	r3, [pc, #416]	; (800427c <UART_SetConfig+0x2f4>)
 80040dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040e4:	2b10      	cmp	r3, #16
 80040e6:	d00f      	beq.n	8004108 <UART_SetConfig+0x180>
 80040e8:	2b10      	cmp	r3, #16
 80040ea:	d802      	bhi.n	80040f2 <UART_SetConfig+0x16a>
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <UART_SetConfig+0x174>
 80040f0:	e010      	b.n	8004114 <UART_SetConfig+0x18c>
 80040f2:	2b20      	cmp	r3, #32
 80040f4:	d005      	beq.n	8004102 <UART_SetConfig+0x17a>
 80040f6:	2b30      	cmp	r3, #48	; 0x30
 80040f8:	d009      	beq.n	800410e <UART_SetConfig+0x186>
 80040fa:	e00b      	b.n	8004114 <UART_SetConfig+0x18c>
 80040fc:	2300      	movs	r3, #0
 80040fe:	76fb      	strb	r3, [r7, #27]
 8004100:	e088      	b.n	8004214 <UART_SetConfig+0x28c>
 8004102:	2302      	movs	r3, #2
 8004104:	76fb      	strb	r3, [r7, #27]
 8004106:	e085      	b.n	8004214 <UART_SetConfig+0x28c>
 8004108:	2304      	movs	r3, #4
 800410a:	76fb      	strb	r3, [r7, #27]
 800410c:	e082      	b.n	8004214 <UART_SetConfig+0x28c>
 800410e:	2308      	movs	r3, #8
 8004110:	76fb      	strb	r3, [r7, #27]
 8004112:	e07f      	b.n	8004214 <UART_SetConfig+0x28c>
 8004114:	2310      	movs	r3, #16
 8004116:	76fb      	strb	r3, [r7, #27]
 8004118:	bf00      	nop
 800411a:	e07b      	b.n	8004214 <UART_SetConfig+0x28c>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a59      	ldr	r2, [pc, #356]	; (8004288 <UART_SetConfig+0x300>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d120      	bne.n	8004168 <UART_SetConfig+0x1e0>
 8004126:	4b55      	ldr	r3, [pc, #340]	; (800427c <UART_SetConfig+0x2f4>)
 8004128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004130:	2b40      	cmp	r3, #64	; 0x40
 8004132:	d00f      	beq.n	8004154 <UART_SetConfig+0x1cc>
 8004134:	2b40      	cmp	r3, #64	; 0x40
 8004136:	d802      	bhi.n	800413e <UART_SetConfig+0x1b6>
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <UART_SetConfig+0x1c0>
 800413c:	e010      	b.n	8004160 <UART_SetConfig+0x1d8>
 800413e:	2b80      	cmp	r3, #128	; 0x80
 8004140:	d005      	beq.n	800414e <UART_SetConfig+0x1c6>
 8004142:	2bc0      	cmp	r3, #192	; 0xc0
 8004144:	d009      	beq.n	800415a <UART_SetConfig+0x1d2>
 8004146:	e00b      	b.n	8004160 <UART_SetConfig+0x1d8>
 8004148:	2300      	movs	r3, #0
 800414a:	76fb      	strb	r3, [r7, #27]
 800414c:	e062      	b.n	8004214 <UART_SetConfig+0x28c>
 800414e:	2302      	movs	r3, #2
 8004150:	76fb      	strb	r3, [r7, #27]
 8004152:	e05f      	b.n	8004214 <UART_SetConfig+0x28c>
 8004154:	2304      	movs	r3, #4
 8004156:	76fb      	strb	r3, [r7, #27]
 8004158:	e05c      	b.n	8004214 <UART_SetConfig+0x28c>
 800415a:	2308      	movs	r3, #8
 800415c:	76fb      	strb	r3, [r7, #27]
 800415e:	e059      	b.n	8004214 <UART_SetConfig+0x28c>
 8004160:	2310      	movs	r3, #16
 8004162:	76fb      	strb	r3, [r7, #27]
 8004164:	bf00      	nop
 8004166:	e055      	b.n	8004214 <UART_SetConfig+0x28c>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a47      	ldr	r2, [pc, #284]	; (800428c <UART_SetConfig+0x304>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d124      	bne.n	80041bc <UART_SetConfig+0x234>
 8004172:	4b42      	ldr	r3, [pc, #264]	; (800427c <UART_SetConfig+0x2f4>)
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800417c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004180:	d012      	beq.n	80041a8 <UART_SetConfig+0x220>
 8004182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004186:	d802      	bhi.n	800418e <UART_SetConfig+0x206>
 8004188:	2b00      	cmp	r3, #0
 800418a:	d007      	beq.n	800419c <UART_SetConfig+0x214>
 800418c:	e012      	b.n	80041b4 <UART_SetConfig+0x22c>
 800418e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004192:	d006      	beq.n	80041a2 <UART_SetConfig+0x21a>
 8004194:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004198:	d009      	beq.n	80041ae <UART_SetConfig+0x226>
 800419a:	e00b      	b.n	80041b4 <UART_SetConfig+0x22c>
 800419c:	2300      	movs	r3, #0
 800419e:	76fb      	strb	r3, [r7, #27]
 80041a0:	e038      	b.n	8004214 <UART_SetConfig+0x28c>
 80041a2:	2302      	movs	r3, #2
 80041a4:	76fb      	strb	r3, [r7, #27]
 80041a6:	e035      	b.n	8004214 <UART_SetConfig+0x28c>
 80041a8:	2304      	movs	r3, #4
 80041aa:	76fb      	strb	r3, [r7, #27]
 80041ac:	e032      	b.n	8004214 <UART_SetConfig+0x28c>
 80041ae:	2308      	movs	r3, #8
 80041b0:	76fb      	strb	r3, [r7, #27]
 80041b2:	e02f      	b.n	8004214 <UART_SetConfig+0x28c>
 80041b4:	2310      	movs	r3, #16
 80041b6:	76fb      	strb	r3, [r7, #27]
 80041b8:	bf00      	nop
 80041ba:	e02b      	b.n	8004214 <UART_SetConfig+0x28c>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a2c      	ldr	r2, [pc, #176]	; (8004274 <UART_SetConfig+0x2ec>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d124      	bne.n	8004210 <UART_SetConfig+0x288>
 80041c6:	4b2d      	ldr	r3, [pc, #180]	; (800427c <UART_SetConfig+0x2f4>)
 80041c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d4:	d012      	beq.n	80041fc <UART_SetConfig+0x274>
 80041d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041da:	d802      	bhi.n	80041e2 <UART_SetConfig+0x25a>
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d007      	beq.n	80041f0 <UART_SetConfig+0x268>
 80041e0:	e012      	b.n	8004208 <UART_SetConfig+0x280>
 80041e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041e6:	d006      	beq.n	80041f6 <UART_SetConfig+0x26e>
 80041e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041ec:	d009      	beq.n	8004202 <UART_SetConfig+0x27a>
 80041ee:	e00b      	b.n	8004208 <UART_SetConfig+0x280>
 80041f0:	2300      	movs	r3, #0
 80041f2:	76fb      	strb	r3, [r7, #27]
 80041f4:	e00e      	b.n	8004214 <UART_SetConfig+0x28c>
 80041f6:	2302      	movs	r3, #2
 80041f8:	76fb      	strb	r3, [r7, #27]
 80041fa:	e00b      	b.n	8004214 <UART_SetConfig+0x28c>
 80041fc:	2304      	movs	r3, #4
 80041fe:	76fb      	strb	r3, [r7, #27]
 8004200:	e008      	b.n	8004214 <UART_SetConfig+0x28c>
 8004202:	2308      	movs	r3, #8
 8004204:	76fb      	strb	r3, [r7, #27]
 8004206:	e005      	b.n	8004214 <UART_SetConfig+0x28c>
 8004208:	2310      	movs	r3, #16
 800420a:	76fb      	strb	r3, [r7, #27]
 800420c:	bf00      	nop
 800420e:	e001      	b.n	8004214 <UART_SetConfig+0x28c>
 8004210:	2310      	movs	r3, #16
 8004212:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a16      	ldr	r2, [pc, #88]	; (8004274 <UART_SetConfig+0x2ec>)
 800421a:	4293      	cmp	r3, r2
 800421c:	f040 80fa 	bne.w	8004414 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004220:	7efb      	ldrb	r3, [r7, #27]
 8004222:	2b08      	cmp	r3, #8
 8004224:	d836      	bhi.n	8004294 <UART_SetConfig+0x30c>
 8004226:	a201      	add	r2, pc, #4	; (adr r2, 800422c <UART_SetConfig+0x2a4>)
 8004228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422c:	08004251 	.word	0x08004251
 8004230:	08004295 	.word	0x08004295
 8004234:	08004259 	.word	0x08004259
 8004238:	08004295 	.word	0x08004295
 800423c:	0800425f 	.word	0x0800425f
 8004240:	08004295 	.word	0x08004295
 8004244:	08004295 	.word	0x08004295
 8004248:	08004295 	.word	0x08004295
 800424c:	08004267 	.word	0x08004267
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004250:	f7fe ff16 	bl	8003080 <HAL_RCC_GetPCLK1Freq>
 8004254:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004256:	e020      	b.n	800429a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004258:	4b0d      	ldr	r3, [pc, #52]	; (8004290 <UART_SetConfig+0x308>)
 800425a:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800425c:	e01d      	b.n	800429a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800425e:	f7fe fe79 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8004262:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004264:	e019      	b.n	800429a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800426a:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800426c:	e015      	b.n	800429a <UART_SetConfig+0x312>
 800426e:	bf00      	nop
 8004270:	efff69f3 	.word	0xefff69f3
 8004274:	40008000 	.word	0x40008000
 8004278:	40013800 	.word	0x40013800
 800427c:	40021000 	.word	0x40021000
 8004280:	40004400 	.word	0x40004400
 8004284:	40004800 	.word	0x40004800
 8004288:	40004c00 	.word	0x40004c00
 800428c:	40005000 	.word	0x40005000
 8004290:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	74fb      	strb	r3, [r7, #19]
        break;
 8004298:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 81ac 	beq.w	80045fa <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	4613      	mov	r3, r2
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	4413      	add	r3, r2
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d305      	bcc.n	80042be <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d902      	bls.n	80042c4 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	74fb      	strb	r3, [r7, #19]
 80042c2:	e19a      	b.n	80045fa <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 80042c4:	7efb      	ldrb	r3, [r7, #27]
 80042c6:	2b08      	cmp	r3, #8
 80042c8:	f200 8091 	bhi.w	80043ee <UART_SetConfig+0x466>
 80042cc:	a201      	add	r2, pc, #4	; (adr r2, 80042d4 <UART_SetConfig+0x34c>)
 80042ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d2:	bf00      	nop
 80042d4:	080042f9 	.word	0x080042f9
 80042d8:	080043ef 	.word	0x080043ef
 80042dc:	08004345 	.word	0x08004345
 80042e0:	080043ef 	.word	0x080043ef
 80042e4:	08004379 	.word	0x08004379
 80042e8:	080043ef 	.word	0x080043ef
 80042ec:	080043ef 	.word	0x080043ef
 80042f0:	080043ef 	.word	0x080043ef
 80042f4:	080043c5 	.word	0x080043c5
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80042f8:	f7fe fec2 	bl	8003080 <HAL_RCC_GetPCLK1Freq>
 80042fc:	4603      	mov	r3, r0
 80042fe:	4619      	mov	r1, r3
 8004300:	f04f 0200 	mov.w	r2, #0
 8004304:	f04f 0300 	mov.w	r3, #0
 8004308:	f04f 0400 	mov.w	r4, #0
 800430c:	0214      	lsls	r4, r2, #8
 800430e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004312:	020b      	lsls	r3, r1, #8
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6852      	ldr	r2, [r2, #4]
 8004318:	0852      	lsrs	r2, r2, #1
 800431a:	4611      	mov	r1, r2
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	eb13 0b01 	adds.w	fp, r3, r1
 8004324:	eb44 0c02 	adc.w	ip, r4, r2
 8004328:	4658      	mov	r0, fp
 800432a:	4661      	mov	r1, ip
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f04f 0400 	mov.w	r4, #0
 8004334:	461a      	mov	r2, r3
 8004336:	4623      	mov	r3, r4
 8004338:	f7fb ff9a 	bl	8000270 <__aeabi_uldivmod>
 800433c:	4603      	mov	r3, r0
 800433e:	460c      	mov	r4, r1
 8004340:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004342:	e057      	b.n	80043f4 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	085b      	lsrs	r3, r3, #1
 800434a:	f04f 0400 	mov.w	r4, #0
 800434e:	49b1      	ldr	r1, [pc, #708]	; (8004614 <UART_SetConfig+0x68c>)
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	eb13 0b01 	adds.w	fp, r3, r1
 8004358:	eb44 0c02 	adc.w	ip, r4, r2
 800435c:	4658      	mov	r0, fp
 800435e:	4661      	mov	r1, ip
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f04f 0400 	mov.w	r4, #0
 8004368:	461a      	mov	r2, r3
 800436a:	4623      	mov	r3, r4
 800436c:	f7fb ff80 	bl	8000270 <__aeabi_uldivmod>
 8004370:	4603      	mov	r3, r0
 8004372:	460c      	mov	r4, r1
 8004374:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004376:	e03d      	b.n	80043f4 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004378:	f7fe fdec 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 800437c:	4603      	mov	r3, r0
 800437e:	4619      	mov	r1, r3
 8004380:	f04f 0200 	mov.w	r2, #0
 8004384:	f04f 0300 	mov.w	r3, #0
 8004388:	f04f 0400 	mov.w	r4, #0
 800438c:	0214      	lsls	r4, r2, #8
 800438e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004392:	020b      	lsls	r3, r1, #8
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6852      	ldr	r2, [r2, #4]
 8004398:	0852      	lsrs	r2, r2, #1
 800439a:	4611      	mov	r1, r2
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	eb13 0b01 	adds.w	fp, r3, r1
 80043a4:	eb44 0c02 	adc.w	ip, r4, r2
 80043a8:	4658      	mov	r0, fp
 80043aa:	4661      	mov	r1, ip
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f04f 0400 	mov.w	r4, #0
 80043b4:	461a      	mov	r2, r3
 80043b6:	4623      	mov	r3, r4
 80043b8:	f7fb ff5a 	bl	8000270 <__aeabi_uldivmod>
 80043bc:	4603      	mov	r3, r0
 80043be:	460c      	mov	r4, r1
 80043c0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80043c2:	e017      	b.n	80043f4 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	085b      	lsrs	r3, r3, #1
 80043ca:	f04f 0400 	mov.w	r4, #0
 80043ce:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80043d2:	f144 0100 	adc.w	r1, r4, #0
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f04f 0400 	mov.w	r4, #0
 80043de:	461a      	mov	r2, r3
 80043e0:	4623      	mov	r3, r4
 80043e2:	f7fb ff45 	bl	8000270 <__aeabi_uldivmod>
 80043e6:	4603      	mov	r3, r0
 80043e8:	460c      	mov	r4, r1
 80043ea:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80043ec:	e002      	b.n	80043f4 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	74fb      	strb	r3, [r7, #19]
            break;
 80043f2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043fa:	d308      	bcc.n	800440e <UART_SetConfig+0x486>
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004402:	d204      	bcs.n	800440e <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	60da      	str	r2, [r3, #12]
 800440c:	e0f5      	b.n	80045fa <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	74fb      	strb	r3, [r7, #19]
 8004412:	e0f2      	b.n	80045fa <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800441c:	d17f      	bne.n	800451e <UART_SetConfig+0x596>
  {
    switch (clocksource)
 800441e:	7efb      	ldrb	r3, [r7, #27]
 8004420:	2b08      	cmp	r3, #8
 8004422:	d85c      	bhi.n	80044de <UART_SetConfig+0x556>
 8004424:	a201      	add	r2, pc, #4	; (adr r2, 800442c <UART_SetConfig+0x4a4>)
 8004426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442a:	bf00      	nop
 800442c:	08004451 	.word	0x08004451
 8004430:	0800446f 	.word	0x0800446f
 8004434:	0800448d 	.word	0x0800448d
 8004438:	080044df 	.word	0x080044df
 800443c:	080044a9 	.word	0x080044a9
 8004440:	080044df 	.word	0x080044df
 8004444:	080044df 	.word	0x080044df
 8004448:	080044df 	.word	0x080044df
 800444c:	080044c7 	.word	0x080044c7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004450:	f7fe fe16 	bl	8003080 <HAL_RCC_GetPCLK1Freq>
 8004454:	4603      	mov	r3, r0
 8004456:	005a      	lsls	r2, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	085b      	lsrs	r3, r3, #1
 800445e:	441a      	add	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	fbb2 f3f3 	udiv	r3, r2, r3
 8004468:	b29b      	uxth	r3, r3
 800446a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800446c:	e03a      	b.n	80044e4 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800446e:	f7fe fe1d 	bl	80030ac <HAL_RCC_GetPCLK2Freq>
 8004472:	4603      	mov	r3, r0
 8004474:	005a      	lsls	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	085b      	lsrs	r3, r3, #1
 800447c:	441a      	add	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	fbb2 f3f3 	udiv	r3, r2, r3
 8004486:	b29b      	uxth	r3, r3
 8004488:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800448a:	e02b      	b.n	80044e4 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	085b      	lsrs	r3, r3, #1
 8004492:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004496:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6852      	ldr	r2, [r2, #4]
 800449e:	fbb3 f3f2 	udiv	r3, r3, r2
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044a6:	e01d      	b.n	80044e4 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80044a8:	f7fe fd54 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 80044ac:	4603      	mov	r3, r0
 80044ae:	005a      	lsls	r2, r3, #1
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	085b      	lsrs	r3, r3, #1
 80044b6:	441a      	add	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044c4:	e00e      	b.n	80044e4 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	085b      	lsrs	r3, r3, #1
 80044cc:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d8:	b29b      	uxth	r3, r3
 80044da:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044dc:	e002      	b.n	80044e4 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	74fb      	strb	r3, [r7, #19]
        break;
 80044e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	2b0f      	cmp	r3, #15
 80044e8:	d916      	bls.n	8004518 <UART_SetConfig+0x590>
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f0:	d212      	bcs.n	8004518 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	f023 030f 	bic.w	r3, r3, #15
 80044fa:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	085b      	lsrs	r3, r3, #1
 8004500:	b29b      	uxth	r3, r3
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	b29a      	uxth	r2, r3
 8004508:	897b      	ldrh	r3, [r7, #10]
 800450a:	4313      	orrs	r3, r2
 800450c:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	897a      	ldrh	r2, [r7, #10]
 8004514:	60da      	str	r2, [r3, #12]
 8004516:	e070      	b.n	80045fa <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	74fb      	strb	r3, [r7, #19]
 800451c:	e06d      	b.n	80045fa <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 800451e:	7efb      	ldrb	r3, [r7, #27]
 8004520:	2b08      	cmp	r3, #8
 8004522:	d859      	bhi.n	80045d8 <UART_SetConfig+0x650>
 8004524:	a201      	add	r2, pc, #4	; (adr r2, 800452c <UART_SetConfig+0x5a4>)
 8004526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452a:	bf00      	nop
 800452c:	08004551 	.word	0x08004551
 8004530:	0800456d 	.word	0x0800456d
 8004534:	08004589 	.word	0x08004589
 8004538:	080045d9 	.word	0x080045d9
 800453c:	080045a5 	.word	0x080045a5
 8004540:	080045d9 	.word	0x080045d9
 8004544:	080045d9 	.word	0x080045d9
 8004548:	080045d9 	.word	0x080045d9
 800454c:	080045c1 	.word	0x080045c1
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004550:	f7fe fd96 	bl	8003080 <HAL_RCC_GetPCLK1Freq>
 8004554:	4602      	mov	r2, r0
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	085b      	lsrs	r3, r3, #1
 800455c:	441a      	add	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	fbb2 f3f3 	udiv	r3, r2, r3
 8004566:	b29b      	uxth	r3, r3
 8004568:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800456a:	e038      	b.n	80045de <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800456c:	f7fe fd9e 	bl	80030ac <HAL_RCC_GetPCLK2Freq>
 8004570:	4602      	mov	r2, r0
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	085b      	lsrs	r3, r3, #1
 8004578:	441a      	add	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004582:	b29b      	uxth	r3, r3
 8004584:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004586:	e02a      	b.n	80045de <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	085b      	lsrs	r3, r3, #1
 800458e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004592:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6852      	ldr	r2, [r2, #4]
 800459a:	fbb3 f3f2 	udiv	r3, r3, r2
 800459e:	b29b      	uxth	r3, r3
 80045a0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045a2:	e01c      	b.n	80045de <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80045a4:	f7fe fcd6 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 80045a8:	4602      	mov	r2, r0
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	085b      	lsrs	r3, r3, #1
 80045b0:	441a      	add	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045be:	e00e      	b.n	80045de <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	085b      	lsrs	r3, r3, #1
 80045c6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045d6:	e002      	b.n	80045de <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	74fb      	strb	r3, [r7, #19]
        break;
 80045dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2b0f      	cmp	r3, #15
 80045e2:	d908      	bls.n	80045f6 <UART_SetConfig+0x66e>
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ea:	d204      	bcs.n	80045f6 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	60da      	str	r2, [r3, #12]
 80045f4:	e001      	b.n	80045fa <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004606:	7cfb      	ldrb	r3, [r7, #19]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3720      	adds	r7, #32
 800460c:	46bd      	mov	sp, r7
 800460e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004612:	bf00      	nop
 8004614:	f4240000 	.word	0xf4240000

08004618 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00a      	beq.n	8004664 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00a      	beq.n	8004686 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	f003 0308 	and.w	r3, r3, #8
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	f003 0310 	and.w	r3, r3, #16
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d01a      	beq.n	800472e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004716:	d10a      	bne.n	800472e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00a      	beq.n	8004750 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	605a      	str	r2, [r3, #4]
  }
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af02      	add	r7, sp, #8
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800476a:	f7fc f9bf 	bl	8000aec <HAL_GetTick>
 800476e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0308 	and.w	r3, r3, #8
 800477a:	2b08      	cmp	r3, #8
 800477c:	d10e      	bne.n	800479c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800477e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 f82a 	bl	80047e6 <UART_WaitOnFlagUntilTimeout>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e020      	b.n	80047de <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0304 	and.w	r3, r3, #4
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d10e      	bne.n	80047c8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f814 	bl	80047e6 <UART_WaitOnFlagUntilTimeout>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e00a      	b.n	80047de <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2220      	movs	r2, #32
 80047cc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2220      	movs	r2, #32
 80047d2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b084      	sub	sp, #16
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	60f8      	str	r0, [r7, #12]
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	603b      	str	r3, [r7, #0]
 80047f2:	4613      	mov	r3, r2
 80047f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047f6:	e02a      	b.n	800484e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fe:	d026      	beq.n	800484e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004800:	f7fc f974 	bl	8000aec <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	429a      	cmp	r2, r3
 800480e:	d302      	bcc.n	8004816 <UART_WaitOnFlagUntilTimeout+0x30>
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d11b      	bne.n	800484e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004824:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689a      	ldr	r2, [r3, #8]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0201 	bic.w	r2, r2, #1
 8004834:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2220      	movs	r2, #32
 800483a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2220      	movs	r2, #32
 8004840:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e00f      	b.n	800486e <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69da      	ldr	r2, [r3, #28]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4013      	ands	r3, r2
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	429a      	cmp	r2, r3
 800485c:	bf0c      	ite	eq
 800485e:	2301      	moveq	r3, #1
 8004860:	2300      	movne	r3, #0
 8004862:	b2db      	uxtb	r3, r3
 8004864:	461a      	mov	r2, r3
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	429a      	cmp	r2, r3
 800486a:	d0c5      	beq.n	80047f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004880:	4b05      	ldr	r3, [pc, #20]	; (8004898 <LL_EXTI_EnableIT_0_31+0x20>)
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	4904      	ldr	r1, [pc, #16]	; (8004898 <LL_EXTI_EnableIT_0_31+0x20>)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4313      	orrs	r3, r2
 800488a:	600b      	str	r3, [r1, #0]
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	40010400 	.word	0x40010400

0800489c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80048a4:	4b05      	ldr	r3, [pc, #20]	; (80048bc <LL_EXTI_EnableIT_32_63+0x20>)
 80048a6:	6a1a      	ldr	r2, [r3, #32]
 80048a8:	4904      	ldr	r1, [pc, #16]	; (80048bc <LL_EXTI_EnableIT_32_63+0x20>)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	620b      	str	r3, [r1, #32]
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	40010400 	.word	0x40010400

080048c0 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80048c8:	4b06      	ldr	r3, [pc, #24]	; (80048e4 <LL_EXTI_DisableIT_0_31+0x24>)
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	43db      	mvns	r3, r3
 80048d0:	4904      	ldr	r1, [pc, #16]	; (80048e4 <LL_EXTI_DisableIT_0_31+0x24>)
 80048d2:	4013      	ands	r3, r2
 80048d4:	600b      	str	r3, [r1, #0]
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	40010400 	.word	0x40010400

080048e8 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80048f0:	4b06      	ldr	r3, [pc, #24]	; (800490c <LL_EXTI_DisableIT_32_63+0x24>)
 80048f2:	6a1a      	ldr	r2, [r3, #32]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	43db      	mvns	r3, r3
 80048f8:	4904      	ldr	r1, [pc, #16]	; (800490c <LL_EXTI_DisableIT_32_63+0x24>)
 80048fa:	4013      	ands	r3, r2
 80048fc:	620b      	str	r3, [r1, #32]
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	40010400 	.word	0x40010400

08004910 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004918:	4b05      	ldr	r3, [pc, #20]	; (8004930 <LL_EXTI_EnableEvent_0_31+0x20>)
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	4904      	ldr	r1, [pc, #16]	; (8004930 <LL_EXTI_EnableEvent_0_31+0x20>)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4313      	orrs	r3, r2
 8004922:	604b      	str	r3, [r1, #4]

}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	40010400 	.word	0x40010400

08004934 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800493c:	4b05      	ldr	r3, [pc, #20]	; (8004954 <LL_EXTI_EnableEvent_32_63+0x20>)
 800493e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004940:	4904      	ldr	r1, [pc, #16]	; (8004954 <LL_EXTI_EnableEvent_32_63+0x20>)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4313      	orrs	r3, r2
 8004946:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	40010400 	.word	0x40010400

08004958 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004960:	4b06      	ldr	r3, [pc, #24]	; (800497c <LL_EXTI_DisableEvent_0_31+0x24>)
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	43db      	mvns	r3, r3
 8004968:	4904      	ldr	r1, [pc, #16]	; (800497c <LL_EXTI_DisableEvent_0_31+0x24>)
 800496a:	4013      	ands	r3, r2
 800496c:	604b      	str	r3, [r1, #4]
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40010400 	.word	0x40010400

08004980 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8004988:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <LL_EXTI_DisableEvent_32_63+0x24>)
 800498a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	43db      	mvns	r3, r3
 8004990:	4904      	ldr	r1, [pc, #16]	; (80049a4 <LL_EXTI_DisableEvent_32_63+0x24>)
 8004992:	4013      	ands	r3, r2
 8004994:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40010400 	.word	0x40010400

080049a8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80049b0:	4b05      	ldr	r3, [pc, #20]	; (80049c8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	4904      	ldr	r1, [pc, #16]	; (80049c8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	608b      	str	r3, [r1, #8]

}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	40010400 	.word	0x40010400

080049cc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80049d4:	4b05      	ldr	r3, [pc, #20]	; (80049ec <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80049d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049d8:	4904      	ldr	r1, [pc, #16]	; (80049ec <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4313      	orrs	r3, r2
 80049de:	628b      	str	r3, [r1, #40]	; 0x28
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	40010400 	.word	0x40010400

080049f0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80049f8:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	43db      	mvns	r3, r3
 8004a00:	4904      	ldr	r1, [pc, #16]	; (8004a14 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004a02:	4013      	ands	r3, r2
 8004a04:	608b      	str	r3, [r1, #8]

}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	40010400 	.word	0x40010400

08004a18 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8004a20:	4b06      	ldr	r3, [pc, #24]	; (8004a3c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8004a22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	43db      	mvns	r3, r3
 8004a28:	4904      	ldr	r1, [pc, #16]	; (8004a3c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	628b      	str	r3, [r1, #40]	; 0x28
}
 8004a2e:	bf00      	nop
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	40010400 	.word	0x40010400

08004a40 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004a48:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	4904      	ldr	r1, [pc, #16]	; (8004a60 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60cb      	str	r3, [r1, #12]
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	40010400 	.word	0x40010400

08004a64 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8004a6c:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8004a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a70:	4904      	ldr	r1, [pc, #16]	; (8004a84 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	40010400 	.word	0x40010400

08004a88 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004a90:	4b06      	ldr	r3, [pc, #24]	; (8004aac <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	43db      	mvns	r3, r3
 8004a98:	4904      	ldr	r1, [pc, #16]	; (8004aac <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	60cb      	str	r3, [r1, #12]
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40010400 	.word	0x40010400

08004ab0 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8004ab8:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8004aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	43db      	mvns	r3, r3
 8004ac0:	4904      	ldr	r1, [pc, #16]	; (8004ad4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	40010400 	.word	0x40010400

08004ad8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	7a1b      	ldrb	r3, [r3, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 80c6 	beq.w	8004c7a <LL_EXTI_Init+0x1a2>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d05d      	beq.n	8004bb2 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	7a5b      	ldrb	r3, [r3, #9]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d00e      	beq.n	8004b1c <LL_EXTI_Init+0x44>
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d017      	beq.n	8004b32 <LL_EXTI_Init+0x5a>
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d120      	bne.n	8004b48 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7ff ff24 	bl	8004958 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7ff feaf 	bl	8004878 <LL_EXTI_EnableIT_0_31>
          break;
 8004b1a:	e018      	b.n	8004b4e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff fecd 	bl	80048c0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff fef0 	bl	8004910 <LL_EXTI_EnableEvent_0_31>
          break;
 8004b30:	e00d      	b.n	8004b4e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff fe9e 	bl	8004878 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7ff fee5 	bl	8004910 <LL_EXTI_EnableEvent_0_31>
          break;
 8004b46:	e002      	b.n	8004b4e <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	60fb      	str	r3, [r7, #12]
          break;
 8004b4c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	7a9b      	ldrb	r3, [r3, #10]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d02d      	beq.n	8004bb2 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	7a9b      	ldrb	r3, [r3, #10]
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d00e      	beq.n	8004b7c <LL_EXTI_Init+0xa4>
 8004b5e:	2b03      	cmp	r3, #3
 8004b60:	d017      	beq.n	8004b92 <LL_EXTI_Init+0xba>
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d120      	bne.n	8004ba8 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff ff8c 	bl	8004a88 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7ff ff17 	bl	80049a8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8004b7a:	e01b      	b.n	8004bb4 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7ff ff35 	bl	80049f0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff ff58 	bl	8004a40 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004b90:	e010      	b.n	8004bb4 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7ff ff06 	bl	80049a8 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff ff4d 	bl	8004a40 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004ba6:	e005      	b.n	8004bb4 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f043 0302 	orr.w	r3, r3, #2
 8004bae:	60fb      	str	r3, [r7, #12]
            break;
 8004bb0:	e000      	b.n	8004bb4 <LL_EXTI_Init+0xdc>
        }
      }
 8004bb2:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d073      	beq.n	8004ca4 <LL_EXTI_Init+0x1cc>
    {
      switch (EXTI_InitStruct->Mode)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	7a5b      	ldrb	r3, [r3, #9]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d00e      	beq.n	8004be2 <LL_EXTI_Init+0x10a>
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d017      	beq.n	8004bf8 <LL_EXTI_Init+0x120>
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d120      	bne.n	8004c0e <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7ff fed5 	bl	8004980 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7ff fe5e 	bl	800489c <LL_EXTI_EnableIT_32_63>
          break;
 8004be0:	e01a      	b.n	8004c18 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff fe7e 	bl	80048e8 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7ff fe9f 	bl	8004934 <LL_EXTI_EnableEvent_32_63>
          break;
 8004bf6:	e00f      	b.n	8004c18 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff fe4d 	bl	800489c <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7ff fe94 	bl	8004934 <LL_EXTI_EnableEvent_32_63>
          break;
 8004c0c:	e004      	b.n	8004c18 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f043 0304 	orr.w	r3, r3, #4
 8004c14:	60fb      	str	r3, [r7, #12]
          break;
 8004c16:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	7a9b      	ldrb	r3, [r3, #10]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d041      	beq.n	8004ca4 <LL_EXTI_Init+0x1cc>
      {
        switch (EXTI_InitStruct->Trigger)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	7a9b      	ldrb	r3, [r3, #10]
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d00e      	beq.n	8004c46 <LL_EXTI_Init+0x16e>
 8004c28:	2b03      	cmp	r3, #3
 8004c2a:	d017      	beq.n	8004c5c <LL_EXTI_Init+0x184>
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d120      	bne.n	8004c72 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff ff3b 	bl	8004ab0 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7ff fec4 	bl	80049cc <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8004c44:	e02f      	b.n	8004ca6 <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff fee4 	bl	8004a18 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7ff ff05 	bl	8004a64 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8004c5a:	e024      	b.n	8004ca6 <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff feb3 	bl	80049cc <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff fefa 	bl	8004a64 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8004c70:	e019      	b.n	8004ca6 <LL_EXTI_Init+0x1ce>
          default:
            status = ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	60fb      	str	r3, [r7, #12]
            break;
 8004c76:	bf00      	nop
 8004c78:	e015      	b.n	8004ca6 <LL_EXTI_Init+0x1ce>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff fe1e 	bl	80048c0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7ff fe65 	bl	8004958 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff fe28 	bl	80048e8 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7ff fe6f 	bl	8004980 <LL_EXTI_DisableEvent_32_63>
 8004ca2:	e000      	b.n	8004ca6 <LL_EXTI_Init+0x1ce>
      }
 8004ca4:	bf00      	nop
  }

  return status;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b089      	sub	sp, #36	; 0x24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	fa93 f3a3 	rbit	r3, r3
 8004cca:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	fab3 f383 	clz	r3, r3
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	2103      	movs	r1, #3
 8004cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	401a      	ands	r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	fa93 f3a3 	rbit	r3, r3
 8004cea:	61bb      	str	r3, [r7, #24]
  return result;
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	fab3 f383 	clz	r3, r3
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	6879      	ldr	r1, [r7, #4]
 8004cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	601a      	str	r2, [r3, #0]
}
 8004d02:	bf00      	nop
 8004d04:	3724      	adds	r7, #36	; 0x24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b085      	sub	sp, #20
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	60f8      	str	r0, [r7, #12]
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	43db      	mvns	r3, r3
 8004d22:	401a      	ands	r2, r3
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	6879      	ldr	r1, [r7, #4]
 8004d28:	fb01 f303 	mul.w	r3, r1, r3
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	605a      	str	r2, [r3, #4]
}
 8004d32:	bf00      	nop
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b089      	sub	sp, #36	; 0x24
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	60f8      	str	r0, [r7, #12]
 8004d46:	60b9      	str	r1, [r7, #8]
 8004d48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	689a      	ldr	r2, [r3, #8]
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	fa93 f3a3 	rbit	r3, r3
 8004d58:	613b      	str	r3, [r7, #16]
  return result;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	fab3 f383 	clz	r3, r3
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	2103      	movs	r1, #3
 8004d66:	fa01 f303 	lsl.w	r3, r1, r3
 8004d6a:	43db      	mvns	r3, r3
 8004d6c:	401a      	ands	r2, r3
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	fa93 f3a3 	rbit	r3, r3
 8004d78:	61bb      	str	r3, [r7, #24]
  return result;
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	fab3 f383 	clz	r3, r3
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	6879      	ldr	r1, [r7, #4]
 8004d86:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8004d90:	bf00      	nop
 8004d92:	3724      	adds	r7, #36	; 0x24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b089      	sub	sp, #36	; 0x24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	fa93 f3a3 	rbit	r3, r3
 8004db6:	613b      	str	r3, [r7, #16]
  return result;
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	fab3 f383 	clz	r3, r3
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	2103      	movs	r1, #3
 8004dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc8:	43db      	mvns	r3, r3
 8004dca:	401a      	ands	r2, r3
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	fa93 f3a3 	rbit	r3, r3
 8004dd6:	61bb      	str	r3, [r7, #24]
  return result;
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	fab3 f383 	clz	r3, r3
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	fa01 f303 	lsl.w	r3, r1, r3
 8004de8:	431a      	orrs	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	60da      	str	r2, [r3, #12]
}
 8004dee:	bf00      	nop
 8004df0:	3724      	adds	r7, #36	; 0x24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b089      	sub	sp, #36	; 0x24
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	60f8      	str	r0, [r7, #12]
 8004e02:	60b9      	str	r1, [r7, #8]
 8004e04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6a1a      	ldr	r2, [r3, #32]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	fa93 f3a3 	rbit	r3, r3
 8004e14:	613b      	str	r3, [r7, #16]
  return result;
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	fab3 f383 	clz	r3, r3
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	210f      	movs	r1, #15
 8004e22:	fa01 f303 	lsl.w	r3, r1, r3
 8004e26:	43db      	mvns	r3, r3
 8004e28:	401a      	ands	r2, r3
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	fa93 f3a3 	rbit	r3, r3
 8004e34:	61bb      	str	r3, [r7, #24]
  return result;
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	fab3 f383 	clz	r3, r3
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	6879      	ldr	r1, [r7, #4]
 8004e42:	fa01 f303 	lsl.w	r3, r1, r3
 8004e46:	431a      	orrs	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8004e4c:	bf00      	nop
 8004e4e:	3724      	adds	r7, #36	; 0x24
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b089      	sub	sp, #36	; 0x24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	0a1b      	lsrs	r3, r3, #8
 8004e6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	fa93 f3a3 	rbit	r3, r3
 8004e74:	613b      	str	r3, [r7, #16]
  return result;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	fab3 f383 	clz	r3, r3
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	210f      	movs	r1, #15
 8004e82:	fa01 f303 	lsl.w	r3, r1, r3
 8004e86:	43db      	mvns	r3, r3
 8004e88:	401a      	ands	r2, r3
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	0a1b      	lsrs	r3, r3, #8
 8004e8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	fa93 f3a3 	rbit	r3, r3
 8004e96:	61bb      	str	r3, [r7, #24]
  return result;
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	fab3 f383 	clz	r3, r3
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8004eae:	bf00      	nop
 8004eb0:	3724      	adds	r7, #36	; 0x24
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b086      	sub	sp, #24
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	fa93 f3a3 	rbit	r3, r3
 8004ed0:	60bb      	str	r3, [r7, #8]
  return result;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	fab3 f383 	clz	r3, r3
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004edc:	e040      	b.n	8004f60 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eea:	4013      	ands	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d032      	beq.n	8004f5a <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	6939      	ldr	r1, [r7, #16]
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7ff fed7 	bl	8004cb0 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d003      	beq.n	8004f12 <LL_GPIO_Init+0x58>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d106      	bne.n	8004f20 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	461a      	mov	r2, r3
 8004f18:	6939      	ldr	r1, [r7, #16]
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff ff0f 	bl	8004d3e <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	461a      	mov	r2, r3
 8004f26:	6939      	ldr	r1, [r7, #16]
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7ff ff37 	bl	8004d9c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d111      	bne.n	8004f5a <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	2bff      	cmp	r3, #255	; 0xff
 8004f3a:	d807      	bhi.n	8004f4c <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	461a      	mov	r2, r3
 8004f42:	6939      	ldr	r1, [r7, #16]
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7ff ff58 	bl	8004dfa <LL_GPIO_SetAFPin_0_7>
 8004f4a:	e006      	b.n	8004f5a <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	461a      	mov	r2, r3
 8004f52:	6939      	ldr	r1, [r7, #16]
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f7ff ff7f 	bl	8004e58 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	fa22 f303 	lsr.w	r3, r2, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1b7      	bne.n	8004ede <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d003      	beq.n	8004f7e <LL_GPIO_Init+0xc4>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d107      	bne.n	8004f8e <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	6819      	ldr	r1, [r3, #0]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	461a      	mov	r2, r3
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff fec0 	bl	8004d0e <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f98:	b084      	sub	sp, #16
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
 8004fa2:	f107 001c 	add.w	r0, r7, #28
 8004fa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d122      	bne.n	8004ff6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d105      	bne.n	8004fea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 fa1e 	bl	800542c <USB_CoreReset>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	73fb      	strb	r3, [r7, #15]
 8004ff4:	e01a      	b.n	800502c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 fa12 	bl	800542c <USB_CoreReset>
 8005008:	4603      	mov	r3, r0
 800500a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800500c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800500e:	2b00      	cmp	r3, #0
 8005010:	d106      	bne.n	8005020 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005016:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	639a      	str	r2, [r3, #56]	; 0x38
 800501e:	e005      	b.n	800502c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 800502c:	7bfb      	ldrb	r3, [r7, #15]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005038:	b004      	add	sp, #16
 800503a:	4770      	bx	lr

0800503c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f023 0201 	bic.w	r2, r3, #1
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b082      	sub	sp, #8
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	460b      	mov	r3, r1
 8005068:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005076:	78fb      	ldrb	r3, [r7, #3]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d106      	bne.n	800508a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	60da      	str	r2, [r3, #12]
 8005088:	e00b      	b.n	80050a2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800508a:	78fb      	ldrb	r3, [r7, #3]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d106      	bne.n	800509e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	60da      	str	r2, [r3, #12]
 800509c:	e001      	b.n	80050a2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e003      	b.n	80050aa <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80050a2:	2032      	movs	r0, #50	; 0x32
 80050a4:	f7fb fd2e 	bl	8000b04 <HAL_Delay>

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
	...

080050b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050b4:	b084      	sub	sp, #16
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b086      	sub	sp, #24
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
 80050be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80050c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80050ce:	2300      	movs	r3, #0
 80050d0:	613b      	str	r3, [r7, #16]
 80050d2:	e009      	b.n	80050e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	3340      	adds	r3, #64	; 0x40
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	2200      	movs	r2, #0
 80050e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	3301      	adds	r3, #1
 80050e6:	613b      	str	r3, [r7, #16]
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	2b0e      	cmp	r3, #14
 80050ec:	d9f2      	bls.n	80050d4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80050ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d112      	bne.n	800511a <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	e005      	b.n	8005126 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800512c:	461a      	mov	r2, r3
 800512e:	2300      	movs	r3, #0
 8005130:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005138:	4619      	mov	r1, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005140:	461a      	mov	r2, r3
 8005142:	680b      	ldr	r3, [r1, #0]
 8005144:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005146:	2103      	movs	r1, #3
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f93d 	bl	80053c8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800514e:	2110      	movs	r1, #16
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f8f1 	bl	8005338 <USB_FlushTxFifo>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f90f 	bl	8005384 <USB_FlushRxFifo>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005176:	461a      	mov	r2, r3
 8005178:	2300      	movs	r3, #0
 800517a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005182:	461a      	mov	r2, r3
 8005184:	2300      	movs	r3, #0
 8005186:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800518e:	461a      	mov	r2, r3
 8005190:	2300      	movs	r3, #0
 8005192:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005194:	2300      	movs	r3, #0
 8005196:	613b      	str	r3, [r7, #16]
 8005198:	e043      	b.n	8005222 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051b0:	d118      	bne.n	80051e4 <USB_DevInit+0x130>
    {
      if (i == 0U)
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10a      	bne.n	80051ce <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c4:	461a      	mov	r2, r3
 80051c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051ca:	6013      	str	r3, [r2, #0]
 80051cc:	e013      	b.n	80051f6 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051da:	461a      	mov	r2, r3
 80051dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	e008      	b.n	80051f6 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f0:	461a      	mov	r2, r3
 80051f2:	2300      	movs	r3, #0
 80051f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005202:	461a      	mov	r2, r3
 8005204:	2300      	movs	r3, #0
 8005206:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005214:	461a      	mov	r2, r3
 8005216:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800521a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	3301      	adds	r3, #1
 8005220:	613b      	str	r3, [r7, #16]
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	429a      	cmp	r2, r3
 8005228:	d3b7      	bcc.n	800519a <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800522a:	2300      	movs	r3, #0
 800522c:	613b      	str	r3, [r7, #16]
 800522e:	e043      	b.n	80052b8 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005242:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005246:	d118      	bne.n	800527a <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10a      	bne.n	8005264 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525a:	461a      	mov	r2, r3
 800525c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	e013      	b.n	800528c <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005270:	461a      	mov	r2, r3
 8005272:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005276:	6013      	str	r3, [r2, #0]
 8005278:	e008      	b.n	800528c <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	4413      	add	r3, r2
 8005282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005286:	461a      	mov	r2, r3
 8005288:	2300      	movs	r3, #0
 800528a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4413      	add	r3, r2
 8005294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005298:	461a      	mov	r2, r3
 800529a:	2300      	movs	r3, #0
 800529c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052aa:	461a      	mov	r2, r3
 80052ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	3301      	adds	r3, #1
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d3b7      	bcc.n	8005230 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80052e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	f043 0210 	orr.w	r2, r3, #16
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	4b10      	ldr	r3, [pc, #64]	; (8005334 <USB_DevInit+0x280>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d005      	beq.n	800530c <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	f043 0208 	orr.w	r2, r3, #8
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800530c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800530e:	2b01      	cmp	r3, #1
 8005310:	d107      	bne.n	8005322 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800531a:	f043 0304 	orr.w	r3, r3, #4
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005322:	7dfb      	ldrb	r3, [r7, #23]
}
 8005324:	4618      	mov	r0, r3
 8005326:	3718      	adds	r7, #24
 8005328:	46bd      	mov	sp, r7
 800532a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800532e:	b004      	add	sp, #16
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	803c3800 	.word	0x803c3800

08005338 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005342:	2300      	movs	r3, #0
 8005344:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	019b      	lsls	r3, r3, #6
 800534a:	f043 0220 	orr.w	r2, r3, #32
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	3301      	adds	r3, #1
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4a09      	ldr	r2, [pc, #36]	; (8005380 <USB_FlushTxFifo+0x48>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d901      	bls.n	8005364 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e006      	b.n	8005372 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	f003 0320 	and.w	r3, r3, #32
 800536c:	2b20      	cmp	r3, #32
 800536e:	d0f0      	beq.n	8005352 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	00030d40 	.word	0x00030d40

08005384 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800538c:	2300      	movs	r3, #0
 800538e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2210      	movs	r2, #16
 8005394:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	3301      	adds	r3, #1
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4a09      	ldr	r2, [pc, #36]	; (80053c4 <USB_FlushRxFifo+0x40>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d901      	bls.n	80053a8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e006      	b.n	80053b6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	f003 0310 	and.w	r3, r3, #16
 80053b0:	2b10      	cmp	r3, #16
 80053b2:	d0f0      	beq.n	8005396 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	00030d40 	.word	0x00030d40

080053c8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	460b      	mov	r3, r1
 80053d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	78fb      	ldrb	r3, [r7, #3]
 80053e2:	68f9      	ldr	r1, [r7, #12]
 80053e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053e8:	4313      	orrs	r3, r2
 80053ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b084      	sub	sp, #16
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005414:	f043 0302 	orr.w	r3, r3, #2
 8005418:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800541a:	2003      	movs	r0, #3
 800541c:	f7fb fb72 	bl	8000b04 <HAL_Delay>

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
	...

0800542c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	3301      	adds	r3, #1
 800543c:	60fb      	str	r3, [r7, #12]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4a13      	ldr	r2, [pc, #76]	; (8005490 <USB_CoreReset+0x64>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d901      	bls.n	800544a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e01b      	b.n	8005482 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	2b00      	cmp	r3, #0
 8005450:	daf2      	bge.n	8005438 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f043 0201 	orr.w	r2, r3, #1
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	3301      	adds	r3, #1
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4a09      	ldr	r2, [pc, #36]	; (8005490 <USB_CoreReset+0x64>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d901      	bls.n	8005474 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e006      	b.n	8005482 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b01      	cmp	r3, #1
 800547e:	d0f0      	beq.n	8005462 <USB_CoreReset+0x36>

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	00030d40 	.word	0x00030d40

08005494 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a6:	4a07      	ldr	r2, [pc, #28]	; (80054c4 <LL_InitTick+0x30>)
 80054a8:	3b01      	subs	r3, #1
 80054aa:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80054ac:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <LL_InitTick+0x30>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054b2:	4b04      	ldr	r3, [pc, #16]	; (80054c4 <LL_InitTick+0x30>)
 80054b4:	2205      	movs	r2, #5
 80054b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	e000e010 	.word	0xe000e010

080054c8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80054d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff ffdd 	bl	8005494 <LL_InitTick>
}
 80054da:	bf00      	nop
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
	...

080054e4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80054ec:	4b0f      	ldr	r3, [pc, #60]	; (800552c <LL_mDelay+0x48>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80054f6:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fe:	d00c      	beq.n	800551a <LL_mDelay+0x36>
  {
    tmpDelay++;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	3301      	adds	r3, #1
 8005504:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8005506:	e008      	b.n	800551a <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8005508:	4b08      	ldr	r3, [pc, #32]	; (800552c <LL_mDelay+0x48>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d002      	beq.n	800551a <LL_mDelay+0x36>
    {
      tmpDelay--;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	3b01      	subs	r3, #1
 8005518:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1f3      	bne.n	8005508 <LL_mDelay+0x24>
    }
  }
}
 8005520:	bf00      	nop
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	e000e010 	.word	0xe000e010

08005530 <__NVIC_GetPriorityGrouping>:
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005534:	4b04      	ldr	r3, [pc, #16]	; (8005548 <__NVIC_GetPriorityGrouping+0x18>)
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	0a1b      	lsrs	r3, r3, #8
 800553a:	f003 0307 	and.w	r3, r3, #7
}
 800553e:	4618      	mov	r0, r3
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	e000ed00 	.word	0xe000ed00

0800554c <__NVIC_EnableIRQ>:
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	4603      	mov	r3, r0
 8005554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800555a:	2b00      	cmp	r3, #0
 800555c:	db0b      	blt.n	8005576 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800555e:	79fb      	ldrb	r3, [r7, #7]
 8005560:	f003 021f 	and.w	r2, r3, #31
 8005564:	4907      	ldr	r1, [pc, #28]	; (8005584 <__NVIC_EnableIRQ+0x38>)
 8005566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800556a:	095b      	lsrs	r3, r3, #5
 800556c:	2001      	movs	r0, #1
 800556e:	fa00 f202 	lsl.w	r2, r0, r2
 8005572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	e000e100 	.word	0xe000e100

08005588 <__NVIC_SetPriority>:
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	4603      	mov	r3, r0
 8005590:	6039      	str	r1, [r7, #0]
 8005592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005598:	2b00      	cmp	r3, #0
 800559a:	db0a      	blt.n	80055b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	490c      	ldr	r1, [pc, #48]	; (80055d4 <__NVIC_SetPriority+0x4c>)
 80055a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a6:	0112      	lsls	r2, r2, #4
 80055a8:	b2d2      	uxtb	r2, r2
 80055aa:	440b      	add	r3, r1
 80055ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80055b0:	e00a      	b.n	80055c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	4908      	ldr	r1, [pc, #32]	; (80055d8 <__NVIC_SetPriority+0x50>)
 80055b8:	79fb      	ldrb	r3, [r7, #7]
 80055ba:	f003 030f 	and.w	r3, r3, #15
 80055be:	3b04      	subs	r3, #4
 80055c0:	0112      	lsls	r2, r2, #4
 80055c2:	b2d2      	uxtb	r2, r2
 80055c4:	440b      	add	r3, r1
 80055c6:	761a      	strb	r2, [r3, #24]
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	e000e100 	.word	0xe000e100
 80055d8:	e000ed00 	.word	0xe000ed00

080055dc <NVIC_EncodePriority>:
{
 80055dc:	b480      	push	{r7}
 80055de:	b089      	sub	sp, #36	; 0x24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f003 0307 	and.w	r3, r3, #7
 80055ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	f1c3 0307 	rsb	r3, r3, #7
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	bf28      	it	cs
 80055fa:	2304      	movcs	r3, #4
 80055fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	3304      	adds	r3, #4
 8005602:	2b06      	cmp	r3, #6
 8005604:	d902      	bls.n	800560c <NVIC_EncodePriority+0x30>
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	3b03      	subs	r3, #3
 800560a:	e000      	b.n	800560e <NVIC_EncodePriority+0x32>
 800560c:	2300      	movs	r3, #0
 800560e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005610:	f04f 32ff 	mov.w	r2, #4294967295
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	fa02 f303 	lsl.w	r3, r2, r3
 800561a:	43da      	mvns	r2, r3
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	401a      	ands	r2, r3
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005624:	f04f 31ff 	mov.w	r1, #4294967295
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	fa01 f303 	lsl.w	r3, r1, r3
 800562e:	43d9      	mvns	r1, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005634:	4313      	orrs	r3, r2
}
 8005636:	4618      	mov	r0, r3
 8005638:	3724      	adds	r7, #36	; 0x24
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
	...

08005644 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800564e:	4a13      	ldr	r2, [pc, #76]	; (800569c <LL_SYSCFG_SetEXTISource+0x58>)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	b2db      	uxtb	r3, r3
 8005654:	3302      	adds	r3, #2
 8005656:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	0c1b      	lsrs	r3, r3, #16
 800565e:	43db      	mvns	r3, r3
 8005660:	ea02 0103 	and.w	r1, r2, r3
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	0c1b      	lsrs	r3, r3, #16
 8005668:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	fa93 f3a3 	rbit	r3, r3
 8005670:	60bb      	str	r3, [r7, #8]
  return result;
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	fab3 f383 	clz	r3, r3
 8005678:	b2db      	uxtb	r3, r3
 800567a:	461a      	mov	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	fa03 f202 	lsl.w	r2, r3, r2
 8005682:	4806      	ldr	r0, [pc, #24]	; (800569c <LL_SYSCFG_SetEXTISource+0x58>)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	b2db      	uxtb	r3, r3
 8005688:	430a      	orrs	r2, r1
 800568a:	3302      	adds	r3, #2
 800568c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8005690:	bf00      	nop
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	40010000 	.word	0x40010000

080056a0 <LL_GPIO_SetPinMode>:
{
 80056a0:	b480      	push	{r7}
 80056a2:	b089      	sub	sp, #36	; 0x24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	fa93 f3a3 	rbit	r3, r3
 80056ba:	613b      	str	r3, [r7, #16]
  return result;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	fab3 f383 	clz	r3, r3
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	2103      	movs	r1, #3
 80056c8:	fa01 f303 	lsl.w	r3, r1, r3
 80056cc:	43db      	mvns	r3, r3
 80056ce:	401a      	ands	r2, r3
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	fa93 f3a3 	rbit	r3, r3
 80056da:	61bb      	str	r3, [r7, #24]
  return result;
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	fab3 f383 	clz	r3, r3
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	6879      	ldr	r1, [r7, #4]
 80056e8:	fa01 f303 	lsl.w	r3, r1, r3
 80056ec:	431a      	orrs	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	601a      	str	r2, [r3, #0]
}
 80056f2:	bf00      	nop
 80056f4:	3724      	adds	r7, #36	; 0x24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <LL_GPIO_SetPinPull>:
{
 80056fe:	b480      	push	{r7}
 8005700:	b089      	sub	sp, #36	; 0x24
 8005702:	af00      	add	r7, sp, #0
 8005704:	60f8      	str	r0, [r7, #12]
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	68da      	ldr	r2, [r3, #12]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	fa93 f3a3 	rbit	r3, r3
 8005718:	613b      	str	r3, [r7, #16]
  return result;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	fab3 f383 	clz	r3, r3
 8005720:	b2db      	uxtb	r3, r3
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	2103      	movs	r1, #3
 8005726:	fa01 f303 	lsl.w	r3, r1, r3
 800572a:	43db      	mvns	r3, r3
 800572c:	401a      	ands	r2, r3
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	fa93 f3a3 	rbit	r3, r3
 8005738:	61bb      	str	r3, [r7, #24]
  return result;
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	fab3 f383 	clz	r3, r3
 8005740:	b2db      	uxtb	r3, r3
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	6879      	ldr	r1, [r7, #4]
 8005746:	fa01 f303 	lsl.w	r3, r1, r3
 800574a:	431a      	orrs	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	60da      	str	r2, [r3, #12]
}
 8005750:	bf00      	nop
 8005752:	3724      	adds	r7, #36	; 0x24
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <LL_GPIO_EnablePinAnalogControl>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_EnablePinAnalogControl(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  SET_BIT(GPIOx->ASCR, PinMask);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005772:	bf00      	nop
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800577e:	b480      	push	{r7}
 8005780:	b083      	sub	sp, #12
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
 8005786:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	683a      	ldr	r2, [r7, #0]
 800578c:	619a      	str	r2, [r3, #24]
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ PinMask);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	695a      	ldr	r2, [r3, #20]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	405a      	eors	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	615a      	str	r2, [r3, #20]
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80057e0:	4b08      	ldr	r3, [pc, #32]	; (8005804 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80057e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057e4:	4907      	ldr	r1, [pc, #28]	; (8005804 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80057ec:	4b05      	ldr	r3, [pc, #20]	; (8005804 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80057ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4013      	ands	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80057f6:	68fb      	ldr	r3, [r7, #12]
}
 80057f8:	bf00      	nop
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	40021000 	.word	0x40021000

08005808 <LL_GetUID_Word0>:
{
 8005808:	b480      	push	{r7}
 800580a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID_BASE_ADDRESS)));
 800580c:	4b03      	ldr	r3, [pc, #12]	; (800581c <LL_GetUID_Word0+0x14>)
 800580e:	681b      	ldr	r3, [r3, #0]
}
 8005810:	4618      	mov	r0, r3
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	1fff7590 	.word	0x1fff7590

08005820 <LL_GetUID_Word1>:
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 4U))));
 8005824:	4b03      	ldr	r3, [pc, #12]	; (8005834 <LL_GetUID_Word1+0x14>)
 8005826:	681b      	ldr	r3, [r3, #0]
}
 8005828:	4618      	mov	r0, r3
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	1fff7594 	.word	0x1fff7594

08005838 <LL_GetUID_Word2>:
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 8U))));
 800583c:	4b03      	ldr	r3, [pc, #12]	; (800584c <LL_GetUID_Word2+0x14>)
 800583e:	681b      	ldr	r3, [r3, #0]
}
 8005840:	4618      	mov	r0, r3
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	1fff7598 	.word	0x1fff7598

08005850 <LL_GetFlashSize>:
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)FLASHSIZE_BASE_ADDRESS)) & 0xFFFFU);
 8005854:	4b03      	ldr	r3, [pc, #12]	; (8005864 <LL_GetFlashSize+0x14>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	b29b      	uxth	r3, r3
}
 800585a:	4618      	mov	r0, r3
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	1fff75e0 	.word	0x1fff75e0

08005868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b088      	sub	sp, #32
 800586c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800586e:	f7fb f8d9 	bl	8000a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005872:	f000 f943 	bl	8005afc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005876:	f000 fb4f 	bl	8005f18 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800587a:	f000 f9e3 	bl	8005c44 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800587e:	f000 fa19 	bl	8005cb4 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8005882:	f000 fa57 	bl	8005d34 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8005886:	f000 fa7b 	bl	8005d80 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800588a:	f000 fab7 	bl	8005dfc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800588e:	f000 fae5 	bl	8005e5c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8005892:	f000 fb13 	bl	8005ebc <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  BSP_TSENSOR_Init();
 8005896:	f7fa ffe7 	bl	8000868 <BSP_TSENSOR_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t uid[3];
  printf("\n\n\n");
 800589a:	487c      	ldr	r0, [pc, #496]	; (8005a8c <main+0x224>)
 800589c:	f001 fb4c 	bl	8006f38 <puts>
  printf("***********************************\n");
 80058a0:	487b      	ldr	r0, [pc, #492]	; (8005a90 <main+0x228>)
 80058a2:	f001 fb49 	bl	8006f38 <puts>
  printf("*         UCSD Extension          *\n");
 80058a6:	487b      	ldr	r0, [pc, #492]	; (8005a94 <main+0x22c>)
 80058a8:	f001 fb46 	bl	8006f38 <puts>
  printf("*        ~~~~~~~~~~~~~~~~         *\n");
 80058ac:	487a      	ldr	r0, [pc, #488]	; (8005a98 <main+0x230>)
 80058ae:	f001 fb43 	bl	8006f38 <puts>
  printf("*  Course Title: Embedded C       *\n");
 80058b2:	487a      	ldr	r0, [pc, #488]	; (8005a9c <main+0x234>)
 80058b4:	f001 fb40 	bl	8006f38 <puts>
  printf("* Course Number: ECE-40291        *\n");
 80058b8:	4879      	ldr	r0, [pc, #484]	; (8005aa0 <main+0x238>)
 80058ba:	f001 fb3d 	bl	8006f38 <puts>
  printf("*       Section: 142618           *\n");
 80058be:	4879      	ldr	r0, [pc, #484]	; (8005aa4 <main+0x23c>)
 80058c0:	f001 fb3a 	bl	8006f38 <puts>
  printf("*  Project Name: Final Assignment *\n");
 80058c4:	4878      	ldr	r0, [pc, #480]	; (8005aa8 <main+0x240>)
 80058c6:	f001 fb37 	bl	8006f38 <puts>
  printf("*  Student Name: Chris Isabelle   *\n");
 80058ca:	4878      	ldr	r0, [pc, #480]	; (8005aac <main+0x244>)
 80058cc:	f001 fb34 	bl	8006f38 <puts>
  printf("*           SID: U01136665        *\n");
 80058d0:	4877      	ldr	r0, [pc, #476]	; (8005ab0 <main+0x248>)
 80058d2:	f001 fb31 	bl	8006f38 <puts>
  printf("*          Date: 11/17/2019       *\n");
 80058d6:	4877      	ldr	r0, [pc, #476]	; (8005ab4 <main+0x24c>)
 80058d8:	f001 fb2e 	bl	8006f38 <puts>
  printf("***********************************\n");
 80058dc:	486c      	ldr	r0, [pc, #432]	; (8005a90 <main+0x228>)
 80058de:	f001 fb2b 	bl	8006f38 <puts>

  while (1)
  {
	  switch(demo_count & 0x3)
 80058e2:	4b75      	ldr	r3, [pc, #468]	; (8005ab8 <main+0x250>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	2b03      	cmp	r3, #3
 80058ec:	d8f9      	bhi.n	80058e2 <main+0x7a>
 80058ee:	a201      	add	r2, pc, #4	; (adr r2, 80058f4 <main+0x8c>)
 80058f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f4:	08005905 	.word	0x08005905
 80058f8:	0800597d 	.word	0x0800597d
 80058fc:	08005a0b 	.word	0x08005a0b
 8005900:	08005a5d 	.word	0x08005a5d
	  {
	  	  case(0):
		  	  	  	printf("\n\n\nDemo 1 is running\n");
 8005904:	486d      	ldr	r0, [pc, #436]	; (8005abc <main+0x254>)
 8005906:	f001 fb17 	bl	8006f38 <puts>
	  	            printf("\n~~~~~~~~~~~~~~~~~\n");
 800590a:	486d      	ldr	r0, [pc, #436]	; (8005ac0 <main+0x258>)
 800590c:	f001 fb14 	bl	8006f38 <puts>
					uint32_t flash_size = LL_GetFlashSize();
 8005910:	f7ff ff9e 	bl	8005850 <LL_GetFlashSize>
 8005914:	60f8      	str	r0, [r7, #12]
		  	  	  	printf("flash_size: 0x%lx\n", flash_size);
 8005916:	68f9      	ldr	r1, [r7, #12]
 8005918:	486a      	ldr	r0, [pc, #424]	; (8005ac4 <main+0x25c>)
 800591a:	f001 fa99 	bl	8006e50 <iprintf>

		  	  	  	//read and print unique ID
		  	  	  	uid[0] = LL_GetUID_Word0();
 800591e:	f7ff ff73 	bl	8005808 <LL_GetUID_Word0>
 8005922:	4603      	mov	r3, r0
 8005924:	603b      	str	r3, [r7, #0]
		  	  	  	uid[1] = LL_GetUID_Word1();
 8005926:	f7ff ff7b 	bl	8005820 <LL_GetUID_Word1>
 800592a:	4603      	mov	r3, r0
 800592c:	607b      	str	r3, [r7, #4]
		  	  	  	uid[2] = LL_GetUID_Word2();
 800592e:	f7ff ff83 	bl	8005838 <LL_GetUID_Word2>
 8005932:	4603      	mov	r3, r0
 8005934:	60bb      	str	r3, [r7, #8]
		  	  	  	printf("uid: 0x%08lx 0x%08lx 0x%08lx\n", uid[0], uid[1], uid[2]);
 8005936:	6839      	ldr	r1, [r7, #0]
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	4862      	ldr	r0, [pc, #392]	; (8005ac8 <main+0x260>)
 800593e:	f001 fa87 	bl	8006e50 <iprintf>

		  	  	  	LL_Init1msTick(80000000);
 8005942:	4862      	ldr	r0, [pc, #392]	; (8005acc <main+0x264>)
 8005944:	f7ff fdc0 	bl	80054c8 <LL_Init1msTick>

		  	  	  	while ((demo_count & 0x3) == 0)
 8005948:	e011      	b.n	800596e <main+0x106>
		  	  	  	{
		  	  	  		//toggle LED every 1 second
		  	  	  		LL_GPIO_TogglePin(GPIOB,  LED2_Pin);
 800594a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800594e:	4860      	ldr	r0, [pc, #384]	; (8005ad0 <main+0x268>)
 8005950:	f7ff ff31 	bl	80057b6 <LL_GPIO_TogglePin>
		  	  	  		LL_mDelay(1000);
 8005954:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005958:	f7ff fdc4 	bl	80054e4 <LL_mDelay>
		  	  	  		LL_GPIO_TogglePin(GPIOB,  LED2_Pin);
 800595c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005960:	485b      	ldr	r0, [pc, #364]	; (8005ad0 <main+0x268>)
 8005962:	f7ff ff28 	bl	80057b6 <LL_GPIO_TogglePin>
		  	  	  		LL_mDelay(1000);
 8005966:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800596a:	f7ff fdbb 	bl	80054e4 <LL_mDelay>
		  	  	  	while ((demo_count & 0x3) == 0)
 800596e:	4b52      	ldr	r3, [pc, #328]	; (8005ab8 <main+0x250>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0303 	and.w	r3, r3, #3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d0e7      	beq.n	800594a <main+0xe2>
		  	  	  	}
					break;
 800597a:	e086      	b.n	8005a8a <main+0x222>
	  	  case(1):
		  	  	  	printf("\n\n\nDemo 2 is running\n");
 800597c:	4855      	ldr	r0, [pc, #340]	; (8005ad4 <main+0x26c>)
 800597e:	f001 fadb 	bl	8006f38 <puts>
	  	            printf("\n~~~~~~~~~~~~~~~~~\n");
 8005982:	484f      	ldr	r0, [pc, #316]	; (8005ac0 <main+0x258>)
 8005984:	f001 fad8 	bl	8006f38 <puts>
	  	            //read and print HAL version
	  	            uint32_t version = HAL_GetHalVersion();
 8005988:	f7fb f8de 	bl	8000b48 <HAL_GetHalVersion>
 800598c:	61b8      	str	r0, [r7, #24]
	  	            printf("hal_version: 0x%08lx\n", version);
 800598e:	69b9      	ldr	r1, [r7, #24]
 8005990:	4851      	ldr	r0, [pc, #324]	; (8005ad8 <main+0x270>)
 8005992:	f001 fa5d 	bl	8006e50 <iprintf>

	  	            //read and print device ID
	  	            uint32_t dev_id = HAL_GetDEVID();
 8005996:	f7fb f8ef 	bl	8000b78 <HAL_GetDEVID>
 800599a:	6178      	str	r0, [r7, #20]
	  	            printf("dev_id: 0x%08lx\n", dev_id);
 800599c:	6979      	ldr	r1, [r7, #20]
 800599e:	484f      	ldr	r0, [pc, #316]	; (8005adc <main+0x274>)
 80059a0:	f001 fa56 	bl	8006e50 <iprintf>

	  	            //read and print revision ID
	  	            uint32_t rev_id = HAL_GetREVID();
 80059a4:	f7fb f8da 	bl	8000b5c <HAL_GetREVID>
 80059a8:	6138      	str	r0, [r7, #16]
	  	            printf("rev_id: 0x%08lx\n", rev_id);
 80059aa:	6939      	ldr	r1, [r7, #16]
 80059ac:	484c      	ldr	r0, [pc, #304]	; (8005ae0 <main+0x278>)
 80059ae:	f001 fa4f 	bl	8006e50 <iprintf>

	  	            //read and print unique ID
	  	            uid[0] = HAL_GetUIDw0();
 80059b2:	f7fb f8ef 	bl	8000b94 <HAL_GetUIDw0>
 80059b6:	4603      	mov	r3, r0
 80059b8:	603b      	str	r3, [r7, #0]
	  	            uid[1] = HAL_GetUIDw1();
 80059ba:	f7fb f8f7 	bl	8000bac <HAL_GetUIDw1>
 80059be:	4603      	mov	r3, r0
 80059c0:	607b      	str	r3, [r7, #4]
	  	            uid[2] = HAL_GetUIDw2();
 80059c2:	f7fb f8ff 	bl	8000bc4 <HAL_GetUIDw2>
 80059c6:	4603      	mov	r3, r0
 80059c8:	60bb      	str	r3, [r7, #8]
	  	            printf("uid: 0x%08lx 0x%08lx 0x%08lx\n", uid[0], uid[1], uid[2]);
 80059ca:	6839      	ldr	r1, [r7, #0]
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	483d      	ldr	r0, [pc, #244]	; (8005ac8 <main+0x260>)
 80059d2:	f001 fa3d 	bl	8006e50 <iprintf>

		  	  	  	while ((demo_count & 0x3) == 1)
 80059d6:	e011      	b.n	80059fc <main+0x194>
		  	  	  	{
		  	  	  		//toggle LED every 2 seconds
		  	  	  		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80059d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80059dc:	483c      	ldr	r0, [pc, #240]	; (8005ad0 <main+0x268>)
 80059de:	f7fb fdd9 	bl	8001594 <HAL_GPIO_TogglePin>
		  	  	  		LL_mDelay(2000);
 80059e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80059e6:	f7ff fd7d 	bl	80054e4 <LL_mDelay>
		  	  	  		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80059ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80059ee:	4838      	ldr	r0, [pc, #224]	; (8005ad0 <main+0x268>)
 80059f0:	f7fb fdd0 	bl	8001594 <HAL_GPIO_TogglePin>
		  	  	  		LL_mDelay(2000);
 80059f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80059f8:	f7ff fd74 	bl	80054e4 <LL_mDelay>
		  	  	  	while ((demo_count & 0x3) == 1)
 80059fc:	4b2e      	ldr	r3, [pc, #184]	; (8005ab8 <main+0x250>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0303 	and.w	r3, r3, #3
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d0e7      	beq.n	80059d8 <main+0x170>
		  	  	  	}
					break;
 8005a08:	e03f      	b.n	8005a8a <main+0x222>
	  	  case(2):
					printf("\n\n\nDemo 3 is running\n");
 8005a0a:	4836      	ldr	r0, [pc, #216]	; (8005ae4 <main+0x27c>)
 8005a0c:	f001 fa94 	bl	8006f38 <puts>
			  	    printf("\n~~~~~~~~~~~~~~~~~\n");
 8005a10:	482b      	ldr	r0, [pc, #172]	; (8005ac0 <main+0x258>)
 8005a12:	f001 fa91 	bl	8006f38 <puts>
		  	  	  	while ((demo_count & 0x3) == 2)
 8005a16:	e01a      	b.n	8005a4e <main+0x1e6>
		  	  	  	{
		  	  	  		//toggle LED every 3 seconds
		  	  	  		float temperature = BSP_TSENSOR_ReadTemp();
 8005a18:	f7fa ff42 	bl	80008a0 <BSP_TSENSOR_ReadTemp>
 8005a1c:	ed87 0a07 	vstr	s0, [r7, #28]
		  	  	  		printf("temperature: %i\n", (int)temperature);
 8005a20:	edd7 7a07 	vldr	s15, [r7, #28]
 8005a24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a28:	ee17 1a90 	vmov	r1, s15
 8005a2c:	482e      	ldr	r0, [pc, #184]	; (8005ae8 <main+0x280>)
 8005a2e:	f001 fa0f 	bl	8006e50 <iprintf>
		  	  	  		BSP_LED_On(LED_GREEN);
 8005a32:	2000      	movs	r0, #0
 8005a34:	f7fa fd9c 	bl	8000570 <BSP_LED_On>
		  	  	  		LL_mDelay(3000);
 8005a38:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005a3c:	f7ff fd52 	bl	80054e4 <LL_mDelay>
		  	  	  		BSP_LED_Off(LED_GREEN);
 8005a40:	2000      	movs	r0, #0
 8005a42:	f7fa fdab 	bl	800059c <BSP_LED_Off>
		  	  	  		LL_mDelay(3000);
 8005a46:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005a4a:	f7ff fd4b 	bl	80054e4 <LL_mDelay>
		  	  	  	while ((demo_count & 0x3) == 2)
 8005a4e:	4b1a      	ldr	r3, [pc, #104]	; (8005ab8 <main+0x250>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0303 	and.w	r3, r3, #3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d0de      	beq.n	8005a18 <main+0x1b0>
		  	  	  	}
					break;
 8005a5a:	e016      	b.n	8005a8a <main+0x222>
	  	  case(3):
					printf("\n\n\nDemo 4 is running\n");
 8005a5c:	4823      	ldr	r0, [pc, #140]	; (8005aec <main+0x284>)
 8005a5e:	f001 fa6b 	bl	8006f38 <puts>
			  	    printf("\n~~~~~~~~~~~~~~~~~\n");
 8005a62:	4817      	ldr	r0, [pc, #92]	; (8005ac0 <main+0x258>)
 8005a64:	f001 fa68 	bl	8006f38 <puts>
					printf("Demo 4 is a stand alone application.\n");
 8005a68:	4821      	ldr	r0, [pc, #132]	; (8005af0 <main+0x288>)
 8005a6a:	f001 fa65 	bl	8006f38 <puts>
	  	  	  	  	printf("Run FRAM Test Application.\n");
 8005a6e:	4821      	ldr	r0, [pc, #132]	; (8005af4 <main+0x28c>)
 8005a70:	f001 fa62 	bl	8006f38 <puts>
	  	  	  	  	printf("or Press the Blue <USER> button to restart the Demo Loop.\n");
 8005a74:	4820      	ldr	r0, [pc, #128]	; (8005af8 <main+0x290>)
 8005a76:	f001 fa5f 	bl	8006f38 <puts>
		  	  	  	while ((demo_count & 0x3) == 3);
 8005a7a:	bf00      	nop
 8005a7c:	4b0e      	ldr	r3, [pc, #56]	; (8005ab8 <main+0x250>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0303 	and.w	r3, r3, #3
 8005a84:	2b03      	cmp	r3, #3
 8005a86:	d0f9      	beq.n	8005a7c <main+0x214>
	  	  	  	    break;
 8005a88:	bf00      	nop
	  switch(demo_count & 0x3)
 8005a8a:	e72a      	b.n	80058e2 <main+0x7a>
 8005a8c:	08007cf8 	.word	0x08007cf8
 8005a90:	08007cfc 	.word	0x08007cfc
 8005a94:	08007d20 	.word	0x08007d20
 8005a98:	08007d44 	.word	0x08007d44
 8005a9c:	08007d68 	.word	0x08007d68
 8005aa0:	08007d8c 	.word	0x08007d8c
 8005aa4:	08007db0 	.word	0x08007db0
 8005aa8:	08007dd4 	.word	0x08007dd4
 8005aac:	08007df8 	.word	0x08007df8
 8005ab0:	08007e1c 	.word	0x08007e1c
 8005ab4:	08007e40 	.word	0x08007e40
 8005ab8:	200000c8 	.word	0x200000c8
 8005abc:	08007e64 	.word	0x08007e64
 8005ac0:	08007e7c 	.word	0x08007e7c
 8005ac4:	08007e90 	.word	0x08007e90
 8005ac8:	08007ea4 	.word	0x08007ea4
 8005acc:	04c4b400 	.word	0x04c4b400
 8005ad0:	48000400 	.word	0x48000400
 8005ad4:	08007ec4 	.word	0x08007ec4
 8005ad8:	08007edc 	.word	0x08007edc
 8005adc:	08007ef4 	.word	0x08007ef4
 8005ae0:	08007f08 	.word	0x08007f08
 8005ae4:	08007f1c 	.word	0x08007f1c
 8005ae8:	08007f34 	.word	0x08007f34
 8005aec:	08007f48 	.word	0x08007f48
 8005af0:	08007f60 	.word	0x08007f60
 8005af4:	08007f88 	.word	0x08007f88
 8005af8:	08007fa4 	.word	0x08007fa4

08005afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b0b8      	sub	sp, #224	; 0xe0
 8005b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005b02:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005b06:	2244      	movs	r2, #68	; 0x44
 8005b08:	2100      	movs	r1, #0
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f001 f998 	bl	8006e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005b10:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005b14:	2200      	movs	r2, #0
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	605a      	str	r2, [r3, #4]
 8005b1a:	609a      	str	r2, [r3, #8]
 8005b1c:	60da      	str	r2, [r3, #12]
 8005b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005b20:	463b      	mov	r3, r7
 8005b22:	2288      	movs	r2, #136	; 0x88
 8005b24:	2100      	movs	r1, #0
 8005b26:	4618      	mov	r0, r3
 8005b28:	f001 f98a 	bl	8006e40 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8005b2c:	f7fc fc34 	bl	8002398 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8005b30:	4b42      	ldr	r3, [pc, #264]	; (8005c3c <SystemClock_Config+0x140>)
 8005b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b36:	4a41      	ldr	r2, [pc, #260]	; (8005c3c <SystemClock_Config+0x140>)
 8005b38:	f023 0318 	bic.w	r3, r3, #24
 8005b3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8005b40:	2314      	movs	r3, #20
 8005b42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005b46:	2301      	movs	r3, #1
 8005b48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8005b52:	2300      	movs	r3, #0
 8005b54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8005b58:	2360      	movs	r3, #96	; 0x60
 8005b5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005b5e:	2302      	movs	r3, #2
 8005b60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8005b64:	2301      	movs	r3, #1
 8005b66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8005b70:	2328      	movs	r3, #40	; 0x28
 8005b72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005b76:	2307      	movs	r3, #7
 8005b78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005b82:	2302      	movs	r3, #2
 8005b84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7fc fd4f 	bl	8002630 <HAL_RCC_OscConfig>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8005b98:	f000 fd00 	bl	800659c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005b9c:	230f      	movs	r3, #15
 8005b9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005bba:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005bbe:	2104      	movs	r1, #4
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7fd f8e5 	bl	8002d90 <HAL_RCC_ClockConfig>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d001      	beq.n	8005bd0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8005bcc:	f000 fce6 	bl	800659c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8005bd0:	4b1b      	ldr	r3, [pc, #108]	; (8005c40 <SystemClock_Config+0x144>)
 8005bd2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8005be0:	2300      	movs	r3, #0
 8005be2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8005be6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005bea:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8005bec:	2301      	movs	r3, #1
 8005bee:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8005bf4:	2318      	movs	r3, #24
 8005bf6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8005bf8:	2307      	movs	r3, #7
 8005bfa:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8005c00:	2302      	movs	r3, #2
 8005c02:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8005c04:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005c08:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c0a:	463b      	mov	r3, r7
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7fd fac3 	bl	8003198 <HAL_RCCEx_PeriphCLKConfig>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <SystemClock_Config+0x120>
  {
    Error_Handler();
 8005c18:	f000 fcc0 	bl	800659c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005c1c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005c20:	f7fc fbd8 	bl	80023d4 <HAL_PWREx_ControlVoltageScaling>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <SystemClock_Config+0x132>
  {
    Error_Handler();
 8005c2a:	f000 fcb7 	bl	800659c <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8005c2e:	f7fd fd99 	bl	8003764 <HAL_RCCEx_EnableMSIPLLMode>
}
 8005c32:	bf00      	nop
 8005c34:	37e0      	adds	r7, #224	; 0xe0
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	40021000 	.word	0x40021000
 8005c40:	00012085 	.word	0x00012085

08005c44 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8005c48:	4b18      	ldr	r3, [pc, #96]	; (8005cac <MX_DFSDM1_Init+0x68>)
 8005c4a:	4a19      	ldr	r2, [pc, #100]	; (8005cb0 <MX_DFSDM1_Init+0x6c>)
 8005c4c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8005c4e:	4b17      	ldr	r3, [pc, #92]	; (8005cac <MX_DFSDM1_Init+0x68>)
 8005c50:	2201      	movs	r2, #1
 8005c52:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8005c54:	4b15      	ldr	r3, [pc, #84]	; (8005cac <MX_DFSDM1_Init+0x68>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8005c5a:	4b14      	ldr	r3, [pc, #80]	; (8005cac <MX_DFSDM1_Init+0x68>)
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8005c60:	4b12      	ldr	r3, [pc, #72]	; (8005cac <MX_DFSDM1_Init+0x68>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8005c66:	4b11      	ldr	r3, [pc, #68]	; (8005cac <MX_DFSDM1_Init+0x68>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8005c6c:	4b0f      	ldr	r3, [pc, #60]	; (8005cac <MX_DFSDM1_Init+0x68>)
 8005c6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c72:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8005c74:	4b0d      	ldr	r3, [pc, #52]	; (8005cac <MX_DFSDM1_Init+0x68>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8005c7a:	4b0c      	ldr	r3, [pc, #48]	; (8005cac <MX_DFSDM1_Init+0x68>)
 8005c7c:	2204      	movs	r2, #4
 8005c7e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8005c80:	4b0a      	ldr	r3, [pc, #40]	; (8005cac <MX_DFSDM1_Init+0x68>)
 8005c82:	2200      	movs	r2, #0
 8005c84:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8005c86:	4b09      	ldr	r3, [pc, #36]	; (8005cac <MX_DFSDM1_Init+0x68>)
 8005c88:	2201      	movs	r2, #1
 8005c8a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8005c8c:	4b07      	ldr	r3, [pc, #28]	; (8005cac <MX_DFSDM1_Init+0x68>)
 8005c8e:	2200      	movs	r2, #0
 8005c90:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8005c92:	4b06      	ldr	r3, [pc, #24]	; (8005cac <MX_DFSDM1_Init+0x68>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8005c98:	4804      	ldr	r0, [pc, #16]	; (8005cac <MX_DFSDM1_Init+0x68>)
 8005c9a:	f7fb f8b1 	bl	8000e00 <HAL_DFSDM_ChannelInit>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8005ca4:	f000 fc7a 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8005ca8:	bf00      	nop
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	200001ac 	.word	0x200001ac
 8005cb0:	40016020 	.word	0x40016020

08005cb4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005cb8:	4b1b      	ldr	r3, [pc, #108]	; (8005d28 <MX_I2C2_Init+0x74>)
 8005cba:	4a1c      	ldr	r2, [pc, #112]	; (8005d2c <MX_I2C2_Init+0x78>)
 8005cbc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8005cbe:	4b1a      	ldr	r3, [pc, #104]	; (8005d28 <MX_I2C2_Init+0x74>)
 8005cc0:	4a1b      	ldr	r2, [pc, #108]	; (8005d30 <MX_I2C2_Init+0x7c>)
 8005cc2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005cc4:	4b18      	ldr	r3, [pc, #96]	; (8005d28 <MX_I2C2_Init+0x74>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005cca:	4b17      	ldr	r3, [pc, #92]	; (8005d28 <MX_I2C2_Init+0x74>)
 8005ccc:	2201      	movs	r2, #1
 8005cce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005cd0:	4b15      	ldr	r3, [pc, #84]	; (8005d28 <MX_I2C2_Init+0x74>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8005cd6:	4b14      	ldr	r3, [pc, #80]	; (8005d28 <MX_I2C2_Init+0x74>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005cdc:	4b12      	ldr	r3, [pc, #72]	; (8005d28 <MX_I2C2_Init+0x74>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005ce2:	4b11      	ldr	r3, [pc, #68]	; (8005d28 <MX_I2C2_Init+0x74>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005ce8:	4b0f      	ldr	r3, [pc, #60]	; (8005d28 <MX_I2C2_Init+0x74>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005cee:	480e      	ldr	r0, [pc, #56]	; (8005d28 <MX_I2C2_Init+0x74>)
 8005cf0:	f7fb fc69 	bl	80015c6 <HAL_I2C_Init>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8005cfa:	f000 fc4f 	bl	800659c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005cfe:	2100      	movs	r1, #0
 8005d00:	4809      	ldr	r0, [pc, #36]	; (8005d28 <MX_I2C2_Init+0x74>)
 8005d02:	f7fc f969 	bl	8001fd8 <HAL_I2CEx_ConfigAnalogFilter>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d001      	beq.n	8005d10 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8005d0c:	f000 fc46 	bl	800659c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005d10:	2100      	movs	r1, #0
 8005d12:	4805      	ldr	r0, [pc, #20]	; (8005d28 <MX_I2C2_Init+0x74>)
 8005d14:	f7fc f9ab 	bl	800206e <HAL_I2CEx_ConfigDigitalFilter>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8005d1e:	f000 fc3d 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005d22:	bf00      	nop
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	2000066c 	.word	0x2000066c
 8005d2c:	40005800 	.word	0x40005800
 8005d30:	10909cec 	.word	0x10909cec

08005d34 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8005d38:	4b0f      	ldr	r3, [pc, #60]	; (8005d78 <MX_QUADSPI_Init+0x44>)
 8005d3a:	4a10      	ldr	r2, [pc, #64]	; (8005d7c <MX_QUADSPI_Init+0x48>)
 8005d3c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8005d3e:	4b0e      	ldr	r3, [pc, #56]	; (8005d78 <MX_QUADSPI_Init+0x44>)
 8005d40:	22ff      	movs	r2, #255	; 0xff
 8005d42:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8005d44:	4b0c      	ldr	r3, [pc, #48]	; (8005d78 <MX_QUADSPI_Init+0x44>)
 8005d46:	2201      	movs	r2, #1
 8005d48:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8005d4a:	4b0b      	ldr	r3, [pc, #44]	; (8005d78 <MX_QUADSPI_Init+0x44>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8005d50:	4b09      	ldr	r3, [pc, #36]	; (8005d78 <MX_QUADSPI_Init+0x44>)
 8005d52:	2201      	movs	r2, #1
 8005d54:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8005d56:	4b08      	ldr	r3, [pc, #32]	; (8005d78 <MX_QUADSPI_Init+0x44>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8005d5c:	4b06      	ldr	r3, [pc, #24]	; (8005d78 <MX_QUADSPI_Init+0x44>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8005d62:	4805      	ldr	r0, [pc, #20]	; (8005d78 <MX_QUADSPI_Init+0x44>)
 8005d64:	f7fc fb9c 	bl	80024a0 <HAL_QSPI_Init>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8005d6e:	f000 fc15 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8005d72:	bf00      	nop
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	2000079c 	.word	0x2000079c
 8005d7c:	a0001000 	.word	0xa0001000

08005d80 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8005d84:	4b1b      	ldr	r3, [pc, #108]	; (8005df4 <MX_SPI3_Init+0x74>)
 8005d86:	4a1c      	ldr	r2, [pc, #112]	; (8005df8 <MX_SPI3_Init+0x78>)
 8005d88:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005d8a:	4b1a      	ldr	r3, [pc, #104]	; (8005df4 <MX_SPI3_Init+0x74>)
 8005d8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005d90:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005d92:	4b18      	ldr	r3, [pc, #96]	; (8005df4 <MX_SPI3_Init+0x74>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8005d98:	4b16      	ldr	r3, [pc, #88]	; (8005df4 <MX_SPI3_Init+0x74>)
 8005d9a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005d9e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005da0:	4b14      	ldr	r3, [pc, #80]	; (8005df4 <MX_SPI3_Init+0x74>)
 8005da2:	2200      	movs	r2, #0
 8005da4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005da6:	4b13      	ldr	r3, [pc, #76]	; (8005df4 <MX_SPI3_Init+0x74>)
 8005da8:	2200      	movs	r2, #0
 8005daa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005dac:	4b11      	ldr	r3, [pc, #68]	; (8005df4 <MX_SPI3_Init+0x74>)
 8005dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005db2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005db4:	4b0f      	ldr	r3, [pc, #60]	; (8005df4 <MX_SPI3_Init+0x74>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005dba:	4b0e      	ldr	r3, [pc, #56]	; (8005df4 <MX_SPI3_Init+0x74>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005dc0:	4b0c      	ldr	r3, [pc, #48]	; (8005df4 <MX_SPI3_Init+0x74>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dc6:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <MX_SPI3_Init+0x74>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8005dcc:	4b09      	ldr	r3, [pc, #36]	; (8005df4 <MX_SPI3_Init+0x74>)
 8005dce:	2207      	movs	r2, #7
 8005dd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005dd2:	4b08      	ldr	r3, [pc, #32]	; (8005df4 <MX_SPI3_Init+0x74>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005dd8:	4b06      	ldr	r3, [pc, #24]	; (8005df4 <MX_SPI3_Init+0x74>)
 8005dda:	2208      	movs	r2, #8
 8005ddc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005dde:	4805      	ldr	r0, [pc, #20]	; (8005df4 <MX_SPI3_Init+0x74>)
 8005de0:	f7fd fe9a 	bl	8003b18 <HAL_SPI_Init>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8005dea:	f000 fbd7 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005dee:	bf00      	nop
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	200006b8 	.word	0x200006b8
 8005df8:	40003c00 	.word	0x40003c00

08005dfc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005e00:	4b14      	ldr	r3, [pc, #80]	; (8005e54 <MX_USART1_UART_Init+0x58>)
 8005e02:	4a15      	ldr	r2, [pc, #84]	; (8005e58 <MX_USART1_UART_Init+0x5c>)
 8005e04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005e06:	4b13      	ldr	r3, [pc, #76]	; (8005e54 <MX_USART1_UART_Init+0x58>)
 8005e08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005e0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005e0e:	4b11      	ldr	r3, [pc, #68]	; (8005e54 <MX_USART1_UART_Init+0x58>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005e14:	4b0f      	ldr	r3, [pc, #60]	; (8005e54 <MX_USART1_UART_Init+0x58>)
 8005e16:	2200      	movs	r2, #0
 8005e18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005e1a:	4b0e      	ldr	r3, [pc, #56]	; (8005e54 <MX_USART1_UART_Init+0x58>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005e20:	4b0c      	ldr	r3, [pc, #48]	; (8005e54 <MX_USART1_UART_Init+0x58>)
 8005e22:	220c      	movs	r2, #12
 8005e24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e26:	4b0b      	ldr	r3, [pc, #44]	; (8005e54 <MX_USART1_UART_Init+0x58>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e2c:	4b09      	ldr	r3, [pc, #36]	; (8005e54 <MX_USART1_UART_Init+0x58>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005e32:	4b08      	ldr	r3, [pc, #32]	; (8005e54 <MX_USART1_UART_Init+0x58>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005e38:	4b06      	ldr	r3, [pc, #24]	; (8005e54 <MX_USART1_UART_Init+0x58>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005e3e:	4805      	ldr	r0, [pc, #20]	; (8005e54 <MX_USART1_UART_Init+0x58>)
 8005e40:	f7fd fef4 	bl	8003c2c <HAL_UART_Init>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d001      	beq.n	8005e4e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005e4a:	f000 fba7 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005e4e:	bf00      	nop
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	2000071c 	.word	0x2000071c
 8005e58:	40013800 	.word	0x40013800

08005e5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005e60:	4b14      	ldr	r3, [pc, #80]	; (8005eb4 <MX_USART3_UART_Init+0x58>)
 8005e62:	4a15      	ldr	r2, [pc, #84]	; (8005eb8 <MX_USART3_UART_Init+0x5c>)
 8005e64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005e66:	4b13      	ldr	r3, [pc, #76]	; (8005eb4 <MX_USART3_UART_Init+0x58>)
 8005e68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005e6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005e6e:	4b11      	ldr	r3, [pc, #68]	; (8005eb4 <MX_USART3_UART_Init+0x58>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005e74:	4b0f      	ldr	r3, [pc, #60]	; (8005eb4 <MX_USART3_UART_Init+0x58>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005e7a:	4b0e      	ldr	r3, [pc, #56]	; (8005eb4 <MX_USART3_UART_Init+0x58>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005e80:	4b0c      	ldr	r3, [pc, #48]	; (8005eb4 <MX_USART3_UART_Init+0x58>)
 8005e82:	220c      	movs	r2, #12
 8005e84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e86:	4b0b      	ldr	r3, [pc, #44]	; (8005eb4 <MX_USART3_UART_Init+0x58>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e8c:	4b09      	ldr	r3, [pc, #36]	; (8005eb4 <MX_USART3_UART_Init+0x58>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005e92:	4b08      	ldr	r3, [pc, #32]	; (8005eb4 <MX_USART3_UART_Init+0x58>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005e98:	4b06      	ldr	r3, [pc, #24]	; (8005eb4 <MX_USART3_UART_Init+0x58>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005e9e:	4805      	ldr	r0, [pc, #20]	; (8005eb4 <MX_USART3_UART_Init+0x58>)
 8005ea0:	f7fd fec4 	bl	8003c2c <HAL_UART_Init>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8005eaa:	f000 fb77 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005eae:	bf00      	nop
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	200001e4 	.word	0x200001e4
 8005eb8:	40004800 	.word	0x40004800

08005ebc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005ec0:	4b14      	ldr	r3, [pc, #80]	; (8005f14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005ec2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005ec6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8005ec8:	4b12      	ldr	r3, [pc, #72]	; (8005f14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005eca:	2206      	movs	r2, #6
 8005ecc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005ece:	4b11      	ldr	r3, [pc, #68]	; (8005f14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005ed4:	4b0f      	ldr	r3, [pc, #60]	; (8005f14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005eda:	4b0e      	ldr	r3, [pc, #56]	; (8005f14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005ee0:	4b0c      	ldr	r3, [pc, #48]	; (8005f14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005ee6:	4b0b      	ldr	r3, [pc, #44]	; (8005f14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8005eec:	4b09      	ldr	r3, [pc, #36]	; (8005f14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005ef2:	4b08      	ldr	r3, [pc, #32]	; (8005f14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8005ef8:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005efe:	4805      	ldr	r0, [pc, #20]	; (8005f14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005f00:	f7fc f901 	bl	8002106 <HAL_PCD_Init>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8005f0a:	f000 fb47 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8005f0e:	bf00      	nop
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	20000264 	.word	0x20000264

08005f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b08a      	sub	sp, #40	; 0x28
 8005f1c:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8005f1e:	f107 031c 	add.w	r3, r7, #28
 8005f22:	2200      	movs	r2, #0
 8005f24:	601a      	str	r2, [r3, #0]
 8005f26:	605a      	str	r2, [r3, #4]
 8005f28:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f2a:	1d3b      	adds	r3, r7, #4
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	605a      	str	r2, [r3, #4]
 8005f32:	609a      	str	r2, [r3, #8]
 8005f34:	60da      	str	r2, [r3, #12]
 8005f36:	611a      	str	r2, [r3, #16]
 8005f38:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 8005f3a:	2010      	movs	r0, #16
 8005f3c:	f7ff fc4c 	bl	80057d8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8005f40:	2004      	movs	r0, #4
 8005f42:	f7ff fc49 	bl	80057d8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8005f46:	2001      	movs	r0, #1
 8005f48:	f7ff fc46 	bl	80057d8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8005f4c:	2002      	movs	r0, #2
 8005f4e:	f7ff fc43 	bl	80057d8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8005f52:	2008      	movs	r0, #8
 8005f54:	f7ff fc40 	bl	80057d8 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin);
 8005f58:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005f5c:	48cb      	ldr	r0, [pc, #812]	; (800628c <MX_GPIO_Init+0x374>)
 8005f5e:	f7ff fc1c 	bl	800579a <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin);
 8005f62:	f248 1104 	movw	r1, #33028	; 0x8104
 8005f66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f6a:	f7ff fc16 	bl	800579a <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8005f6e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8005f72:	48c7      	ldr	r0, [pc, #796]	; (8006290 <MX_GPIO_Init+0x378>)
 8005f74:	f7ff fc11 	bl	800579a <LL_GPIO_ResetOutputPin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin);
 8005f78:	f241 0181 	movw	r1, #4225	; 0x1081
 8005f7c:	48c5      	ldr	r0, [pc, #788]	; (8006294 <MX_GPIO_Init+0x37c>)
 8005f7e:	f7ff fc0c 	bl	800579a <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin);
 8005f82:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005f86:	48c4      	ldr	r0, [pc, #784]	; (8006298 <MX_GPIO_Init+0x380>)
 8005f88:	f7ff fc07 	bl	800579a <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin);
 8005f8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f90:	48c0      	ldr	r0, [pc, #768]	; (8006294 <MX_GPIO_Init+0x37c>)
 8005f92:	f7ff fbf4 	bl	800577e <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin);
 8005f96:	2120      	movs	r1, #32
 8005f98:	48bd      	ldr	r0, [pc, #756]	; (8006290 <MX_GPIO_Init+0x378>)
 8005f9a:	f7ff fbf0 	bl	800577e <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin);
 8005f9e:	2101      	movs	r1, #1
 8005fa0:	48ba      	ldr	r0, [pc, #744]	; (800628c <MX_GPIO_Init+0x374>)
 8005fa2:	f7ff fbec 	bl	800577e <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8005fa6:	f240 1315 	movw	r3, #277	; 0x115
 8005faa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005fac:	2301      	movs	r3, #1
 8005fae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005fbc:	1d3b      	adds	r3, r7, #4
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	48b2      	ldr	r0, [pc, #712]	; (800628c <MX_GPIO_Init+0x374>)
 8005fc2:	f7fe ff7a 	bl	8004eba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 8005fc6:	233f      	movs	r3, #63	; 0x3f
 8005fc8:	607b      	str	r3, [r7, #4]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005fd2:	1d3b      	adds	r3, r7, #4
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	48b0      	ldr	r0, [pc, #704]	; (8006298 <MX_GPIO_Init+0x380>)
 8005fd8:	f7fe ff6f 	bl	8004eba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005fec:	2300      	movs	r3, #0
 8005fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8005ff0:	2308      	movs	r3, #8
 8005ff2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ff4:	1d3b      	adds	r3, r7, #4
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ffc:	f7fe ff5d 	bl	8004eba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8006000:	f248 1304 	movw	r3, #33028	; 0x8104
 8006004:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006006:	2301      	movs	r3, #1
 8006008:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800600a:	2300      	movs	r3, #0
 800600c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800600e:	2300      	movs	r3, #0
 8006010:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006012:	2300      	movs	r3, #0
 8006014:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006016:	1d3b      	adds	r3, r7, #4
 8006018:	4619      	mov	r1, r3
 800601a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800601e:	f7fe ff4c 	bl	8004eba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8006022:	2308      	movs	r3, #8
 8006024:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006026:	2302      	movs	r3, #2
 8006028:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800602a:	2300      	movs	r3, #0
 800602c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800602e:	2300      	movs	r3, #0
 8006030:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006032:	2300      	movs	r3, #0
 8006034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8006036:	2301      	movs	r3, #1
 8006038:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800603a:	1d3b      	adds	r3, r7, #4
 800603c:	4619      	mov	r1, r3
 800603e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006042:	f7fe ff3a 	bl	8004eba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8006046:	2310      	movs	r3, #16
 8006048:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800604a:	2303      	movs	r3, #3
 800604c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800604e:	2300      	movs	r3, #0
 8006050:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8006052:	1d3b      	adds	r3, r7, #4
 8006054:	4619      	mov	r1, r3
 8006056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800605a:	f7fe ff2e 	bl	8004eba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800605e:	2302      	movs	r3, #2
 8006060:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8006062:	2303      	movs	r3, #3
 8006064:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006066:	2300      	movs	r3, #0
 8006068:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800606a:	1d3b      	adds	r3, r7, #4
 800606c:	4619      	mov	r1, r3
 800606e:	4888      	ldr	r0, [pc, #544]	; (8006290 <MX_GPIO_Init+0x378>)
 8006070:	f7fe ff23 	bl	8004eba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8006074:	f24f 0334 	movw	r3, #61492	; 0xf034
 8006078:	607b      	str	r3, [r7, #4]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800607a:	2301      	movs	r3, #1
 800607c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800607e:	2300      	movs	r3, #0
 8006080:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006082:	2300      	movs	r3, #0
 8006084:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006086:	2300      	movs	r3, #0
 8006088:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800608a:	1d3b      	adds	r3, r7, #4
 800608c:	4619      	mov	r1, r3
 800608e:	4880      	ldr	r0, [pc, #512]	; (8006290 <MX_GPIO_Init+0x378>)
 8006090:	f7fe ff13 	bl	8004eba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8006094:	f243 0381 	movw	r3, #12417	; 0x3081
 8006098:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800609a:	2301      	movs	r3, #1
 800609c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800609e:	2300      	movs	r3, #0
 80060a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80060a2:	2300      	movs	r3, #0
 80060a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80060a6:	2300      	movs	r3, #0
 80060a8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80060aa:	1d3b      	adds	r3, r7, #4
 80060ac:	4619      	mov	r1, r3
 80060ae:	4879      	ldr	r0, [pc, #484]	; (8006294 <MX_GPIO_Init+0x37c>)
 80060b0:	f7fe ff03 	bl	8004eba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80060b4:	f44f 7310 	mov.w	r3, #576	; 0x240
 80060b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80060ba:	2301      	movs	r3, #1
 80060bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80060be:	2300      	movs	r3, #0
 80060c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80060c2:	2300      	movs	r3, #0
 80060c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80060c6:	2300      	movs	r3, #0
 80060c8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060ca:	1d3b      	adds	r3, r7, #4
 80060cc:	4619      	mov	r1, r3
 80060ce:	4872      	ldr	r0, [pc, #456]	; (8006298 <MX_GPIO_Init+0x380>)
 80060d0:	f7fe fef3 	bl	8004eba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80060d4:	2302      	movs	r3, #2
 80060d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80060d8:	2302      	movs	r3, #2
 80060da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80060dc:	2303      	movs	r3, #3
 80060de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80060e0:	2300      	movs	r3, #0
 80060e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80060e4:	2300      	movs	r3, #0
 80060e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80060e8:	2305      	movs	r3, #5
 80060ea:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80060ec:	1d3b      	adds	r3, r7, #4
 80060ee:	4619      	mov	r1, r3
 80060f0:	4868      	ldr	r0, [pc, #416]	; (8006294 <MX_GPIO_Init+0x37c>)
 80060f2:	f7fe fee2 	bl	8004eba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80060f6:	2378      	movs	r3, #120	; 0x78
 80060f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80060fa:	2302      	movs	r3, #2
 80060fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80060fe:	2303      	movs	r3, #3
 8006100:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006102:	2300      	movs	r3, #0
 8006104:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006106:	2300      	movs	r3, #0
 8006108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800610a:	2307      	movs	r3, #7
 800610c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800610e:	1d3b      	adds	r3, r7, #4
 8006110:	4619      	mov	r1, r3
 8006112:	4860      	ldr	r0, [pc, #384]	; (8006294 <MX_GPIO_Init+0x37c>)
 8006114:	f7fe fed1 	bl	8004eba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8006118:	f44f 7340 	mov.w	r3, #768	; 0x300
 800611c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800611e:	2302      	movs	r3, #2
 8006120:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006122:	2303      	movs	r3, #3
 8006124:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8006126:	2301      	movs	r3, #1
 8006128:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800612a:	2301      	movs	r3, #1
 800612c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800612e:	2304      	movs	r3, #4
 8006130:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006132:	1d3b      	adds	r3, r7, #4
 8006134:	4619      	mov	r1, r3
 8006136:	4856      	ldr	r0, [pc, #344]	; (8006290 <MX_GPIO_Init+0x378>)
 8006138:	f7fe febf 	bl	8004eba <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE3);
 800613c:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8006140:	2004      	movs	r0, #4
 8006142:	f7ff fa7f 	bl	8005644 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE5);
 8006146:	4955      	ldr	r1, [pc, #340]	; (800629c <MX_GPIO_Init+0x384>)
 8006148:	2004      	movs	r0, #4
 800614a:	f7ff fa7b 	bl	8005644 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE6);
 800614e:	4954      	ldr	r1, [pc, #336]	; (80062a0 <MX_GPIO_Init+0x388>)
 8006150:	2004      	movs	r0, #4
 8006152:	f7ff fa77 	bl	8005644 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8006156:	4953      	ldr	r1, [pc, #332]	; (80062a4 <MX_GPIO_Init+0x38c>)
 8006158:	2002      	movs	r0, #2
 800615a:	f7ff fa73 	bl	8005644 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE0);
 800615e:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8006162:	2001      	movs	r0, #1
 8006164:	f7ff fa6e 	bl	8005644 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE10);
 8006168:	494f      	ldr	r1, [pc, #316]	; (80062a8 <MX_GPIO_Init+0x390>)
 800616a:	2003      	movs	r0, #3
 800616c:	f7ff fa6a 	bl	8005644 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE11);
 8006170:	494e      	ldr	r1, [pc, #312]	; (80062ac <MX_GPIO_Init+0x394>)
 8006172:	2003      	movs	r0, #3
 8006174:	f7ff fa66 	bl	8005644 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE14);
 8006178:	494d      	ldr	r1, [pc, #308]	; (80062b0 <MX_GPIO_Init+0x398>)
 800617a:	2003      	movs	r0, #3
 800617c:	f7ff fa62 	bl	8005644 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE15);
 8006180:	494c      	ldr	r1, [pc, #304]	; (80062b4 <MX_GPIO_Init+0x39c>)
 8006182:	2003      	movs	r0, #3
 8006184:	f7ff fa5e 	bl	8005644 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE7);
 8006188:	494b      	ldr	r1, [pc, #300]	; (80062b8 <MX_GPIO_Init+0x3a0>)
 800618a:	2002      	movs	r0, #2
 800618c:	f7ff fa5a 	bl	8005644 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE8);
 8006190:	494a      	ldr	r1, [pc, #296]	; (80062bc <MX_GPIO_Init+0x3a4>)
 8006192:	2002      	movs	r0, #2
 8006194:	f7ff fa56 	bl	8005644 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE2);
 8006198:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800619c:	2003      	movs	r0, #3
 800619e:	f7ff fa51 	bl	8005644 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE1);
 80061a2:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 80061a6:	2004      	movs	r0, #4
 80061a8:	f7ff fa4c 	bl	8005644 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 80061ac:	2308      	movs	r3, #8
 80061ae:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80061b0:	2300      	movs	r3, #0
 80061b2:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80061b4:	2301      	movs	r3, #1
 80061b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80061ba:	2300      	movs	r3, #0
 80061bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80061c0:	2301      	movs	r3, #1
 80061c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80061c6:	f107 031c 	add.w	r3, r7, #28
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fe fc84 	bl	8004ad8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 80061d0:	2320      	movs	r3, #32
 80061d2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80061d4:	2300      	movs	r3, #0
 80061d6:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80061d8:	2301      	movs	r3, #1
 80061da:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80061de:	2300      	movs	r3, #0
 80061e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80061e4:	2301      	movs	r3, #1
 80061e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80061ea:	f107 031c 	add.w	r3, r7, #28
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fe fc72 	bl	8004ad8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_6;
 80061f4:	2340      	movs	r3, #64	; 0x40
 80061f6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80061f8:	2300      	movs	r3, #0
 80061fa:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80061fc:	2301      	movs	r3, #1
 80061fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006202:	2300      	movs	r3, #0
 8006204:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8006208:	2301      	movs	r3, #1
 800620a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800620e:	f107 031c 	add.w	r3, r7, #28
 8006212:	4618      	mov	r0, r3
 8006214:	f7fe fc60 	bl	8004ad8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8006218:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800621c:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800621e:	2300      	movs	r3, #0
 8006220:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006222:	2301      	movs	r3, #1
 8006224:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006228:	2300      	movs	r3, #0
 800622a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800622e:	2302      	movs	r3, #2
 8006230:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006234:	f107 031c 	add.w	r3, r7, #28
 8006238:	4618      	mov	r0, r3
 800623a:	f7fe fc4d 	bl	8004ad8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 800623e:	2301      	movs	r3, #1
 8006240:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8006242:	2300      	movs	r3, #0
 8006244:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006246:	2301      	movs	r3, #1
 8006248:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800624c:	2300      	movs	r3, #0
 800624e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8006252:	2301      	movs	r3, #1
 8006254:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006258:	f107 031c 	add.w	r3, r7, #28
 800625c:	4618      	mov	r0, r3
 800625e:	f7fe fc3b 	bl	8004ad8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_10;
 8006262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006266:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8006268:	2300      	movs	r3, #0
 800626a:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800626c:	2301      	movs	r3, #1
 800626e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006272:	2300      	movs	r3, #0
 8006274:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8006278:	2301      	movs	r3, #1
 800627a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800627e:	f107 031c 	add.w	r3, r7, #28
 8006282:	4618      	mov	r0, r3
 8006284:	f7fe fc28 	bl	8004ad8 <LL_EXTI_Init>
 8006288:	e01a      	b.n	80062c0 <MX_GPIO_Init+0x3a8>
 800628a:	bf00      	nop
 800628c:	48001000 	.word	0x48001000
 8006290:	48000400 	.word	0x48000400
 8006294:	48000c00 	.word	0x48000c00
 8006298:	48000800 	.word	0x48000800
 800629c:	00f00001 	.word	0x00f00001
 80062a0:	0f000001 	.word	0x0f000001
 80062a4:	00f00003 	.word	0x00f00003
 80062a8:	0f000002 	.word	0x0f000002
 80062ac:	f0000002 	.word	0xf0000002
 80062b0:	0f000003 	.word	0x0f000003
 80062b4:	f0000003 	.word	0xf0000003
 80062b8:	f0000001 	.word	0xf0000001
 80062bc:	000f0002 	.word	0x000f0002

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_11;
 80062c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062c4:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80062c6:	2300      	movs	r3, #0
 80062c8:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80062ca:	2301      	movs	r3, #1
 80062cc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80062d0:	2300      	movs	r3, #0
 80062d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80062d6:	2301      	movs	r3, #1
 80062d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80062dc:	f107 031c 	add.w	r3, r7, #28
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fe fbf9 	bl	8004ad8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 80062e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80062ea:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80062ec:	2300      	movs	r3, #0
 80062ee:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80062f0:	2301      	movs	r3, #1
 80062f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80062f6:	2300      	movs	r3, #0
 80062f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80062fc:	2301      	movs	r3, #1
 80062fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006302:	f107 031c 	add.w	r3, r7, #28
 8006306:	4618      	mov	r0, r3
 8006308:	f7fe fbe6 	bl	8004ad8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 800630c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006310:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8006312:	2300      	movs	r3, #0
 8006314:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006316:	2301      	movs	r3, #1
 8006318:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800631c:	2300      	movs	r3, #0
 800631e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8006322:	2301      	movs	r3, #1
 8006324:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006328:	f107 031c 	add.w	r3, r7, #28
 800632c:	4618      	mov	r0, r3
 800632e:	f7fe fbd3 	bl	8004ad8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_7;
 8006332:	2380      	movs	r3, #128	; 0x80
 8006334:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8006336:	2300      	movs	r3, #0
 8006338:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800633a:	2301      	movs	r3, #1
 800633c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006340:	2300      	movs	r3, #0
 8006342:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8006346:	2301      	movs	r3, #1
 8006348:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800634c:	f107 031c 	add.w	r3, r7, #28
 8006350:	4618      	mov	r0, r3
 8006352:	f7fe fbc1 	bl	8004ad8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_8;
 8006356:	f44f 7380 	mov.w	r3, #256	; 0x100
 800635a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800635c:	2300      	movs	r3, #0
 800635e:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006360:	2301      	movs	r3, #1
 8006362:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006366:	2300      	movs	r3, #0
 8006368:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800636c:	2301      	movs	r3, #1
 800636e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006372:	f107 031c 	add.w	r3, r7, #28
 8006376:	4618      	mov	r0, r3
 8006378:	f7fe fbae 	bl	8004ad8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 800637c:	2304      	movs	r3, #4
 800637e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8006380:	2300      	movs	r3, #0
 8006382:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006384:	2301      	movs	r3, #1
 8006386:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800638a:	2300      	movs	r3, #0
 800638c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8006390:	2301      	movs	r3, #1
 8006392:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006396:	f107 031c 	add.w	r3, r7, #28
 800639a:	4618      	mov	r0, r3
 800639c:	f7fe fb9c 	bl	8004ad8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 80063a0:	2302      	movs	r3, #2
 80063a2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80063a4:	2300      	movs	r3, #0
 80063a6:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80063a8:	2301      	movs	r3, #1
 80063aa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80063ae:	2300      	movs	r3, #0
 80063b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80063b4:	2301      	movs	r3, #1
 80063b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80063ba:	f107 031c 	add.w	r3, r7, #28
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fe fb8a 	bl	8004ad8 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(USB_OTG_FS_OVRCR_EXTI3_GPIO_Port, USB_OTG_FS_OVRCR_EXTI3_Pin, LL_GPIO_PULL_NO);
 80063c4:	2200      	movs	r2, #0
 80063c6:	2108      	movs	r1, #8
 80063c8:	485e      	ldr	r0, [pc, #376]	; (8006544 <MX_GPIO_Init+0x62c>)
 80063ca:	f7ff f998 	bl	80056fe <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPSGRF_915_GPIO3_EXTI5_GPIO_Port, SPSGRF_915_GPIO3_EXTI5_Pin, LL_GPIO_PULL_NO);
 80063ce:	2200      	movs	r2, #0
 80063d0:	2120      	movs	r1, #32
 80063d2:	485c      	ldr	r0, [pc, #368]	; (8006544 <MX_GPIO_Init+0x62c>)
 80063d4:	f7ff f993 	bl	80056fe <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPBTLE_RF_IRQ_EXTI6_GPIO_Port, SPBTLE_RF_IRQ_EXTI6_Pin, LL_GPIO_PULL_NO);
 80063d8:	2200      	movs	r2, #0
 80063da:	2140      	movs	r1, #64	; 0x40
 80063dc:	4859      	ldr	r0, [pc, #356]	; (8006544 <MX_GPIO_Init+0x62c>)
 80063de:	f7ff f98e 	bl	80056fe <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin, LL_GPIO_PULL_NO);
 80063e2:	2200      	movs	r2, #0
 80063e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80063e8:	4857      	ldr	r0, [pc, #348]	; (8006548 <MX_GPIO_Init+0x630>)
 80063ea:	f7ff f988 	bl	80056fe <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ARD_D3_GPIO_Port, ARD_D3_Pin, LL_GPIO_PULL_NO);
 80063ee:	2200      	movs	r2, #0
 80063f0:	2101      	movs	r1, #1
 80063f2:	4856      	ldr	r0, [pc, #344]	; (800654c <MX_GPIO_Init+0x634>)
 80063f4:	f7ff f983 	bl	80056fe <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LPS22HB_INT_DRDY_EXTI0_GPIO_Port, LPS22HB_INT_DRDY_EXTI0_Pin, LL_GPIO_PULL_NO);
 80063f8:	2200      	movs	r2, #0
 80063fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80063fe:	4854      	ldr	r0, [pc, #336]	; (8006550 <MX_GPIO_Init+0x638>)
 8006400:	f7ff f97d 	bl	80056fe <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LSM6DSL_INT1_EXTI11_GPIO_Port, LSM6DSL_INT1_EXTI11_Pin, LL_GPIO_PULL_NO);
 8006404:	2200      	movs	r2, #0
 8006406:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800640a:	4851      	ldr	r0, [pc, #324]	; (8006550 <MX_GPIO_Init+0x638>)
 800640c:	f7ff f977 	bl	80056fe <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ARD_D2_GPIO_Port, ARD_D2_Pin, LL_GPIO_PULL_NO);
 8006410:	2200      	movs	r2, #0
 8006412:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006416:	484e      	ldr	r0, [pc, #312]	; (8006550 <MX_GPIO_Init+0x638>)
 8006418:	f7ff f971 	bl	80056fe <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(HTS221_DRDY_EXTI15_GPIO_Port, HTS221_DRDY_EXTI15_Pin, LL_GPIO_PULL_NO);
 800641c:	2200      	movs	r2, #0
 800641e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006422:	484b      	ldr	r0, [pc, #300]	; (8006550 <MX_GPIO_Init+0x638>)
 8006424:	f7ff f96b 	bl	80056fe <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(VL53L0X_GPIO1_EXTI7_GPIO_Port, VL53L0X_GPIO1_EXTI7_Pin, LL_GPIO_PULL_NO);
 8006428:	2200      	movs	r2, #0
 800642a:	2180      	movs	r1, #128	; 0x80
 800642c:	4846      	ldr	r0, [pc, #280]	; (8006548 <MX_GPIO_Init+0x630>)
 800642e:	f7ff f966 	bl	80056fe <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LSM3MDL_DRDY_EXTI8_GPIO_Port, LSM3MDL_DRDY_EXTI8_Pin, LL_GPIO_PULL_NO);
 8006432:	2200      	movs	r2, #0
 8006434:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006438:	4843      	ldr	r0, [pc, #268]	; (8006548 <MX_GPIO_Init+0x630>)
 800643a:	f7ff f960 	bl	80056fe <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(PMOD_IRQ_EXTI12_GPIO_Port, PMOD_IRQ_EXTI12_Pin, LL_GPIO_PULL_NO);
 800643e:	2200      	movs	r2, #0
 8006440:	2104      	movs	r1, #4
 8006442:	4843      	ldr	r0, [pc, #268]	; (8006550 <MX_GPIO_Init+0x638>)
 8006444:	f7ff f95b 	bl	80056fe <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ISM43362_DRDY_EXTI1_GPIO_Port, ISM43362_DRDY_EXTI1_Pin, LL_GPIO_PULL_NO);
 8006448:	2200      	movs	r2, #0
 800644a:	2102      	movs	r1, #2
 800644c:	483d      	ldr	r0, [pc, #244]	; (8006544 <MX_GPIO_Init+0x62c>)
 800644e:	f7ff f956 	bl	80056fe <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(USB_OTG_FS_OVRCR_EXTI3_GPIO_Port, USB_OTG_FS_OVRCR_EXTI3_Pin, LL_GPIO_MODE_INPUT);
 8006452:	2200      	movs	r2, #0
 8006454:	2108      	movs	r1, #8
 8006456:	483b      	ldr	r0, [pc, #236]	; (8006544 <MX_GPIO_Init+0x62c>)
 8006458:	f7ff f922 	bl	80056a0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPSGRF_915_GPIO3_EXTI5_GPIO_Port, SPSGRF_915_GPIO3_EXTI5_Pin, LL_GPIO_MODE_INPUT);
 800645c:	2200      	movs	r2, #0
 800645e:	2120      	movs	r1, #32
 8006460:	4838      	ldr	r0, [pc, #224]	; (8006544 <MX_GPIO_Init+0x62c>)
 8006462:	f7ff f91d 	bl	80056a0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPBTLE_RF_IRQ_EXTI6_GPIO_Port, SPBTLE_RF_IRQ_EXTI6_Pin, LL_GPIO_MODE_INPUT);
 8006466:	2200      	movs	r2, #0
 8006468:	2140      	movs	r1, #64	; 0x40
 800646a:	4836      	ldr	r0, [pc, #216]	; (8006544 <MX_GPIO_Init+0x62c>)
 800646c:	f7ff f918 	bl	80056a0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin, LL_GPIO_MODE_INPUT);
 8006470:	2200      	movs	r2, #0
 8006472:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006476:	4834      	ldr	r0, [pc, #208]	; (8006548 <MX_GPIO_Init+0x630>)
 8006478:	f7ff f912 	bl	80056a0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ARD_D3_GPIO_Port, ARD_D3_Pin, LL_GPIO_MODE_INPUT);
 800647c:	2200      	movs	r2, #0
 800647e:	2101      	movs	r1, #1
 8006480:	4832      	ldr	r0, [pc, #200]	; (800654c <MX_GPIO_Init+0x634>)
 8006482:	f7ff f90d 	bl	80056a0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LPS22HB_INT_DRDY_EXTI0_GPIO_Port, LPS22HB_INT_DRDY_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8006486:	2200      	movs	r2, #0
 8006488:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800648c:	4830      	ldr	r0, [pc, #192]	; (8006550 <MX_GPIO_Init+0x638>)
 800648e:	f7ff f907 	bl	80056a0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LSM6DSL_INT1_EXTI11_GPIO_Port, LSM6DSL_INT1_EXTI11_Pin, LL_GPIO_MODE_INPUT);
 8006492:	2200      	movs	r2, #0
 8006494:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006498:	482d      	ldr	r0, [pc, #180]	; (8006550 <MX_GPIO_Init+0x638>)
 800649a:	f7ff f901 	bl	80056a0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ARD_D2_GPIO_Port, ARD_D2_Pin, LL_GPIO_MODE_INPUT);
 800649e:	2200      	movs	r2, #0
 80064a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80064a4:	482a      	ldr	r0, [pc, #168]	; (8006550 <MX_GPIO_Init+0x638>)
 80064a6:	f7ff f8fb 	bl	80056a0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(HTS221_DRDY_EXTI15_GPIO_Port, HTS221_DRDY_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 80064aa:	2200      	movs	r2, #0
 80064ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064b0:	4827      	ldr	r0, [pc, #156]	; (8006550 <MX_GPIO_Init+0x638>)
 80064b2:	f7ff f8f5 	bl	80056a0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(VL53L0X_GPIO1_EXTI7_GPIO_Port, VL53L0X_GPIO1_EXTI7_Pin, LL_GPIO_MODE_INPUT);
 80064b6:	2200      	movs	r2, #0
 80064b8:	2180      	movs	r1, #128	; 0x80
 80064ba:	4823      	ldr	r0, [pc, #140]	; (8006548 <MX_GPIO_Init+0x630>)
 80064bc:	f7ff f8f0 	bl	80056a0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LSM3MDL_DRDY_EXTI8_GPIO_Port, LSM3MDL_DRDY_EXTI8_Pin, LL_GPIO_MODE_INPUT);
 80064c0:	2200      	movs	r2, #0
 80064c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064c6:	4820      	ldr	r0, [pc, #128]	; (8006548 <MX_GPIO_Init+0x630>)
 80064c8:	f7ff f8ea 	bl	80056a0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(PMOD_IRQ_EXTI12_GPIO_Port, PMOD_IRQ_EXTI12_Pin, LL_GPIO_MODE_INPUT);
 80064cc:	2200      	movs	r2, #0
 80064ce:	2104      	movs	r1, #4
 80064d0:	481f      	ldr	r0, [pc, #124]	; (8006550 <MX_GPIO_Init+0x638>)
 80064d2:	f7ff f8e5 	bl	80056a0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ISM43362_DRDY_EXTI1_GPIO_Port, ISM43362_DRDY_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 80064d6:	2200      	movs	r2, #0
 80064d8:	2102      	movs	r1, #2
 80064da:	481a      	ldr	r0, [pc, #104]	; (8006544 <MX_GPIO_Init+0x62c>)
 80064dc:	f7ff f8e0 	bl	80056a0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_EnablePinAnalogControl(GPIOC, ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 80064e0:	213f      	movs	r1, #63	; 0x3f
 80064e2:	4819      	ldr	r0, [pc, #100]	; (8006548 <MX_GPIO_Init+0x630>)
 80064e4:	f7ff f93a 	bl	800575c <LL_GPIO_EnablePinAnalogControl>
                          |ARD_A1_Pin|ARD_A0_Pin);

  /**/
  LL_GPIO_EnablePinAnalogControl(ARD_D7_GPIO_Port, ARD_D7_Pin);
 80064e8:	2110      	movs	r1, #16
 80064ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80064ee:	f7ff f935 	bl	800575c <LL_GPIO_EnablePinAnalogControl>

  /**/
  LL_GPIO_EnablePinAnalogControl(ARD_D6_GPIO_Port, ARD_D6_Pin);
 80064f2:	2102      	movs	r1, #2
 80064f4:	4815      	ldr	r0, [pc, #84]	; (800654c <MX_GPIO_Init+0x634>)
 80064f6:	f7ff f931 	bl	800575c <LL_GPIO_EnablePinAnalogControl>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80064fa:	f7ff f819 	bl	8005530 <__NVIC_GetPriorityGrouping>
 80064fe:	4603      	mov	r3, r0
 8006500:	2200      	movs	r2, #0
 8006502:	2100      	movs	r1, #0
 8006504:	4618      	mov	r0, r3
 8006506:	f7ff f869 	bl	80055dc <NVIC_EncodePriority>
 800650a:	4603      	mov	r3, r0
 800650c:	4619      	mov	r1, r3
 800650e:	2017      	movs	r0, #23
 8006510:	f7ff f83a 	bl	8005588 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006514:	2017      	movs	r0, #23
 8006516:	f7ff f819 	bl	800554c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800651a:	f7ff f809 	bl	8005530 <__NVIC_GetPriorityGrouping>
 800651e:	4603      	mov	r3, r0
 8006520:	2200      	movs	r2, #0
 8006522:	2100      	movs	r1, #0
 8006524:	4618      	mov	r0, r3
 8006526:	f7ff f859 	bl	80055dc <NVIC_EncodePriority>
 800652a:	4603      	mov	r3, r0
 800652c:	4619      	mov	r1, r3
 800652e:	2028      	movs	r0, #40	; 0x28
 8006530:	f7ff f82a 	bl	8005588 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006534:	2028      	movs	r0, #40	; 0x28
 8006536:	f7ff f809 	bl	800554c <__NVIC_EnableIRQ>

}
 800653a:	bf00      	nop
 800653c:	3728      	adds	r7, #40	; 0x28
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	48001000 	.word	0x48001000
 8006548:	48000800 	.word	0x48000800
 800654c:	48000400 	.word	0x48000400
 8006550:	48000c00 	.word	0x48000c00

08006554 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, sizeof(uint8_t), HAL_MAX_DELAY);
 800655c:	1d39      	adds	r1, r7, #4
 800655e:	f04f 33ff 	mov.w	r3, #4294967295
 8006562:	2201      	movs	r2, #1
 8006564:	4803      	ldr	r0, [pc, #12]	; (8006574 <__io_putchar+0x20>)
 8006566:	f7fd fbaf 	bl	8003cc8 <HAL_UART_Transmit>
	return ch;
 800656a:	687b      	ldr	r3, [r7, #4]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	2000071c 	.word	0x2000071c

08006578 <__io_getchar>:
int __io_getchar(void)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
	uint8_t ch;
	HAL_UART_Receive(&huart1, &ch, sizeof(ch), HAL_MAX_DELAY);
 800657e:	1df9      	adds	r1, r7, #7
 8006580:	f04f 33ff 	mov.w	r3, #4294967295
 8006584:	2201      	movs	r2, #1
 8006586:	4804      	ldr	r0, [pc, #16]	; (8006598 <__io_getchar+0x20>)
 8006588:	f7fd fc31 	bl	8003dee <HAL_UART_Receive>
	return ch;
 800658c:	79fb      	ldrb	r3, [r7, #7]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	2000071c 	.word	0x2000071c

0800659c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800659c:	b480      	push	{r7}
 800659e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80065a0:	bf00      	nop
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
	...

080065ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065b2:	4b0f      	ldr	r3, [pc, #60]	; (80065f0 <HAL_MspInit+0x44>)
 80065b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065b6:	4a0e      	ldr	r2, [pc, #56]	; (80065f0 <HAL_MspInit+0x44>)
 80065b8:	f043 0301 	orr.w	r3, r3, #1
 80065bc:	6613      	str	r3, [r2, #96]	; 0x60
 80065be:	4b0c      	ldr	r3, [pc, #48]	; (80065f0 <HAL_MspInit+0x44>)
 80065c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	607b      	str	r3, [r7, #4]
 80065c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80065ca:	4b09      	ldr	r3, [pc, #36]	; (80065f0 <HAL_MspInit+0x44>)
 80065cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ce:	4a08      	ldr	r2, [pc, #32]	; (80065f0 <HAL_MspInit+0x44>)
 80065d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065d4:	6593      	str	r3, [r2, #88]	; 0x58
 80065d6:	4b06      	ldr	r3, [pc, #24]	; (80065f0 <HAL_MspInit+0x44>)
 80065d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065de:	603b      	str	r3, [r7, #0]
 80065e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80065e2:	bf00      	nop
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	40021000 	.word	0x40021000

080065f4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b08a      	sub	sp, #40	; 0x28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065fc:	f107 0314 	add.w	r3, r7, #20
 8006600:	2200      	movs	r2, #0
 8006602:	601a      	str	r2, [r3, #0]
 8006604:	605a      	str	r2, [r3, #4]
 8006606:	609a      	str	r2, [r3, #8]
 8006608:	60da      	str	r2, [r3, #12]
 800660a:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 800660c:	4b18      	ldr	r3, [pc, #96]	; (8006670 <HAL_DFSDM_ChannelMspInit+0x7c>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d128      	bne.n	8006666 <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8006614:	4b17      	ldr	r3, [pc, #92]	; (8006674 <HAL_DFSDM_ChannelMspInit+0x80>)
 8006616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006618:	4a16      	ldr	r2, [pc, #88]	; (8006674 <HAL_DFSDM_ChannelMspInit+0x80>)
 800661a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800661e:	6613      	str	r3, [r2, #96]	; 0x60
 8006620:	4b14      	ldr	r3, [pc, #80]	; (8006674 <HAL_DFSDM_ChannelMspInit+0x80>)
 8006622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006628:	613b      	str	r3, [r7, #16]
 800662a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800662c:	4b11      	ldr	r3, [pc, #68]	; (8006674 <HAL_DFSDM_ChannelMspInit+0x80>)
 800662e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006630:	4a10      	ldr	r2, [pc, #64]	; (8006674 <HAL_DFSDM_ChannelMspInit+0x80>)
 8006632:	f043 0310 	orr.w	r3, r3, #16
 8006636:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006638:	4b0e      	ldr	r3, [pc, #56]	; (8006674 <HAL_DFSDM_ChannelMspInit+0x80>)
 800663a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800663c:	f003 0310 	and.w	r3, r3, #16
 8006640:	60fb      	str	r3, [r7, #12]
 8006642:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8006644:	f44f 7320 	mov.w	r3, #640	; 0x280
 8006648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800664a:	2302      	movs	r3, #2
 800664c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800664e:	2300      	movs	r3, #0
 8006650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006652:	2300      	movs	r3, #0
 8006654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8006656:	2306      	movs	r3, #6
 8006658:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800665a:	f107 0314 	add.w	r3, r7, #20
 800665e:	4619      	mov	r1, r3
 8006660:	4805      	ldr	r0, [pc, #20]	; (8006678 <HAL_DFSDM_ChannelMspInit+0x84>)
 8006662:	f7fa fce3 	bl	800102c <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8006666:	bf00      	nop
 8006668:	3728      	adds	r7, #40	; 0x28
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	200000cc 	.word	0x200000cc
 8006674:	40021000 	.word	0x40021000
 8006678:	48001000 	.word	0x48001000

0800667c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b08a      	sub	sp, #40	; 0x28
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006684:	f107 0314 	add.w	r3, r7, #20
 8006688:	2200      	movs	r2, #0
 800668a:	601a      	str	r2, [r3, #0]
 800668c:	605a      	str	r2, [r3, #4]
 800668e:	609a      	str	r2, [r3, #8]
 8006690:	60da      	str	r2, [r3, #12]
 8006692:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a17      	ldr	r2, [pc, #92]	; (80066f8 <HAL_I2C_MspInit+0x7c>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d128      	bne.n	80066f0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800669e:	4b17      	ldr	r3, [pc, #92]	; (80066fc <HAL_I2C_MspInit+0x80>)
 80066a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a2:	4a16      	ldr	r2, [pc, #88]	; (80066fc <HAL_I2C_MspInit+0x80>)
 80066a4:	f043 0302 	orr.w	r3, r3, #2
 80066a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066aa:	4b14      	ldr	r3, [pc, #80]	; (80066fc <HAL_I2C_MspInit+0x80>)
 80066ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ae:	f003 0302 	and.w	r3, r3, #2
 80066b2:	613b      	str	r3, [r7, #16]
 80066b4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80066b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80066ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80066bc:	2312      	movs	r3, #18
 80066be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80066c0:	2301      	movs	r3, #1
 80066c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066c4:	2303      	movs	r3, #3
 80066c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80066c8:	2304      	movs	r3, #4
 80066ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066cc:	f107 0314 	add.w	r3, r7, #20
 80066d0:	4619      	mov	r1, r3
 80066d2:	480b      	ldr	r0, [pc, #44]	; (8006700 <HAL_I2C_MspInit+0x84>)
 80066d4:	f7fa fcaa 	bl	800102c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80066d8:	4b08      	ldr	r3, [pc, #32]	; (80066fc <HAL_I2C_MspInit+0x80>)
 80066da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066dc:	4a07      	ldr	r2, [pc, #28]	; (80066fc <HAL_I2C_MspInit+0x80>)
 80066de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80066e2:	6593      	str	r3, [r2, #88]	; 0x58
 80066e4:	4b05      	ldr	r3, [pc, #20]	; (80066fc <HAL_I2C_MspInit+0x80>)
 80066e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ec:	60fb      	str	r3, [r7, #12]
 80066ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80066f0:	bf00      	nop
 80066f2:	3728      	adds	r7, #40	; 0x28
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	40005800 	.word	0x40005800
 80066fc:	40021000 	.word	0x40021000
 8006700:	48000400 	.word	0x48000400

08006704 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a08      	ldr	r2, [pc, #32]	; (8006734 <HAL_I2C_MspDeInit+0x30>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d10a      	bne.n	800672c <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8006716:	4b08      	ldr	r3, [pc, #32]	; (8006738 <HAL_I2C_MspDeInit+0x34>)
 8006718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800671a:	4a07      	ldr	r2, [pc, #28]	; (8006738 <HAL_I2C_MspDeInit+0x34>)
 800671c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006720:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 8006722:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8006726:	4805      	ldr	r0, [pc, #20]	; (800673c <HAL_I2C_MspDeInit+0x38>)
 8006728:	f7fa fe28 	bl	800137c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800672c:	bf00      	nop
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	40005800 	.word	0x40005800
 8006738:	40021000 	.word	0x40021000
 800673c:	48000400 	.word	0x48000400

08006740 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b08a      	sub	sp, #40	; 0x28
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006748:	f107 0314 	add.w	r3, r7, #20
 800674c:	2200      	movs	r2, #0
 800674e:	601a      	str	r2, [r3, #0]
 8006750:	605a      	str	r2, [r3, #4]
 8006752:	609a      	str	r2, [r3, #8]
 8006754:	60da      	str	r2, [r3, #12]
 8006756:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a17      	ldr	r2, [pc, #92]	; (80067bc <HAL_QSPI_MspInit+0x7c>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d128      	bne.n	80067b4 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8006762:	4b17      	ldr	r3, [pc, #92]	; (80067c0 <HAL_QSPI_MspInit+0x80>)
 8006764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006766:	4a16      	ldr	r2, [pc, #88]	; (80067c0 <HAL_QSPI_MspInit+0x80>)
 8006768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800676c:	6513      	str	r3, [r2, #80]	; 0x50
 800676e:	4b14      	ldr	r3, [pc, #80]	; (80067c0 <HAL_QSPI_MspInit+0x80>)
 8006770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006776:	613b      	str	r3, [r7, #16]
 8006778:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800677a:	4b11      	ldr	r3, [pc, #68]	; (80067c0 <HAL_QSPI_MspInit+0x80>)
 800677c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800677e:	4a10      	ldr	r2, [pc, #64]	; (80067c0 <HAL_QSPI_MspInit+0x80>)
 8006780:	f043 0310 	orr.w	r3, r3, #16
 8006784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006786:	4b0e      	ldr	r3, [pc, #56]	; (80067c0 <HAL_QSPI_MspInit+0x80>)
 8006788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800678a:	f003 0310 	and.w	r3, r3, #16
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 8006792:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8006796:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006798:	2302      	movs	r3, #2
 800679a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800679c:	2300      	movs	r3, #0
 800679e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067a0:	2303      	movs	r3, #3
 80067a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80067a4:	230a      	movs	r3, #10
 80067a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80067a8:	f107 0314 	add.w	r3, r7, #20
 80067ac:	4619      	mov	r1, r3
 80067ae:	4805      	ldr	r0, [pc, #20]	; (80067c4 <HAL_QSPI_MspInit+0x84>)
 80067b0:	f7fa fc3c 	bl	800102c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80067b4:	bf00      	nop
 80067b6:	3728      	adds	r7, #40	; 0x28
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	a0001000 	.word	0xa0001000
 80067c0:	40021000 	.word	0x40021000
 80067c4:	48001000 	.word	0x48001000

080067c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b08c      	sub	sp, #48	; 0x30
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067d0:	f107 031c 	add.w	r3, r7, #28
 80067d4:	2200      	movs	r2, #0
 80067d6:	601a      	str	r2, [r3, #0]
 80067d8:	605a      	str	r2, [r3, #4]
 80067da:	609a      	str	r2, [r3, #8]
 80067dc:	60da      	str	r2, [r3, #12]
 80067de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a2f      	ldr	r2, [pc, #188]	; (80068a4 <HAL_SPI_MspInit+0xdc>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d129      	bne.n	800683e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80067ea:	4b2f      	ldr	r3, [pc, #188]	; (80068a8 <HAL_SPI_MspInit+0xe0>)
 80067ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ee:	4a2e      	ldr	r2, [pc, #184]	; (80068a8 <HAL_SPI_MspInit+0xe0>)
 80067f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80067f4:	6613      	str	r3, [r2, #96]	; 0x60
 80067f6:	4b2c      	ldr	r3, [pc, #176]	; (80068a8 <HAL_SPI_MspInit+0xe0>)
 80067f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067fe:	61bb      	str	r3, [r7, #24]
 8006800:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006802:	4b29      	ldr	r3, [pc, #164]	; (80068a8 <HAL_SPI_MspInit+0xe0>)
 8006804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006806:	4a28      	ldr	r2, [pc, #160]	; (80068a8 <HAL_SPI_MspInit+0xe0>)
 8006808:	f043 0301 	orr.w	r3, r3, #1
 800680c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800680e:	4b26      	ldr	r3, [pc, #152]	; (80068a8 <HAL_SPI_MspInit+0xe0>)
 8006810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	617b      	str	r3, [r7, #20]
 8006818:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800681a:	23e0      	movs	r3, #224	; 0xe0
 800681c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800681e:	2302      	movs	r3, #2
 8006820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006822:	2300      	movs	r3, #0
 8006824:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006826:	2303      	movs	r3, #3
 8006828:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800682a:	2305      	movs	r3, #5
 800682c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800682e:	f107 031c 	add.w	r3, r7, #28
 8006832:	4619      	mov	r1, r3
 8006834:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006838:	f7fa fbf8 	bl	800102c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800683c:	e02d      	b.n	800689a <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a1a      	ldr	r2, [pc, #104]	; (80068ac <HAL_SPI_MspInit+0xe4>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d128      	bne.n	800689a <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006848:	4b17      	ldr	r3, [pc, #92]	; (80068a8 <HAL_SPI_MspInit+0xe0>)
 800684a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800684c:	4a16      	ldr	r2, [pc, #88]	; (80068a8 <HAL_SPI_MspInit+0xe0>)
 800684e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006852:	6593      	str	r3, [r2, #88]	; 0x58
 8006854:	4b14      	ldr	r3, [pc, #80]	; (80068a8 <HAL_SPI_MspInit+0xe0>)
 8006856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006858:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800685c:	613b      	str	r3, [r7, #16]
 800685e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006860:	4b11      	ldr	r3, [pc, #68]	; (80068a8 <HAL_SPI_MspInit+0xe0>)
 8006862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006864:	4a10      	ldr	r2, [pc, #64]	; (80068a8 <HAL_SPI_MspInit+0xe0>)
 8006866:	f043 0304 	orr.w	r3, r3, #4
 800686a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800686c:	4b0e      	ldr	r3, [pc, #56]	; (80068a8 <HAL_SPI_MspInit+0xe0>)
 800686e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006870:	f003 0304 	and.w	r3, r3, #4
 8006874:	60fb      	str	r3, [r7, #12]
 8006876:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8006878:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800687c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800687e:	2302      	movs	r3, #2
 8006880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006882:	2300      	movs	r3, #0
 8006884:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006886:	2303      	movs	r3, #3
 8006888:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800688a:	2306      	movs	r3, #6
 800688c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800688e:	f107 031c 	add.w	r3, r7, #28
 8006892:	4619      	mov	r1, r3
 8006894:	4806      	ldr	r0, [pc, #24]	; (80068b0 <HAL_SPI_MspInit+0xe8>)
 8006896:	f7fa fbc9 	bl	800102c <HAL_GPIO_Init>
}
 800689a:	bf00      	nop
 800689c:	3730      	adds	r7, #48	; 0x30
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	40013000 	.word	0x40013000
 80068a8:	40021000 	.word	0x40021000
 80068ac:	40003c00 	.word	0x40003c00
 80068b0:	48000800 	.word	0x48000800

080068b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b08c      	sub	sp, #48	; 0x30
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068bc:	f107 031c 	add.w	r3, r7, #28
 80068c0:	2200      	movs	r2, #0
 80068c2:	601a      	str	r2, [r3, #0]
 80068c4:	605a      	str	r2, [r3, #4]
 80068c6:	609a      	str	r2, [r3, #8]
 80068c8:	60da      	str	r2, [r3, #12]
 80068ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a2e      	ldr	r2, [pc, #184]	; (800698c <HAL_UART_MspInit+0xd8>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d128      	bne.n	8006928 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80068d6:	4b2e      	ldr	r3, [pc, #184]	; (8006990 <HAL_UART_MspInit+0xdc>)
 80068d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068da:	4a2d      	ldr	r2, [pc, #180]	; (8006990 <HAL_UART_MspInit+0xdc>)
 80068dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068e0:	6613      	str	r3, [r2, #96]	; 0x60
 80068e2:	4b2b      	ldr	r3, [pc, #172]	; (8006990 <HAL_UART_MspInit+0xdc>)
 80068e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068ea:	61bb      	str	r3, [r7, #24]
 80068ec:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068ee:	4b28      	ldr	r3, [pc, #160]	; (8006990 <HAL_UART_MspInit+0xdc>)
 80068f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068f2:	4a27      	ldr	r2, [pc, #156]	; (8006990 <HAL_UART_MspInit+0xdc>)
 80068f4:	f043 0302 	orr.w	r3, r3, #2
 80068f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068fa:	4b25      	ldr	r3, [pc, #148]	; (8006990 <HAL_UART_MspInit+0xdc>)
 80068fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	617b      	str	r3, [r7, #20]
 8006904:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006906:	23c0      	movs	r3, #192	; 0xc0
 8006908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800690a:	2302      	movs	r3, #2
 800690c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800690e:	2300      	movs	r3, #0
 8006910:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006912:	2303      	movs	r3, #3
 8006914:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006916:	2307      	movs	r3, #7
 8006918:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800691a:	f107 031c 	add.w	r3, r7, #28
 800691e:	4619      	mov	r1, r3
 8006920:	481c      	ldr	r0, [pc, #112]	; (8006994 <HAL_UART_MspInit+0xe0>)
 8006922:	f7fa fb83 	bl	800102c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006926:	e02d      	b.n	8006984 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a1a      	ldr	r2, [pc, #104]	; (8006998 <HAL_UART_MspInit+0xe4>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d128      	bne.n	8006984 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006932:	4b17      	ldr	r3, [pc, #92]	; (8006990 <HAL_UART_MspInit+0xdc>)
 8006934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006936:	4a16      	ldr	r2, [pc, #88]	; (8006990 <HAL_UART_MspInit+0xdc>)
 8006938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800693c:	6593      	str	r3, [r2, #88]	; 0x58
 800693e:	4b14      	ldr	r3, [pc, #80]	; (8006990 <HAL_UART_MspInit+0xdc>)
 8006940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006942:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006946:	613b      	str	r3, [r7, #16]
 8006948:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800694a:	4b11      	ldr	r3, [pc, #68]	; (8006990 <HAL_UART_MspInit+0xdc>)
 800694c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800694e:	4a10      	ldr	r2, [pc, #64]	; (8006990 <HAL_UART_MspInit+0xdc>)
 8006950:	f043 0308 	orr.w	r3, r3, #8
 8006954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006956:	4b0e      	ldr	r3, [pc, #56]	; (8006990 <HAL_UART_MspInit+0xdc>)
 8006958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800695a:	f003 0308 	and.w	r3, r3, #8
 800695e:	60fb      	str	r3, [r7, #12]
 8006960:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006962:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006968:	2302      	movs	r3, #2
 800696a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800696c:	2300      	movs	r3, #0
 800696e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006970:	2303      	movs	r3, #3
 8006972:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006974:	2307      	movs	r3, #7
 8006976:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006978:	f107 031c 	add.w	r3, r7, #28
 800697c:	4619      	mov	r1, r3
 800697e:	4807      	ldr	r0, [pc, #28]	; (800699c <HAL_UART_MspInit+0xe8>)
 8006980:	f7fa fb54 	bl	800102c <HAL_GPIO_Init>
}
 8006984:	bf00      	nop
 8006986:	3730      	adds	r7, #48	; 0x30
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	40013800 	.word	0x40013800
 8006990:	40021000 	.word	0x40021000
 8006994:	48000400 	.word	0x48000400
 8006998:	40004800 	.word	0x40004800
 800699c:	48000c00 	.word	0x48000c00

080069a0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b08a      	sub	sp, #40	; 0x28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069a8:	f107 0314 	add.w	r3, r7, #20
 80069ac:	2200      	movs	r2, #0
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	605a      	str	r2, [r3, #4]
 80069b2:	609a      	str	r2, [r3, #8]
 80069b4:	60da      	str	r2, [r3, #12]
 80069b6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069c0:	d154      	bne.n	8006a6c <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069c2:	4b2c      	ldr	r3, [pc, #176]	; (8006a74 <HAL_PCD_MspInit+0xd4>)
 80069c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069c6:	4a2b      	ldr	r2, [pc, #172]	; (8006a74 <HAL_PCD_MspInit+0xd4>)
 80069c8:	f043 0301 	orr.w	r3, r3, #1
 80069cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80069ce:	4b29      	ldr	r3, [pc, #164]	; (8006a74 <HAL_PCD_MspInit+0xd4>)
 80069d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	613b      	str	r3, [r7, #16]
 80069d8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80069da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069e0:	2300      	movs	r3, #0
 80069e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069e4:	2300      	movs	r3, #0
 80069e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069e8:	f107 0314 	add.w	r3, r7, #20
 80069ec:	4619      	mov	r1, r3
 80069ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80069f2:	f7fa fb1b 	bl	800102c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80069f6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80069fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069fc:	2302      	movs	r3, #2
 80069fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a00:	2300      	movs	r3, #0
 8006a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a04:	2303      	movs	r3, #3
 8006a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006a08:	230a      	movs	r3, #10
 8006a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a0c:	f107 0314 	add.w	r3, r7, #20
 8006a10:	4619      	mov	r1, r3
 8006a12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006a16:	f7fa fb09 	bl	800102c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006a1a:	4b16      	ldr	r3, [pc, #88]	; (8006a74 <HAL_PCD_MspInit+0xd4>)
 8006a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a1e:	4a15      	ldr	r2, [pc, #84]	; (8006a74 <HAL_PCD_MspInit+0xd4>)
 8006a20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a26:	4b13      	ldr	r3, [pc, #76]	; (8006a74 <HAL_PCD_MspInit+0xd4>)
 8006a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a2e:	60fb      	str	r3, [r7, #12]
 8006a30:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a32:	4b10      	ldr	r3, [pc, #64]	; (8006a74 <HAL_PCD_MspInit+0xd4>)
 8006a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d114      	bne.n	8006a68 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a3e:	4b0d      	ldr	r3, [pc, #52]	; (8006a74 <HAL_PCD_MspInit+0xd4>)
 8006a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a42:	4a0c      	ldr	r2, [pc, #48]	; (8006a74 <HAL_PCD_MspInit+0xd4>)
 8006a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a48:	6593      	str	r3, [r2, #88]	; 0x58
 8006a4a:	4b0a      	ldr	r3, [pc, #40]	; (8006a74 <HAL_PCD_MspInit+0xd4>)
 8006a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a52:	60bb      	str	r3, [r7, #8]
 8006a54:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8006a56:	f7fb fd13 	bl	8002480 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a5a:	4b06      	ldr	r3, [pc, #24]	; (8006a74 <HAL_PCD_MspInit+0xd4>)
 8006a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a5e:	4a05      	ldr	r2, [pc, #20]	; (8006a74 <HAL_PCD_MspInit+0xd4>)
 8006a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a64:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8006a66:	e001      	b.n	8006a6c <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8006a68:	f7fb fd0a 	bl	8002480 <HAL_PWREx_EnableVddUSB>
}
 8006a6c:	bf00      	nop
 8006a6e:	3728      	adds	r7, #40	; 0x28
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	40021000 	.word	0x40021000

08006a78 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8006a80:	4b07      	ldr	r3, [pc, #28]	; (8006aa0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8006a82:	695a      	ldr	r2, [r3, #20]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4013      	ands	r3, r2
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d101      	bne.n	8006a92 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e000      	b.n	8006a94 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	40010400 	.word	0x40010400

08006aa4 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8006aac:	4a04      	ldr	r2, [pc, #16]	; (8006ac0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6153      	str	r3, [r2, #20]
}
 8006ab2:	bf00      	nop
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	40010400 	.word	0x40010400

08006ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006ac8:	bf00      	nop
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006ad6:	e7fe      	b.n	8006ad6 <HardFault_Handler+0x4>

08006ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006adc:	e7fe      	b.n	8006adc <MemManage_Handler+0x4>

08006ade <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006ae2:	e7fe      	b.n	8006ae2 <BusFault_Handler+0x4>

08006ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006ae8:	e7fe      	b.n	8006ae8 <UsageFault_Handler+0x4>

08006aea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006aea:	b480      	push	{r7}
 8006aec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006aee:	bf00      	nop
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006af8:	b480      	push	{r7}
 8006afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006afc:	bf00      	nop
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006b06:	b480      	push	{r7}
 8006b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006b0a:	bf00      	nop
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006b18:	f7f9 ffd6 	bl	8000ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006b1c:	bf00      	nop
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5) != RESET)
 8006b24:	2020      	movs	r0, #32
 8006b26:	f7ff ffa7 	bl	8006a78 <LL_EXTI_IsActiveFlag_0_31>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d002      	beq.n	8006b36 <EXTI9_5_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 8006b30:	2020      	movs	r0, #32
 8006b32:	f7ff ffb7 	bl	8006aa4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_5 */
    
    /* USER CODE END LL_EXTI_LINE_5 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_6) != RESET)
 8006b36:	2040      	movs	r0, #64	; 0x40
 8006b38:	f7ff ff9e 	bl	8006a78 <LL_EXTI_IsActiveFlag_0_31>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d002      	beq.n	8006b48 <EXTI9_5_IRQHandler+0x28>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_6);
 8006b42:	2040      	movs	r0, #64	; 0x40
 8006b44:	f7ff ffae 	bl	8006aa4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_6 */
    
    /* USER CODE END LL_EXTI_LINE_6 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_7) != RESET)
 8006b48:	2080      	movs	r0, #128	; 0x80
 8006b4a:	f7ff ff95 	bl	8006a78 <LL_EXTI_IsActiveFlag_0_31>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d002      	beq.n	8006b5a <EXTI9_5_IRQHandler+0x3a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_7);
 8006b54:	2080      	movs	r0, #128	; 0x80
 8006b56:	f7ff ffa5 	bl	8006aa4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_7 */
    
    /* USER CODE END LL_EXTI_LINE_7 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_8) != RESET)
 8006b5a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006b5e:	f7ff ff8b 	bl	8006a78 <LL_EXTI_IsActiveFlag_0_31>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d003      	beq.n	8006b70 <EXTI9_5_IRQHandler+0x50>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_8);
 8006b68:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006b6c:	f7ff ff9a 	bl	8006aa4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_8 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006b70:	bf00      	nop
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_10) != RESET)
 8006b78:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006b7c:	f7ff ff7c 	bl	8006a78 <LL_EXTI_IsActiveFlag_0_31>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d003      	beq.n	8006b8e <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_10);
 8006b86:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006b8a:	f7ff ff8b 	bl	8006aa4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_10 */
    
    /* USER CODE END LL_EXTI_LINE_10 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_11) != RESET)
 8006b8e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006b92:	f7ff ff71 	bl	8006a78 <LL_EXTI_IsActiveFlag_0_31>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d003      	beq.n	8006ba4 <EXTI15_10_IRQHandler+0x30>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_11);
 8006b9c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006ba0:	f7ff ff80 	bl	8006aa4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_11 */
    
    /* USER CODE END LL_EXTI_LINE_11 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8006ba4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006ba8:	f7ff ff66 	bl	8006a78 <LL_EXTI_IsActiveFlag_0_31>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d008      	beq.n	8006bc4 <EXTI15_10_IRQHandler+0x50>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8006bb2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006bb6:	f7ff ff75 	bl	8006aa4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */
    extern int demo_count;
    ++demo_count;
 8006bba:	4b0e      	ldr	r3, [pc, #56]	; (8006bf4 <EXTI15_10_IRQHandler+0x80>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	4a0c      	ldr	r2, [pc, #48]	; (8006bf4 <EXTI15_10_IRQHandler+0x80>)
 8006bc2:	6013      	str	r3, [r2, #0]
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8006bc4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006bc8:	f7ff ff56 	bl	8006a78 <LL_EXTI_IsActiveFlag_0_31>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d003      	beq.n	8006bda <EXTI15_10_IRQHandler+0x66>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8006bd2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006bd6:	f7ff ff65 	bl	8006aa4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8006bda:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006bde:	f7ff ff4b 	bl	8006a78 <LL_EXTI_IsActiveFlag_0_31>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d003      	beq.n	8006bf0 <EXTI15_10_IRQHandler+0x7c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8006be8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006bec:	f7ff ff5a 	bl	8006aa4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006bf0:	bf00      	nop
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	200000c8 	.word	0x200000c8

08006bf8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]

	//hardcode len to a single character for scanf()

	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c04:	2300      	movs	r3, #0
 8006c06:	617b      	str	r3, [r7, #20]
 8006c08:	e00a      	b.n	8006c20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006c0a:	f7ff fcb5 	bl	8006578 <__io_getchar>
 8006c0e:	4601      	mov	r1, r0
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	1c5a      	adds	r2, r3, #1
 8006c14:	60ba      	str	r2, [r7, #8]
 8006c16:	b2ca      	uxtb	r2, r1
 8006c18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	617b      	str	r3, [r7, #20]
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	dbf0      	blt.n	8006c0a <_read+0x12>
	}

return len;
 8006c28:	687b      	ldr	r3, [r7, #4]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3718      	adds	r7, #24
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b086      	sub	sp, #24
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	60f8      	str	r0, [r7, #12]
 8006c3a:	60b9      	str	r1, [r7, #8]
 8006c3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c3e:	2300      	movs	r3, #0
 8006c40:	617b      	str	r3, [r7, #20]
 8006c42:	e009      	b.n	8006c58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	1c5a      	adds	r2, r3, #1
 8006c48:	60ba      	str	r2, [r7, #8]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7ff fc81 	bl	8006554 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	3301      	adds	r3, #1
 8006c56:	617b      	str	r3, [r7, #20]
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	dbf1      	blt.n	8006c44 <_write+0x12>
	}
	return len;
 8006c60:	687b      	ldr	r3, [r7, #4]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3718      	adds	r7, #24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <_close>:

int _close(int file)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b083      	sub	sp, #12
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
	return -1;
 8006c72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b083      	sub	sp, #12
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006c92:	605a      	str	r2, [r3, #4]
	return 0;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <_isatty>:

int _isatty(int file)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b083      	sub	sp, #12
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
	return 1;
 8006caa:	2301      	movs	r3, #1
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
	return 0;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
	...

08006cd4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006cdc:	4b11      	ldr	r3, [pc, #68]	; (8006d24 <_sbrk+0x50>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d102      	bne.n	8006cea <_sbrk+0x16>
		heap_end = &end;
 8006ce4:	4b0f      	ldr	r3, [pc, #60]	; (8006d24 <_sbrk+0x50>)
 8006ce6:	4a10      	ldr	r2, [pc, #64]	; (8006d28 <_sbrk+0x54>)
 8006ce8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006cea:	4b0e      	ldr	r3, [pc, #56]	; (8006d24 <_sbrk+0x50>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006cf0:	4b0c      	ldr	r3, [pc, #48]	; (8006d24 <_sbrk+0x50>)
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	466a      	mov	r2, sp
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d907      	bls.n	8006d0e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006cfe:	f000 f875 	bl	8006dec <__errno>
 8006d02:	4602      	mov	r2, r0
 8006d04:	230c      	movs	r3, #12
 8006d06:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006d08:	f04f 33ff 	mov.w	r3, #4294967295
 8006d0c:	e006      	b.n	8006d1c <_sbrk+0x48>
	}

	heap_end += incr;
 8006d0e:	4b05      	ldr	r3, [pc, #20]	; (8006d24 <_sbrk+0x50>)
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4413      	add	r3, r2
 8006d16:	4a03      	ldr	r2, [pc, #12]	; (8006d24 <_sbrk+0x50>)
 8006d18:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	200000d0 	.word	0x200000d0
 8006d28:	200007e8 	.word	0x200007e8

08006d2c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006d30:	4b17      	ldr	r3, [pc, #92]	; (8006d90 <SystemInit+0x64>)
 8006d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d36:	4a16      	ldr	r2, [pc, #88]	; (8006d90 <SystemInit+0x64>)
 8006d38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006d40:	4b14      	ldr	r3, [pc, #80]	; (8006d94 <SystemInit+0x68>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a13      	ldr	r2, [pc, #76]	; (8006d94 <SystemInit+0x68>)
 8006d46:	f043 0301 	orr.w	r3, r3, #1
 8006d4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8006d4c:	4b11      	ldr	r3, [pc, #68]	; (8006d94 <SystemInit+0x68>)
 8006d4e:	2200      	movs	r2, #0
 8006d50:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8006d52:	4b10      	ldr	r3, [pc, #64]	; (8006d94 <SystemInit+0x68>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a0f      	ldr	r2, [pc, #60]	; (8006d94 <SystemInit+0x68>)
 8006d58:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006d5c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8006d60:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8006d62:	4b0c      	ldr	r3, [pc, #48]	; (8006d94 <SystemInit+0x68>)
 8006d64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d68:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006d6a:	4b0a      	ldr	r3, [pc, #40]	; (8006d94 <SystemInit+0x68>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a09      	ldr	r2, [pc, #36]	; (8006d94 <SystemInit+0x68>)
 8006d70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d74:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8006d76:	4b07      	ldr	r3, [pc, #28]	; (8006d94 <SystemInit+0x68>)
 8006d78:	2200      	movs	r2, #0
 8006d7a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006d7c:	4b04      	ldr	r3, [pc, #16]	; (8006d90 <SystemInit+0x64>)
 8006d7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006d82:	609a      	str	r2, [r3, #8]
#endif
}
 8006d84:	bf00      	nop
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	e000ed00 	.word	0xe000ed00
 8006d94:	40021000 	.word	0x40021000

08006d98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006dd0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006d9c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006d9e:	e003      	b.n	8006da8 <LoopCopyDataInit>

08006da0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006da0:	4b0c      	ldr	r3, [pc, #48]	; (8006dd4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006da2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006da4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006da6:	3104      	adds	r1, #4

08006da8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006da8:	480b      	ldr	r0, [pc, #44]	; (8006dd8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006daa:	4b0c      	ldr	r3, [pc, #48]	; (8006ddc <LoopForever+0xe>)
	adds	r2, r0, r1
 8006dac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006dae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006db0:	d3f6      	bcc.n	8006da0 <CopyDataInit>
	ldr	r2, =_sbss
 8006db2:	4a0b      	ldr	r2, [pc, #44]	; (8006de0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006db4:	e002      	b.n	8006dbc <LoopFillZerobss>

08006db6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006db6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006db8:	f842 3b04 	str.w	r3, [r2], #4

08006dbc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006dbc:	4b09      	ldr	r3, [pc, #36]	; (8006de4 <LoopForever+0x16>)
	cmp	r2, r3
 8006dbe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006dc0:	d3f9      	bcc.n	8006db6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006dc2:	f7ff ffb3 	bl	8006d2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006dc6:	f000 f817 	bl	8006df8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006dca:	f7fe fd4d 	bl	8005868 <main>

08006dce <LoopForever>:

LoopForever:
    b LoopForever
 8006dce:	e7fe      	b.n	8006dce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006dd0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8006dd4:	080080d0 	.word	0x080080d0
	ldr	r0, =_sdata
 8006dd8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006ddc:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 8006de0:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 8006de4:	200007e4 	.word	0x200007e4

08006de8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006de8:	e7fe      	b.n	8006de8 <ADC1_2_IRQHandler>
	...

08006dec <__errno>:
 8006dec:	4b01      	ldr	r3, [pc, #4]	; (8006df4 <__errno+0x8>)
 8006dee:	6818      	ldr	r0, [r3, #0]
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	20000020 	.word	0x20000020

08006df8 <__libc_init_array>:
 8006df8:	b570      	push	{r4, r5, r6, lr}
 8006dfa:	4e0d      	ldr	r6, [pc, #52]	; (8006e30 <__libc_init_array+0x38>)
 8006dfc:	4c0d      	ldr	r4, [pc, #52]	; (8006e34 <__libc_init_array+0x3c>)
 8006dfe:	1ba4      	subs	r4, r4, r6
 8006e00:	10a4      	asrs	r4, r4, #2
 8006e02:	2500      	movs	r5, #0
 8006e04:	42a5      	cmp	r5, r4
 8006e06:	d109      	bne.n	8006e1c <__libc_init_array+0x24>
 8006e08:	4e0b      	ldr	r6, [pc, #44]	; (8006e38 <__libc_init_array+0x40>)
 8006e0a:	4c0c      	ldr	r4, [pc, #48]	; (8006e3c <__libc_init_array+0x44>)
 8006e0c:	f000 ff68 	bl	8007ce0 <_init>
 8006e10:	1ba4      	subs	r4, r4, r6
 8006e12:	10a4      	asrs	r4, r4, #2
 8006e14:	2500      	movs	r5, #0
 8006e16:	42a5      	cmp	r5, r4
 8006e18:	d105      	bne.n	8006e26 <__libc_init_array+0x2e>
 8006e1a:	bd70      	pop	{r4, r5, r6, pc}
 8006e1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e20:	4798      	blx	r3
 8006e22:	3501      	adds	r5, #1
 8006e24:	e7ee      	b.n	8006e04 <__libc_init_array+0xc>
 8006e26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e2a:	4798      	blx	r3
 8006e2c:	3501      	adds	r5, #1
 8006e2e:	e7f2      	b.n	8006e16 <__libc_init_array+0x1e>
 8006e30:	080080c8 	.word	0x080080c8
 8006e34:	080080c8 	.word	0x080080c8
 8006e38:	080080c8 	.word	0x080080c8
 8006e3c:	080080cc 	.word	0x080080cc

08006e40 <memset>:
 8006e40:	4402      	add	r2, r0
 8006e42:	4603      	mov	r3, r0
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d100      	bne.n	8006e4a <memset+0xa>
 8006e48:	4770      	bx	lr
 8006e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e4e:	e7f9      	b.n	8006e44 <memset+0x4>

08006e50 <iprintf>:
 8006e50:	b40f      	push	{r0, r1, r2, r3}
 8006e52:	4b0a      	ldr	r3, [pc, #40]	; (8006e7c <iprintf+0x2c>)
 8006e54:	b513      	push	{r0, r1, r4, lr}
 8006e56:	681c      	ldr	r4, [r3, #0]
 8006e58:	b124      	cbz	r4, 8006e64 <iprintf+0x14>
 8006e5a:	69a3      	ldr	r3, [r4, #24]
 8006e5c:	b913      	cbnz	r3, 8006e64 <iprintf+0x14>
 8006e5e:	4620      	mov	r0, r4
 8006e60:	f000 fa22 	bl	80072a8 <__sinit>
 8006e64:	ab05      	add	r3, sp, #20
 8006e66:	9a04      	ldr	r2, [sp, #16]
 8006e68:	68a1      	ldr	r1, [r4, #8]
 8006e6a:	9301      	str	r3, [sp, #4]
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	f000 fbdb 	bl	8007628 <_vfiprintf_r>
 8006e72:	b002      	add	sp, #8
 8006e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e78:	b004      	add	sp, #16
 8006e7a:	4770      	bx	lr
 8006e7c:	20000020 	.word	0x20000020

08006e80 <_puts_r>:
 8006e80:	b570      	push	{r4, r5, r6, lr}
 8006e82:	460e      	mov	r6, r1
 8006e84:	4605      	mov	r5, r0
 8006e86:	b118      	cbz	r0, 8006e90 <_puts_r+0x10>
 8006e88:	6983      	ldr	r3, [r0, #24]
 8006e8a:	b90b      	cbnz	r3, 8006e90 <_puts_r+0x10>
 8006e8c:	f000 fa0c 	bl	80072a8 <__sinit>
 8006e90:	69ab      	ldr	r3, [r5, #24]
 8006e92:	68ac      	ldr	r4, [r5, #8]
 8006e94:	b913      	cbnz	r3, 8006e9c <_puts_r+0x1c>
 8006e96:	4628      	mov	r0, r5
 8006e98:	f000 fa06 	bl	80072a8 <__sinit>
 8006e9c:	4b23      	ldr	r3, [pc, #140]	; (8006f2c <_puts_r+0xac>)
 8006e9e:	429c      	cmp	r4, r3
 8006ea0:	d117      	bne.n	8006ed2 <_puts_r+0x52>
 8006ea2:	686c      	ldr	r4, [r5, #4]
 8006ea4:	89a3      	ldrh	r3, [r4, #12]
 8006ea6:	071b      	lsls	r3, r3, #28
 8006ea8:	d51d      	bpl.n	8006ee6 <_puts_r+0x66>
 8006eaa:	6923      	ldr	r3, [r4, #16]
 8006eac:	b1db      	cbz	r3, 8006ee6 <_puts_r+0x66>
 8006eae:	3e01      	subs	r6, #1
 8006eb0:	68a3      	ldr	r3, [r4, #8]
 8006eb2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	60a3      	str	r3, [r4, #8]
 8006eba:	b9e9      	cbnz	r1, 8006ef8 <_puts_r+0x78>
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	da2e      	bge.n	8006f1e <_puts_r+0x9e>
 8006ec0:	4622      	mov	r2, r4
 8006ec2:	210a      	movs	r1, #10
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	f000 f83f 	bl	8006f48 <__swbuf_r>
 8006eca:	3001      	adds	r0, #1
 8006ecc:	d011      	beq.n	8006ef2 <_puts_r+0x72>
 8006ece:	200a      	movs	r0, #10
 8006ed0:	e011      	b.n	8006ef6 <_puts_r+0x76>
 8006ed2:	4b17      	ldr	r3, [pc, #92]	; (8006f30 <_puts_r+0xb0>)
 8006ed4:	429c      	cmp	r4, r3
 8006ed6:	d101      	bne.n	8006edc <_puts_r+0x5c>
 8006ed8:	68ac      	ldr	r4, [r5, #8]
 8006eda:	e7e3      	b.n	8006ea4 <_puts_r+0x24>
 8006edc:	4b15      	ldr	r3, [pc, #84]	; (8006f34 <_puts_r+0xb4>)
 8006ede:	429c      	cmp	r4, r3
 8006ee0:	bf08      	it	eq
 8006ee2:	68ec      	ldreq	r4, [r5, #12]
 8006ee4:	e7de      	b.n	8006ea4 <_puts_r+0x24>
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	4628      	mov	r0, r5
 8006eea:	f000 f87f 	bl	8006fec <__swsetup_r>
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	d0dd      	beq.n	8006eae <_puts_r+0x2e>
 8006ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef6:	bd70      	pop	{r4, r5, r6, pc}
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	da04      	bge.n	8006f06 <_puts_r+0x86>
 8006efc:	69a2      	ldr	r2, [r4, #24]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	dc06      	bgt.n	8006f10 <_puts_r+0x90>
 8006f02:	290a      	cmp	r1, #10
 8006f04:	d004      	beq.n	8006f10 <_puts_r+0x90>
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	1c5a      	adds	r2, r3, #1
 8006f0a:	6022      	str	r2, [r4, #0]
 8006f0c:	7019      	strb	r1, [r3, #0]
 8006f0e:	e7cf      	b.n	8006eb0 <_puts_r+0x30>
 8006f10:	4622      	mov	r2, r4
 8006f12:	4628      	mov	r0, r5
 8006f14:	f000 f818 	bl	8006f48 <__swbuf_r>
 8006f18:	3001      	adds	r0, #1
 8006f1a:	d1c9      	bne.n	8006eb0 <_puts_r+0x30>
 8006f1c:	e7e9      	b.n	8006ef2 <_puts_r+0x72>
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	200a      	movs	r0, #10
 8006f22:	1c5a      	adds	r2, r3, #1
 8006f24:	6022      	str	r2, [r4, #0]
 8006f26:	7018      	strb	r0, [r3, #0]
 8006f28:	e7e5      	b.n	8006ef6 <_puts_r+0x76>
 8006f2a:	bf00      	nop
 8006f2c:	0800804c 	.word	0x0800804c
 8006f30:	0800806c 	.word	0x0800806c
 8006f34:	0800802c 	.word	0x0800802c

08006f38 <puts>:
 8006f38:	4b02      	ldr	r3, [pc, #8]	; (8006f44 <puts+0xc>)
 8006f3a:	4601      	mov	r1, r0
 8006f3c:	6818      	ldr	r0, [r3, #0]
 8006f3e:	f7ff bf9f 	b.w	8006e80 <_puts_r>
 8006f42:	bf00      	nop
 8006f44:	20000020 	.word	0x20000020

08006f48 <__swbuf_r>:
 8006f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4a:	460e      	mov	r6, r1
 8006f4c:	4614      	mov	r4, r2
 8006f4e:	4605      	mov	r5, r0
 8006f50:	b118      	cbz	r0, 8006f5a <__swbuf_r+0x12>
 8006f52:	6983      	ldr	r3, [r0, #24]
 8006f54:	b90b      	cbnz	r3, 8006f5a <__swbuf_r+0x12>
 8006f56:	f000 f9a7 	bl	80072a8 <__sinit>
 8006f5a:	4b21      	ldr	r3, [pc, #132]	; (8006fe0 <__swbuf_r+0x98>)
 8006f5c:	429c      	cmp	r4, r3
 8006f5e:	d12a      	bne.n	8006fb6 <__swbuf_r+0x6e>
 8006f60:	686c      	ldr	r4, [r5, #4]
 8006f62:	69a3      	ldr	r3, [r4, #24]
 8006f64:	60a3      	str	r3, [r4, #8]
 8006f66:	89a3      	ldrh	r3, [r4, #12]
 8006f68:	071a      	lsls	r2, r3, #28
 8006f6a:	d52e      	bpl.n	8006fca <__swbuf_r+0x82>
 8006f6c:	6923      	ldr	r3, [r4, #16]
 8006f6e:	b363      	cbz	r3, 8006fca <__swbuf_r+0x82>
 8006f70:	6923      	ldr	r3, [r4, #16]
 8006f72:	6820      	ldr	r0, [r4, #0]
 8006f74:	1ac0      	subs	r0, r0, r3
 8006f76:	6963      	ldr	r3, [r4, #20]
 8006f78:	b2f6      	uxtb	r6, r6
 8006f7a:	4283      	cmp	r3, r0
 8006f7c:	4637      	mov	r7, r6
 8006f7e:	dc04      	bgt.n	8006f8a <__swbuf_r+0x42>
 8006f80:	4621      	mov	r1, r4
 8006f82:	4628      	mov	r0, r5
 8006f84:	f000 f926 	bl	80071d4 <_fflush_r>
 8006f88:	bb28      	cbnz	r0, 8006fd6 <__swbuf_r+0x8e>
 8006f8a:	68a3      	ldr	r3, [r4, #8]
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	60a3      	str	r3, [r4, #8]
 8006f90:	6823      	ldr	r3, [r4, #0]
 8006f92:	1c5a      	adds	r2, r3, #1
 8006f94:	6022      	str	r2, [r4, #0]
 8006f96:	701e      	strb	r6, [r3, #0]
 8006f98:	6963      	ldr	r3, [r4, #20]
 8006f9a:	3001      	adds	r0, #1
 8006f9c:	4283      	cmp	r3, r0
 8006f9e:	d004      	beq.n	8006faa <__swbuf_r+0x62>
 8006fa0:	89a3      	ldrh	r3, [r4, #12]
 8006fa2:	07db      	lsls	r3, r3, #31
 8006fa4:	d519      	bpl.n	8006fda <__swbuf_r+0x92>
 8006fa6:	2e0a      	cmp	r6, #10
 8006fa8:	d117      	bne.n	8006fda <__swbuf_r+0x92>
 8006faa:	4621      	mov	r1, r4
 8006fac:	4628      	mov	r0, r5
 8006fae:	f000 f911 	bl	80071d4 <_fflush_r>
 8006fb2:	b190      	cbz	r0, 8006fda <__swbuf_r+0x92>
 8006fb4:	e00f      	b.n	8006fd6 <__swbuf_r+0x8e>
 8006fb6:	4b0b      	ldr	r3, [pc, #44]	; (8006fe4 <__swbuf_r+0x9c>)
 8006fb8:	429c      	cmp	r4, r3
 8006fba:	d101      	bne.n	8006fc0 <__swbuf_r+0x78>
 8006fbc:	68ac      	ldr	r4, [r5, #8]
 8006fbe:	e7d0      	b.n	8006f62 <__swbuf_r+0x1a>
 8006fc0:	4b09      	ldr	r3, [pc, #36]	; (8006fe8 <__swbuf_r+0xa0>)
 8006fc2:	429c      	cmp	r4, r3
 8006fc4:	bf08      	it	eq
 8006fc6:	68ec      	ldreq	r4, [r5, #12]
 8006fc8:	e7cb      	b.n	8006f62 <__swbuf_r+0x1a>
 8006fca:	4621      	mov	r1, r4
 8006fcc:	4628      	mov	r0, r5
 8006fce:	f000 f80d 	bl	8006fec <__swsetup_r>
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	d0cc      	beq.n	8006f70 <__swbuf_r+0x28>
 8006fd6:	f04f 37ff 	mov.w	r7, #4294967295
 8006fda:	4638      	mov	r0, r7
 8006fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	0800804c 	.word	0x0800804c
 8006fe4:	0800806c 	.word	0x0800806c
 8006fe8:	0800802c 	.word	0x0800802c

08006fec <__swsetup_r>:
 8006fec:	4b32      	ldr	r3, [pc, #200]	; (80070b8 <__swsetup_r+0xcc>)
 8006fee:	b570      	push	{r4, r5, r6, lr}
 8006ff0:	681d      	ldr	r5, [r3, #0]
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	460c      	mov	r4, r1
 8006ff6:	b125      	cbz	r5, 8007002 <__swsetup_r+0x16>
 8006ff8:	69ab      	ldr	r3, [r5, #24]
 8006ffa:	b913      	cbnz	r3, 8007002 <__swsetup_r+0x16>
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	f000 f953 	bl	80072a8 <__sinit>
 8007002:	4b2e      	ldr	r3, [pc, #184]	; (80070bc <__swsetup_r+0xd0>)
 8007004:	429c      	cmp	r4, r3
 8007006:	d10f      	bne.n	8007028 <__swsetup_r+0x3c>
 8007008:	686c      	ldr	r4, [r5, #4]
 800700a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800700e:	b29a      	uxth	r2, r3
 8007010:	0715      	lsls	r5, r2, #28
 8007012:	d42c      	bmi.n	800706e <__swsetup_r+0x82>
 8007014:	06d0      	lsls	r0, r2, #27
 8007016:	d411      	bmi.n	800703c <__swsetup_r+0x50>
 8007018:	2209      	movs	r2, #9
 800701a:	6032      	str	r2, [r6, #0]
 800701c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007020:	81a3      	strh	r3, [r4, #12]
 8007022:	f04f 30ff 	mov.w	r0, #4294967295
 8007026:	e03e      	b.n	80070a6 <__swsetup_r+0xba>
 8007028:	4b25      	ldr	r3, [pc, #148]	; (80070c0 <__swsetup_r+0xd4>)
 800702a:	429c      	cmp	r4, r3
 800702c:	d101      	bne.n	8007032 <__swsetup_r+0x46>
 800702e:	68ac      	ldr	r4, [r5, #8]
 8007030:	e7eb      	b.n	800700a <__swsetup_r+0x1e>
 8007032:	4b24      	ldr	r3, [pc, #144]	; (80070c4 <__swsetup_r+0xd8>)
 8007034:	429c      	cmp	r4, r3
 8007036:	bf08      	it	eq
 8007038:	68ec      	ldreq	r4, [r5, #12]
 800703a:	e7e6      	b.n	800700a <__swsetup_r+0x1e>
 800703c:	0751      	lsls	r1, r2, #29
 800703e:	d512      	bpl.n	8007066 <__swsetup_r+0x7a>
 8007040:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007042:	b141      	cbz	r1, 8007056 <__swsetup_r+0x6a>
 8007044:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007048:	4299      	cmp	r1, r3
 800704a:	d002      	beq.n	8007052 <__swsetup_r+0x66>
 800704c:	4630      	mov	r0, r6
 800704e:	f000 fa19 	bl	8007484 <_free_r>
 8007052:	2300      	movs	r3, #0
 8007054:	6363      	str	r3, [r4, #52]	; 0x34
 8007056:	89a3      	ldrh	r3, [r4, #12]
 8007058:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800705c:	81a3      	strh	r3, [r4, #12]
 800705e:	2300      	movs	r3, #0
 8007060:	6063      	str	r3, [r4, #4]
 8007062:	6923      	ldr	r3, [r4, #16]
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	89a3      	ldrh	r3, [r4, #12]
 8007068:	f043 0308 	orr.w	r3, r3, #8
 800706c:	81a3      	strh	r3, [r4, #12]
 800706e:	6923      	ldr	r3, [r4, #16]
 8007070:	b94b      	cbnz	r3, 8007086 <__swsetup_r+0x9a>
 8007072:	89a3      	ldrh	r3, [r4, #12]
 8007074:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800707c:	d003      	beq.n	8007086 <__swsetup_r+0x9a>
 800707e:	4621      	mov	r1, r4
 8007080:	4630      	mov	r0, r6
 8007082:	f000 f9bf 	bl	8007404 <__smakebuf_r>
 8007086:	89a2      	ldrh	r2, [r4, #12]
 8007088:	f012 0301 	ands.w	r3, r2, #1
 800708c:	d00c      	beq.n	80070a8 <__swsetup_r+0xbc>
 800708e:	2300      	movs	r3, #0
 8007090:	60a3      	str	r3, [r4, #8]
 8007092:	6963      	ldr	r3, [r4, #20]
 8007094:	425b      	negs	r3, r3
 8007096:	61a3      	str	r3, [r4, #24]
 8007098:	6923      	ldr	r3, [r4, #16]
 800709a:	b953      	cbnz	r3, 80070b2 <__swsetup_r+0xc6>
 800709c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070a0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80070a4:	d1ba      	bne.n	800701c <__swsetup_r+0x30>
 80070a6:	bd70      	pop	{r4, r5, r6, pc}
 80070a8:	0792      	lsls	r2, r2, #30
 80070aa:	bf58      	it	pl
 80070ac:	6963      	ldrpl	r3, [r4, #20]
 80070ae:	60a3      	str	r3, [r4, #8]
 80070b0:	e7f2      	b.n	8007098 <__swsetup_r+0xac>
 80070b2:	2000      	movs	r0, #0
 80070b4:	e7f7      	b.n	80070a6 <__swsetup_r+0xba>
 80070b6:	bf00      	nop
 80070b8:	20000020 	.word	0x20000020
 80070bc:	0800804c 	.word	0x0800804c
 80070c0:	0800806c 	.word	0x0800806c
 80070c4:	0800802c 	.word	0x0800802c

080070c8 <__sflush_r>:
 80070c8:	898a      	ldrh	r2, [r1, #12]
 80070ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ce:	4605      	mov	r5, r0
 80070d0:	0710      	lsls	r0, r2, #28
 80070d2:	460c      	mov	r4, r1
 80070d4:	d458      	bmi.n	8007188 <__sflush_r+0xc0>
 80070d6:	684b      	ldr	r3, [r1, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	dc05      	bgt.n	80070e8 <__sflush_r+0x20>
 80070dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80070de:	2b00      	cmp	r3, #0
 80070e0:	dc02      	bgt.n	80070e8 <__sflush_r+0x20>
 80070e2:	2000      	movs	r0, #0
 80070e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070ea:	2e00      	cmp	r6, #0
 80070ec:	d0f9      	beq.n	80070e2 <__sflush_r+0x1a>
 80070ee:	2300      	movs	r3, #0
 80070f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80070f4:	682f      	ldr	r7, [r5, #0]
 80070f6:	6a21      	ldr	r1, [r4, #32]
 80070f8:	602b      	str	r3, [r5, #0]
 80070fa:	d032      	beq.n	8007162 <__sflush_r+0x9a>
 80070fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80070fe:	89a3      	ldrh	r3, [r4, #12]
 8007100:	075a      	lsls	r2, r3, #29
 8007102:	d505      	bpl.n	8007110 <__sflush_r+0x48>
 8007104:	6863      	ldr	r3, [r4, #4]
 8007106:	1ac0      	subs	r0, r0, r3
 8007108:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800710a:	b10b      	cbz	r3, 8007110 <__sflush_r+0x48>
 800710c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800710e:	1ac0      	subs	r0, r0, r3
 8007110:	2300      	movs	r3, #0
 8007112:	4602      	mov	r2, r0
 8007114:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007116:	6a21      	ldr	r1, [r4, #32]
 8007118:	4628      	mov	r0, r5
 800711a:	47b0      	blx	r6
 800711c:	1c43      	adds	r3, r0, #1
 800711e:	89a3      	ldrh	r3, [r4, #12]
 8007120:	d106      	bne.n	8007130 <__sflush_r+0x68>
 8007122:	6829      	ldr	r1, [r5, #0]
 8007124:	291d      	cmp	r1, #29
 8007126:	d848      	bhi.n	80071ba <__sflush_r+0xf2>
 8007128:	4a29      	ldr	r2, [pc, #164]	; (80071d0 <__sflush_r+0x108>)
 800712a:	40ca      	lsrs	r2, r1
 800712c:	07d6      	lsls	r6, r2, #31
 800712e:	d544      	bpl.n	80071ba <__sflush_r+0xf2>
 8007130:	2200      	movs	r2, #0
 8007132:	6062      	str	r2, [r4, #4]
 8007134:	04d9      	lsls	r1, r3, #19
 8007136:	6922      	ldr	r2, [r4, #16]
 8007138:	6022      	str	r2, [r4, #0]
 800713a:	d504      	bpl.n	8007146 <__sflush_r+0x7e>
 800713c:	1c42      	adds	r2, r0, #1
 800713e:	d101      	bne.n	8007144 <__sflush_r+0x7c>
 8007140:	682b      	ldr	r3, [r5, #0]
 8007142:	b903      	cbnz	r3, 8007146 <__sflush_r+0x7e>
 8007144:	6560      	str	r0, [r4, #84]	; 0x54
 8007146:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007148:	602f      	str	r7, [r5, #0]
 800714a:	2900      	cmp	r1, #0
 800714c:	d0c9      	beq.n	80070e2 <__sflush_r+0x1a>
 800714e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007152:	4299      	cmp	r1, r3
 8007154:	d002      	beq.n	800715c <__sflush_r+0x94>
 8007156:	4628      	mov	r0, r5
 8007158:	f000 f994 	bl	8007484 <_free_r>
 800715c:	2000      	movs	r0, #0
 800715e:	6360      	str	r0, [r4, #52]	; 0x34
 8007160:	e7c0      	b.n	80070e4 <__sflush_r+0x1c>
 8007162:	2301      	movs	r3, #1
 8007164:	4628      	mov	r0, r5
 8007166:	47b0      	blx	r6
 8007168:	1c41      	adds	r1, r0, #1
 800716a:	d1c8      	bne.n	80070fe <__sflush_r+0x36>
 800716c:	682b      	ldr	r3, [r5, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d0c5      	beq.n	80070fe <__sflush_r+0x36>
 8007172:	2b1d      	cmp	r3, #29
 8007174:	d001      	beq.n	800717a <__sflush_r+0xb2>
 8007176:	2b16      	cmp	r3, #22
 8007178:	d101      	bne.n	800717e <__sflush_r+0xb6>
 800717a:	602f      	str	r7, [r5, #0]
 800717c:	e7b1      	b.n	80070e2 <__sflush_r+0x1a>
 800717e:	89a3      	ldrh	r3, [r4, #12]
 8007180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007184:	81a3      	strh	r3, [r4, #12]
 8007186:	e7ad      	b.n	80070e4 <__sflush_r+0x1c>
 8007188:	690f      	ldr	r7, [r1, #16]
 800718a:	2f00      	cmp	r7, #0
 800718c:	d0a9      	beq.n	80070e2 <__sflush_r+0x1a>
 800718e:	0793      	lsls	r3, r2, #30
 8007190:	680e      	ldr	r6, [r1, #0]
 8007192:	bf08      	it	eq
 8007194:	694b      	ldreq	r3, [r1, #20]
 8007196:	600f      	str	r7, [r1, #0]
 8007198:	bf18      	it	ne
 800719a:	2300      	movne	r3, #0
 800719c:	eba6 0807 	sub.w	r8, r6, r7
 80071a0:	608b      	str	r3, [r1, #8]
 80071a2:	f1b8 0f00 	cmp.w	r8, #0
 80071a6:	dd9c      	ble.n	80070e2 <__sflush_r+0x1a>
 80071a8:	4643      	mov	r3, r8
 80071aa:	463a      	mov	r2, r7
 80071ac:	6a21      	ldr	r1, [r4, #32]
 80071ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80071b0:	4628      	mov	r0, r5
 80071b2:	47b0      	blx	r6
 80071b4:	2800      	cmp	r0, #0
 80071b6:	dc06      	bgt.n	80071c6 <__sflush_r+0xfe>
 80071b8:	89a3      	ldrh	r3, [r4, #12]
 80071ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071be:	81a3      	strh	r3, [r4, #12]
 80071c0:	f04f 30ff 	mov.w	r0, #4294967295
 80071c4:	e78e      	b.n	80070e4 <__sflush_r+0x1c>
 80071c6:	4407      	add	r7, r0
 80071c8:	eba8 0800 	sub.w	r8, r8, r0
 80071cc:	e7e9      	b.n	80071a2 <__sflush_r+0xda>
 80071ce:	bf00      	nop
 80071d0:	20400001 	.word	0x20400001

080071d4 <_fflush_r>:
 80071d4:	b538      	push	{r3, r4, r5, lr}
 80071d6:	690b      	ldr	r3, [r1, #16]
 80071d8:	4605      	mov	r5, r0
 80071da:	460c      	mov	r4, r1
 80071dc:	b1db      	cbz	r3, 8007216 <_fflush_r+0x42>
 80071de:	b118      	cbz	r0, 80071e8 <_fflush_r+0x14>
 80071e0:	6983      	ldr	r3, [r0, #24]
 80071e2:	b90b      	cbnz	r3, 80071e8 <_fflush_r+0x14>
 80071e4:	f000 f860 	bl	80072a8 <__sinit>
 80071e8:	4b0c      	ldr	r3, [pc, #48]	; (800721c <_fflush_r+0x48>)
 80071ea:	429c      	cmp	r4, r3
 80071ec:	d109      	bne.n	8007202 <_fflush_r+0x2e>
 80071ee:	686c      	ldr	r4, [r5, #4]
 80071f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071f4:	b17b      	cbz	r3, 8007216 <_fflush_r+0x42>
 80071f6:	4621      	mov	r1, r4
 80071f8:	4628      	mov	r0, r5
 80071fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071fe:	f7ff bf63 	b.w	80070c8 <__sflush_r>
 8007202:	4b07      	ldr	r3, [pc, #28]	; (8007220 <_fflush_r+0x4c>)
 8007204:	429c      	cmp	r4, r3
 8007206:	d101      	bne.n	800720c <_fflush_r+0x38>
 8007208:	68ac      	ldr	r4, [r5, #8]
 800720a:	e7f1      	b.n	80071f0 <_fflush_r+0x1c>
 800720c:	4b05      	ldr	r3, [pc, #20]	; (8007224 <_fflush_r+0x50>)
 800720e:	429c      	cmp	r4, r3
 8007210:	bf08      	it	eq
 8007212:	68ec      	ldreq	r4, [r5, #12]
 8007214:	e7ec      	b.n	80071f0 <_fflush_r+0x1c>
 8007216:	2000      	movs	r0, #0
 8007218:	bd38      	pop	{r3, r4, r5, pc}
 800721a:	bf00      	nop
 800721c:	0800804c 	.word	0x0800804c
 8007220:	0800806c 	.word	0x0800806c
 8007224:	0800802c 	.word	0x0800802c

08007228 <std>:
 8007228:	2300      	movs	r3, #0
 800722a:	b510      	push	{r4, lr}
 800722c:	4604      	mov	r4, r0
 800722e:	e9c0 3300 	strd	r3, r3, [r0]
 8007232:	6083      	str	r3, [r0, #8]
 8007234:	8181      	strh	r1, [r0, #12]
 8007236:	6643      	str	r3, [r0, #100]	; 0x64
 8007238:	81c2      	strh	r2, [r0, #14]
 800723a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800723e:	6183      	str	r3, [r0, #24]
 8007240:	4619      	mov	r1, r3
 8007242:	2208      	movs	r2, #8
 8007244:	305c      	adds	r0, #92	; 0x5c
 8007246:	f7ff fdfb 	bl	8006e40 <memset>
 800724a:	4b05      	ldr	r3, [pc, #20]	; (8007260 <std+0x38>)
 800724c:	6263      	str	r3, [r4, #36]	; 0x24
 800724e:	4b05      	ldr	r3, [pc, #20]	; (8007264 <std+0x3c>)
 8007250:	62a3      	str	r3, [r4, #40]	; 0x28
 8007252:	4b05      	ldr	r3, [pc, #20]	; (8007268 <std+0x40>)
 8007254:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007256:	4b05      	ldr	r3, [pc, #20]	; (800726c <std+0x44>)
 8007258:	6224      	str	r4, [r4, #32]
 800725a:	6323      	str	r3, [r4, #48]	; 0x30
 800725c:	bd10      	pop	{r4, pc}
 800725e:	bf00      	nop
 8007260:	08007b85 	.word	0x08007b85
 8007264:	08007ba7 	.word	0x08007ba7
 8007268:	08007bdf 	.word	0x08007bdf
 800726c:	08007c03 	.word	0x08007c03

08007270 <_cleanup_r>:
 8007270:	4901      	ldr	r1, [pc, #4]	; (8007278 <_cleanup_r+0x8>)
 8007272:	f000 b885 	b.w	8007380 <_fwalk_reent>
 8007276:	bf00      	nop
 8007278:	080071d5 	.word	0x080071d5

0800727c <__sfmoreglue>:
 800727c:	b570      	push	{r4, r5, r6, lr}
 800727e:	1e4a      	subs	r2, r1, #1
 8007280:	2568      	movs	r5, #104	; 0x68
 8007282:	4355      	muls	r5, r2
 8007284:	460e      	mov	r6, r1
 8007286:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800728a:	f000 f949 	bl	8007520 <_malloc_r>
 800728e:	4604      	mov	r4, r0
 8007290:	b140      	cbz	r0, 80072a4 <__sfmoreglue+0x28>
 8007292:	2100      	movs	r1, #0
 8007294:	e9c0 1600 	strd	r1, r6, [r0]
 8007298:	300c      	adds	r0, #12
 800729a:	60a0      	str	r0, [r4, #8]
 800729c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80072a0:	f7ff fdce 	bl	8006e40 <memset>
 80072a4:	4620      	mov	r0, r4
 80072a6:	bd70      	pop	{r4, r5, r6, pc}

080072a8 <__sinit>:
 80072a8:	6983      	ldr	r3, [r0, #24]
 80072aa:	b510      	push	{r4, lr}
 80072ac:	4604      	mov	r4, r0
 80072ae:	bb33      	cbnz	r3, 80072fe <__sinit+0x56>
 80072b0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80072b4:	6503      	str	r3, [r0, #80]	; 0x50
 80072b6:	4b12      	ldr	r3, [pc, #72]	; (8007300 <__sinit+0x58>)
 80072b8:	4a12      	ldr	r2, [pc, #72]	; (8007304 <__sinit+0x5c>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6282      	str	r2, [r0, #40]	; 0x28
 80072be:	4298      	cmp	r0, r3
 80072c0:	bf04      	itt	eq
 80072c2:	2301      	moveq	r3, #1
 80072c4:	6183      	streq	r3, [r0, #24]
 80072c6:	f000 f81f 	bl	8007308 <__sfp>
 80072ca:	6060      	str	r0, [r4, #4]
 80072cc:	4620      	mov	r0, r4
 80072ce:	f000 f81b 	bl	8007308 <__sfp>
 80072d2:	60a0      	str	r0, [r4, #8]
 80072d4:	4620      	mov	r0, r4
 80072d6:	f000 f817 	bl	8007308 <__sfp>
 80072da:	2200      	movs	r2, #0
 80072dc:	60e0      	str	r0, [r4, #12]
 80072de:	2104      	movs	r1, #4
 80072e0:	6860      	ldr	r0, [r4, #4]
 80072e2:	f7ff ffa1 	bl	8007228 <std>
 80072e6:	2201      	movs	r2, #1
 80072e8:	2109      	movs	r1, #9
 80072ea:	68a0      	ldr	r0, [r4, #8]
 80072ec:	f7ff ff9c 	bl	8007228 <std>
 80072f0:	2202      	movs	r2, #2
 80072f2:	2112      	movs	r1, #18
 80072f4:	68e0      	ldr	r0, [r4, #12]
 80072f6:	f7ff ff97 	bl	8007228 <std>
 80072fa:	2301      	movs	r3, #1
 80072fc:	61a3      	str	r3, [r4, #24]
 80072fe:	bd10      	pop	{r4, pc}
 8007300:	08008028 	.word	0x08008028
 8007304:	08007271 	.word	0x08007271

08007308 <__sfp>:
 8007308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730a:	4b1b      	ldr	r3, [pc, #108]	; (8007378 <__sfp+0x70>)
 800730c:	681e      	ldr	r6, [r3, #0]
 800730e:	69b3      	ldr	r3, [r6, #24]
 8007310:	4607      	mov	r7, r0
 8007312:	b913      	cbnz	r3, 800731a <__sfp+0x12>
 8007314:	4630      	mov	r0, r6
 8007316:	f7ff ffc7 	bl	80072a8 <__sinit>
 800731a:	3648      	adds	r6, #72	; 0x48
 800731c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007320:	3b01      	subs	r3, #1
 8007322:	d503      	bpl.n	800732c <__sfp+0x24>
 8007324:	6833      	ldr	r3, [r6, #0]
 8007326:	b133      	cbz	r3, 8007336 <__sfp+0x2e>
 8007328:	6836      	ldr	r6, [r6, #0]
 800732a:	e7f7      	b.n	800731c <__sfp+0x14>
 800732c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007330:	b16d      	cbz	r5, 800734e <__sfp+0x46>
 8007332:	3468      	adds	r4, #104	; 0x68
 8007334:	e7f4      	b.n	8007320 <__sfp+0x18>
 8007336:	2104      	movs	r1, #4
 8007338:	4638      	mov	r0, r7
 800733a:	f7ff ff9f 	bl	800727c <__sfmoreglue>
 800733e:	6030      	str	r0, [r6, #0]
 8007340:	2800      	cmp	r0, #0
 8007342:	d1f1      	bne.n	8007328 <__sfp+0x20>
 8007344:	230c      	movs	r3, #12
 8007346:	603b      	str	r3, [r7, #0]
 8007348:	4604      	mov	r4, r0
 800734a:	4620      	mov	r0, r4
 800734c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800734e:	4b0b      	ldr	r3, [pc, #44]	; (800737c <__sfp+0x74>)
 8007350:	6665      	str	r5, [r4, #100]	; 0x64
 8007352:	e9c4 5500 	strd	r5, r5, [r4]
 8007356:	60a5      	str	r5, [r4, #8]
 8007358:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800735c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007360:	2208      	movs	r2, #8
 8007362:	4629      	mov	r1, r5
 8007364:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007368:	f7ff fd6a 	bl	8006e40 <memset>
 800736c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007370:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007374:	e7e9      	b.n	800734a <__sfp+0x42>
 8007376:	bf00      	nop
 8007378:	08008028 	.word	0x08008028
 800737c:	ffff0001 	.word	0xffff0001

08007380 <_fwalk_reent>:
 8007380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007384:	4680      	mov	r8, r0
 8007386:	4689      	mov	r9, r1
 8007388:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800738c:	2600      	movs	r6, #0
 800738e:	b914      	cbnz	r4, 8007396 <_fwalk_reent+0x16>
 8007390:	4630      	mov	r0, r6
 8007392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007396:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800739a:	3f01      	subs	r7, #1
 800739c:	d501      	bpl.n	80073a2 <_fwalk_reent+0x22>
 800739e:	6824      	ldr	r4, [r4, #0]
 80073a0:	e7f5      	b.n	800738e <_fwalk_reent+0xe>
 80073a2:	89ab      	ldrh	r3, [r5, #12]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d907      	bls.n	80073b8 <_fwalk_reent+0x38>
 80073a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073ac:	3301      	adds	r3, #1
 80073ae:	d003      	beq.n	80073b8 <_fwalk_reent+0x38>
 80073b0:	4629      	mov	r1, r5
 80073b2:	4640      	mov	r0, r8
 80073b4:	47c8      	blx	r9
 80073b6:	4306      	orrs	r6, r0
 80073b8:	3568      	adds	r5, #104	; 0x68
 80073ba:	e7ee      	b.n	800739a <_fwalk_reent+0x1a>

080073bc <__swhatbuf_r>:
 80073bc:	b570      	push	{r4, r5, r6, lr}
 80073be:	460e      	mov	r6, r1
 80073c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073c4:	2900      	cmp	r1, #0
 80073c6:	b096      	sub	sp, #88	; 0x58
 80073c8:	4614      	mov	r4, r2
 80073ca:	461d      	mov	r5, r3
 80073cc:	da07      	bge.n	80073de <__swhatbuf_r+0x22>
 80073ce:	2300      	movs	r3, #0
 80073d0:	602b      	str	r3, [r5, #0]
 80073d2:	89b3      	ldrh	r3, [r6, #12]
 80073d4:	061a      	lsls	r2, r3, #24
 80073d6:	d410      	bmi.n	80073fa <__swhatbuf_r+0x3e>
 80073d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073dc:	e00e      	b.n	80073fc <__swhatbuf_r+0x40>
 80073de:	466a      	mov	r2, sp
 80073e0:	f000 fc36 	bl	8007c50 <_fstat_r>
 80073e4:	2800      	cmp	r0, #0
 80073e6:	dbf2      	blt.n	80073ce <__swhatbuf_r+0x12>
 80073e8:	9a01      	ldr	r2, [sp, #4]
 80073ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80073ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80073f2:	425a      	negs	r2, r3
 80073f4:	415a      	adcs	r2, r3
 80073f6:	602a      	str	r2, [r5, #0]
 80073f8:	e7ee      	b.n	80073d8 <__swhatbuf_r+0x1c>
 80073fa:	2340      	movs	r3, #64	; 0x40
 80073fc:	2000      	movs	r0, #0
 80073fe:	6023      	str	r3, [r4, #0]
 8007400:	b016      	add	sp, #88	; 0x58
 8007402:	bd70      	pop	{r4, r5, r6, pc}

08007404 <__smakebuf_r>:
 8007404:	898b      	ldrh	r3, [r1, #12]
 8007406:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007408:	079d      	lsls	r5, r3, #30
 800740a:	4606      	mov	r6, r0
 800740c:	460c      	mov	r4, r1
 800740e:	d507      	bpl.n	8007420 <__smakebuf_r+0x1c>
 8007410:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007414:	6023      	str	r3, [r4, #0]
 8007416:	6123      	str	r3, [r4, #16]
 8007418:	2301      	movs	r3, #1
 800741a:	6163      	str	r3, [r4, #20]
 800741c:	b002      	add	sp, #8
 800741e:	bd70      	pop	{r4, r5, r6, pc}
 8007420:	ab01      	add	r3, sp, #4
 8007422:	466a      	mov	r2, sp
 8007424:	f7ff ffca 	bl	80073bc <__swhatbuf_r>
 8007428:	9900      	ldr	r1, [sp, #0]
 800742a:	4605      	mov	r5, r0
 800742c:	4630      	mov	r0, r6
 800742e:	f000 f877 	bl	8007520 <_malloc_r>
 8007432:	b948      	cbnz	r0, 8007448 <__smakebuf_r+0x44>
 8007434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007438:	059a      	lsls	r2, r3, #22
 800743a:	d4ef      	bmi.n	800741c <__smakebuf_r+0x18>
 800743c:	f023 0303 	bic.w	r3, r3, #3
 8007440:	f043 0302 	orr.w	r3, r3, #2
 8007444:	81a3      	strh	r3, [r4, #12]
 8007446:	e7e3      	b.n	8007410 <__smakebuf_r+0xc>
 8007448:	4b0d      	ldr	r3, [pc, #52]	; (8007480 <__smakebuf_r+0x7c>)
 800744a:	62b3      	str	r3, [r6, #40]	; 0x28
 800744c:	89a3      	ldrh	r3, [r4, #12]
 800744e:	6020      	str	r0, [r4, #0]
 8007450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007454:	81a3      	strh	r3, [r4, #12]
 8007456:	9b00      	ldr	r3, [sp, #0]
 8007458:	6163      	str	r3, [r4, #20]
 800745a:	9b01      	ldr	r3, [sp, #4]
 800745c:	6120      	str	r0, [r4, #16]
 800745e:	b15b      	cbz	r3, 8007478 <__smakebuf_r+0x74>
 8007460:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007464:	4630      	mov	r0, r6
 8007466:	f000 fc05 	bl	8007c74 <_isatty_r>
 800746a:	b128      	cbz	r0, 8007478 <__smakebuf_r+0x74>
 800746c:	89a3      	ldrh	r3, [r4, #12]
 800746e:	f023 0303 	bic.w	r3, r3, #3
 8007472:	f043 0301 	orr.w	r3, r3, #1
 8007476:	81a3      	strh	r3, [r4, #12]
 8007478:	89a3      	ldrh	r3, [r4, #12]
 800747a:	431d      	orrs	r5, r3
 800747c:	81a5      	strh	r5, [r4, #12]
 800747e:	e7cd      	b.n	800741c <__smakebuf_r+0x18>
 8007480:	08007271 	.word	0x08007271

08007484 <_free_r>:
 8007484:	b538      	push	{r3, r4, r5, lr}
 8007486:	4605      	mov	r5, r0
 8007488:	2900      	cmp	r1, #0
 800748a:	d045      	beq.n	8007518 <_free_r+0x94>
 800748c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007490:	1f0c      	subs	r4, r1, #4
 8007492:	2b00      	cmp	r3, #0
 8007494:	bfb8      	it	lt
 8007496:	18e4      	addlt	r4, r4, r3
 8007498:	f000 fc0e 	bl	8007cb8 <__malloc_lock>
 800749c:	4a1f      	ldr	r2, [pc, #124]	; (800751c <_free_r+0x98>)
 800749e:	6813      	ldr	r3, [r2, #0]
 80074a0:	4610      	mov	r0, r2
 80074a2:	b933      	cbnz	r3, 80074b2 <_free_r+0x2e>
 80074a4:	6063      	str	r3, [r4, #4]
 80074a6:	6014      	str	r4, [r2, #0]
 80074a8:	4628      	mov	r0, r5
 80074aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074ae:	f000 bc04 	b.w	8007cba <__malloc_unlock>
 80074b2:	42a3      	cmp	r3, r4
 80074b4:	d90c      	bls.n	80074d0 <_free_r+0x4c>
 80074b6:	6821      	ldr	r1, [r4, #0]
 80074b8:	1862      	adds	r2, r4, r1
 80074ba:	4293      	cmp	r3, r2
 80074bc:	bf04      	itt	eq
 80074be:	681a      	ldreq	r2, [r3, #0]
 80074c0:	685b      	ldreq	r3, [r3, #4]
 80074c2:	6063      	str	r3, [r4, #4]
 80074c4:	bf04      	itt	eq
 80074c6:	1852      	addeq	r2, r2, r1
 80074c8:	6022      	streq	r2, [r4, #0]
 80074ca:	6004      	str	r4, [r0, #0]
 80074cc:	e7ec      	b.n	80074a8 <_free_r+0x24>
 80074ce:	4613      	mov	r3, r2
 80074d0:	685a      	ldr	r2, [r3, #4]
 80074d2:	b10a      	cbz	r2, 80074d8 <_free_r+0x54>
 80074d4:	42a2      	cmp	r2, r4
 80074d6:	d9fa      	bls.n	80074ce <_free_r+0x4a>
 80074d8:	6819      	ldr	r1, [r3, #0]
 80074da:	1858      	adds	r0, r3, r1
 80074dc:	42a0      	cmp	r0, r4
 80074de:	d10b      	bne.n	80074f8 <_free_r+0x74>
 80074e0:	6820      	ldr	r0, [r4, #0]
 80074e2:	4401      	add	r1, r0
 80074e4:	1858      	adds	r0, r3, r1
 80074e6:	4282      	cmp	r2, r0
 80074e8:	6019      	str	r1, [r3, #0]
 80074ea:	d1dd      	bne.n	80074a8 <_free_r+0x24>
 80074ec:	6810      	ldr	r0, [r2, #0]
 80074ee:	6852      	ldr	r2, [r2, #4]
 80074f0:	605a      	str	r2, [r3, #4]
 80074f2:	4401      	add	r1, r0
 80074f4:	6019      	str	r1, [r3, #0]
 80074f6:	e7d7      	b.n	80074a8 <_free_r+0x24>
 80074f8:	d902      	bls.n	8007500 <_free_r+0x7c>
 80074fa:	230c      	movs	r3, #12
 80074fc:	602b      	str	r3, [r5, #0]
 80074fe:	e7d3      	b.n	80074a8 <_free_r+0x24>
 8007500:	6820      	ldr	r0, [r4, #0]
 8007502:	1821      	adds	r1, r4, r0
 8007504:	428a      	cmp	r2, r1
 8007506:	bf04      	itt	eq
 8007508:	6811      	ldreq	r1, [r2, #0]
 800750a:	6852      	ldreq	r2, [r2, #4]
 800750c:	6062      	str	r2, [r4, #4]
 800750e:	bf04      	itt	eq
 8007510:	1809      	addeq	r1, r1, r0
 8007512:	6021      	streq	r1, [r4, #0]
 8007514:	605c      	str	r4, [r3, #4]
 8007516:	e7c7      	b.n	80074a8 <_free_r+0x24>
 8007518:	bd38      	pop	{r3, r4, r5, pc}
 800751a:	bf00      	nop
 800751c:	200000d4 	.word	0x200000d4

08007520 <_malloc_r>:
 8007520:	b570      	push	{r4, r5, r6, lr}
 8007522:	1ccd      	adds	r5, r1, #3
 8007524:	f025 0503 	bic.w	r5, r5, #3
 8007528:	3508      	adds	r5, #8
 800752a:	2d0c      	cmp	r5, #12
 800752c:	bf38      	it	cc
 800752e:	250c      	movcc	r5, #12
 8007530:	2d00      	cmp	r5, #0
 8007532:	4606      	mov	r6, r0
 8007534:	db01      	blt.n	800753a <_malloc_r+0x1a>
 8007536:	42a9      	cmp	r1, r5
 8007538:	d903      	bls.n	8007542 <_malloc_r+0x22>
 800753a:	230c      	movs	r3, #12
 800753c:	6033      	str	r3, [r6, #0]
 800753e:	2000      	movs	r0, #0
 8007540:	bd70      	pop	{r4, r5, r6, pc}
 8007542:	f000 fbb9 	bl	8007cb8 <__malloc_lock>
 8007546:	4a21      	ldr	r2, [pc, #132]	; (80075cc <_malloc_r+0xac>)
 8007548:	6814      	ldr	r4, [r2, #0]
 800754a:	4621      	mov	r1, r4
 800754c:	b991      	cbnz	r1, 8007574 <_malloc_r+0x54>
 800754e:	4c20      	ldr	r4, [pc, #128]	; (80075d0 <_malloc_r+0xb0>)
 8007550:	6823      	ldr	r3, [r4, #0]
 8007552:	b91b      	cbnz	r3, 800755c <_malloc_r+0x3c>
 8007554:	4630      	mov	r0, r6
 8007556:	f000 fb05 	bl	8007b64 <_sbrk_r>
 800755a:	6020      	str	r0, [r4, #0]
 800755c:	4629      	mov	r1, r5
 800755e:	4630      	mov	r0, r6
 8007560:	f000 fb00 	bl	8007b64 <_sbrk_r>
 8007564:	1c43      	adds	r3, r0, #1
 8007566:	d124      	bne.n	80075b2 <_malloc_r+0x92>
 8007568:	230c      	movs	r3, #12
 800756a:	6033      	str	r3, [r6, #0]
 800756c:	4630      	mov	r0, r6
 800756e:	f000 fba4 	bl	8007cba <__malloc_unlock>
 8007572:	e7e4      	b.n	800753e <_malloc_r+0x1e>
 8007574:	680b      	ldr	r3, [r1, #0]
 8007576:	1b5b      	subs	r3, r3, r5
 8007578:	d418      	bmi.n	80075ac <_malloc_r+0x8c>
 800757a:	2b0b      	cmp	r3, #11
 800757c:	d90f      	bls.n	800759e <_malloc_r+0x7e>
 800757e:	600b      	str	r3, [r1, #0]
 8007580:	50cd      	str	r5, [r1, r3]
 8007582:	18cc      	adds	r4, r1, r3
 8007584:	4630      	mov	r0, r6
 8007586:	f000 fb98 	bl	8007cba <__malloc_unlock>
 800758a:	f104 000b 	add.w	r0, r4, #11
 800758e:	1d23      	adds	r3, r4, #4
 8007590:	f020 0007 	bic.w	r0, r0, #7
 8007594:	1ac3      	subs	r3, r0, r3
 8007596:	d0d3      	beq.n	8007540 <_malloc_r+0x20>
 8007598:	425a      	negs	r2, r3
 800759a:	50e2      	str	r2, [r4, r3]
 800759c:	e7d0      	b.n	8007540 <_malloc_r+0x20>
 800759e:	428c      	cmp	r4, r1
 80075a0:	684b      	ldr	r3, [r1, #4]
 80075a2:	bf16      	itet	ne
 80075a4:	6063      	strne	r3, [r4, #4]
 80075a6:	6013      	streq	r3, [r2, #0]
 80075a8:	460c      	movne	r4, r1
 80075aa:	e7eb      	b.n	8007584 <_malloc_r+0x64>
 80075ac:	460c      	mov	r4, r1
 80075ae:	6849      	ldr	r1, [r1, #4]
 80075b0:	e7cc      	b.n	800754c <_malloc_r+0x2c>
 80075b2:	1cc4      	adds	r4, r0, #3
 80075b4:	f024 0403 	bic.w	r4, r4, #3
 80075b8:	42a0      	cmp	r0, r4
 80075ba:	d005      	beq.n	80075c8 <_malloc_r+0xa8>
 80075bc:	1a21      	subs	r1, r4, r0
 80075be:	4630      	mov	r0, r6
 80075c0:	f000 fad0 	bl	8007b64 <_sbrk_r>
 80075c4:	3001      	adds	r0, #1
 80075c6:	d0cf      	beq.n	8007568 <_malloc_r+0x48>
 80075c8:	6025      	str	r5, [r4, #0]
 80075ca:	e7db      	b.n	8007584 <_malloc_r+0x64>
 80075cc:	200000d4 	.word	0x200000d4
 80075d0:	200000d8 	.word	0x200000d8

080075d4 <__sfputc_r>:
 80075d4:	6893      	ldr	r3, [r2, #8]
 80075d6:	3b01      	subs	r3, #1
 80075d8:	2b00      	cmp	r3, #0
 80075da:	b410      	push	{r4}
 80075dc:	6093      	str	r3, [r2, #8]
 80075de:	da08      	bge.n	80075f2 <__sfputc_r+0x1e>
 80075e0:	6994      	ldr	r4, [r2, #24]
 80075e2:	42a3      	cmp	r3, r4
 80075e4:	db01      	blt.n	80075ea <__sfputc_r+0x16>
 80075e6:	290a      	cmp	r1, #10
 80075e8:	d103      	bne.n	80075f2 <__sfputc_r+0x1e>
 80075ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075ee:	f7ff bcab 	b.w	8006f48 <__swbuf_r>
 80075f2:	6813      	ldr	r3, [r2, #0]
 80075f4:	1c58      	adds	r0, r3, #1
 80075f6:	6010      	str	r0, [r2, #0]
 80075f8:	7019      	strb	r1, [r3, #0]
 80075fa:	4608      	mov	r0, r1
 80075fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007600:	4770      	bx	lr

08007602 <__sfputs_r>:
 8007602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007604:	4606      	mov	r6, r0
 8007606:	460f      	mov	r7, r1
 8007608:	4614      	mov	r4, r2
 800760a:	18d5      	adds	r5, r2, r3
 800760c:	42ac      	cmp	r4, r5
 800760e:	d101      	bne.n	8007614 <__sfputs_r+0x12>
 8007610:	2000      	movs	r0, #0
 8007612:	e007      	b.n	8007624 <__sfputs_r+0x22>
 8007614:	463a      	mov	r2, r7
 8007616:	f814 1b01 	ldrb.w	r1, [r4], #1
 800761a:	4630      	mov	r0, r6
 800761c:	f7ff ffda 	bl	80075d4 <__sfputc_r>
 8007620:	1c43      	adds	r3, r0, #1
 8007622:	d1f3      	bne.n	800760c <__sfputs_r+0xa>
 8007624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007628 <_vfiprintf_r>:
 8007628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800762c:	460c      	mov	r4, r1
 800762e:	b09d      	sub	sp, #116	; 0x74
 8007630:	4617      	mov	r7, r2
 8007632:	461d      	mov	r5, r3
 8007634:	4606      	mov	r6, r0
 8007636:	b118      	cbz	r0, 8007640 <_vfiprintf_r+0x18>
 8007638:	6983      	ldr	r3, [r0, #24]
 800763a:	b90b      	cbnz	r3, 8007640 <_vfiprintf_r+0x18>
 800763c:	f7ff fe34 	bl	80072a8 <__sinit>
 8007640:	4b7c      	ldr	r3, [pc, #496]	; (8007834 <_vfiprintf_r+0x20c>)
 8007642:	429c      	cmp	r4, r3
 8007644:	d158      	bne.n	80076f8 <_vfiprintf_r+0xd0>
 8007646:	6874      	ldr	r4, [r6, #4]
 8007648:	89a3      	ldrh	r3, [r4, #12]
 800764a:	0718      	lsls	r0, r3, #28
 800764c:	d55e      	bpl.n	800770c <_vfiprintf_r+0xe4>
 800764e:	6923      	ldr	r3, [r4, #16]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d05b      	beq.n	800770c <_vfiprintf_r+0xe4>
 8007654:	2300      	movs	r3, #0
 8007656:	9309      	str	r3, [sp, #36]	; 0x24
 8007658:	2320      	movs	r3, #32
 800765a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800765e:	2330      	movs	r3, #48	; 0x30
 8007660:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007664:	9503      	str	r5, [sp, #12]
 8007666:	f04f 0b01 	mov.w	fp, #1
 800766a:	46b8      	mov	r8, r7
 800766c:	4645      	mov	r5, r8
 800766e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007672:	b10b      	cbz	r3, 8007678 <_vfiprintf_r+0x50>
 8007674:	2b25      	cmp	r3, #37	; 0x25
 8007676:	d154      	bne.n	8007722 <_vfiprintf_r+0xfa>
 8007678:	ebb8 0a07 	subs.w	sl, r8, r7
 800767c:	d00b      	beq.n	8007696 <_vfiprintf_r+0x6e>
 800767e:	4653      	mov	r3, sl
 8007680:	463a      	mov	r2, r7
 8007682:	4621      	mov	r1, r4
 8007684:	4630      	mov	r0, r6
 8007686:	f7ff ffbc 	bl	8007602 <__sfputs_r>
 800768a:	3001      	adds	r0, #1
 800768c:	f000 80c2 	beq.w	8007814 <_vfiprintf_r+0x1ec>
 8007690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007692:	4453      	add	r3, sl
 8007694:	9309      	str	r3, [sp, #36]	; 0x24
 8007696:	f898 3000 	ldrb.w	r3, [r8]
 800769a:	2b00      	cmp	r3, #0
 800769c:	f000 80ba 	beq.w	8007814 <_vfiprintf_r+0x1ec>
 80076a0:	2300      	movs	r3, #0
 80076a2:	f04f 32ff 	mov.w	r2, #4294967295
 80076a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076aa:	9304      	str	r3, [sp, #16]
 80076ac:	9307      	str	r3, [sp, #28]
 80076ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076b2:	931a      	str	r3, [sp, #104]	; 0x68
 80076b4:	46a8      	mov	r8, r5
 80076b6:	2205      	movs	r2, #5
 80076b8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80076bc:	485e      	ldr	r0, [pc, #376]	; (8007838 <_vfiprintf_r+0x210>)
 80076be:	f7f8 fd87 	bl	80001d0 <memchr>
 80076c2:	9b04      	ldr	r3, [sp, #16]
 80076c4:	bb78      	cbnz	r0, 8007726 <_vfiprintf_r+0xfe>
 80076c6:	06d9      	lsls	r1, r3, #27
 80076c8:	bf44      	itt	mi
 80076ca:	2220      	movmi	r2, #32
 80076cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80076d0:	071a      	lsls	r2, r3, #28
 80076d2:	bf44      	itt	mi
 80076d4:	222b      	movmi	r2, #43	; 0x2b
 80076d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80076da:	782a      	ldrb	r2, [r5, #0]
 80076dc:	2a2a      	cmp	r2, #42	; 0x2a
 80076de:	d02a      	beq.n	8007736 <_vfiprintf_r+0x10e>
 80076e0:	9a07      	ldr	r2, [sp, #28]
 80076e2:	46a8      	mov	r8, r5
 80076e4:	2000      	movs	r0, #0
 80076e6:	250a      	movs	r5, #10
 80076e8:	4641      	mov	r1, r8
 80076ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076ee:	3b30      	subs	r3, #48	; 0x30
 80076f0:	2b09      	cmp	r3, #9
 80076f2:	d969      	bls.n	80077c8 <_vfiprintf_r+0x1a0>
 80076f4:	b360      	cbz	r0, 8007750 <_vfiprintf_r+0x128>
 80076f6:	e024      	b.n	8007742 <_vfiprintf_r+0x11a>
 80076f8:	4b50      	ldr	r3, [pc, #320]	; (800783c <_vfiprintf_r+0x214>)
 80076fa:	429c      	cmp	r4, r3
 80076fc:	d101      	bne.n	8007702 <_vfiprintf_r+0xda>
 80076fe:	68b4      	ldr	r4, [r6, #8]
 8007700:	e7a2      	b.n	8007648 <_vfiprintf_r+0x20>
 8007702:	4b4f      	ldr	r3, [pc, #316]	; (8007840 <_vfiprintf_r+0x218>)
 8007704:	429c      	cmp	r4, r3
 8007706:	bf08      	it	eq
 8007708:	68f4      	ldreq	r4, [r6, #12]
 800770a:	e79d      	b.n	8007648 <_vfiprintf_r+0x20>
 800770c:	4621      	mov	r1, r4
 800770e:	4630      	mov	r0, r6
 8007710:	f7ff fc6c 	bl	8006fec <__swsetup_r>
 8007714:	2800      	cmp	r0, #0
 8007716:	d09d      	beq.n	8007654 <_vfiprintf_r+0x2c>
 8007718:	f04f 30ff 	mov.w	r0, #4294967295
 800771c:	b01d      	add	sp, #116	; 0x74
 800771e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007722:	46a8      	mov	r8, r5
 8007724:	e7a2      	b.n	800766c <_vfiprintf_r+0x44>
 8007726:	4a44      	ldr	r2, [pc, #272]	; (8007838 <_vfiprintf_r+0x210>)
 8007728:	1a80      	subs	r0, r0, r2
 800772a:	fa0b f000 	lsl.w	r0, fp, r0
 800772e:	4318      	orrs	r0, r3
 8007730:	9004      	str	r0, [sp, #16]
 8007732:	4645      	mov	r5, r8
 8007734:	e7be      	b.n	80076b4 <_vfiprintf_r+0x8c>
 8007736:	9a03      	ldr	r2, [sp, #12]
 8007738:	1d11      	adds	r1, r2, #4
 800773a:	6812      	ldr	r2, [r2, #0]
 800773c:	9103      	str	r1, [sp, #12]
 800773e:	2a00      	cmp	r2, #0
 8007740:	db01      	blt.n	8007746 <_vfiprintf_r+0x11e>
 8007742:	9207      	str	r2, [sp, #28]
 8007744:	e004      	b.n	8007750 <_vfiprintf_r+0x128>
 8007746:	4252      	negs	r2, r2
 8007748:	f043 0302 	orr.w	r3, r3, #2
 800774c:	9207      	str	r2, [sp, #28]
 800774e:	9304      	str	r3, [sp, #16]
 8007750:	f898 3000 	ldrb.w	r3, [r8]
 8007754:	2b2e      	cmp	r3, #46	; 0x2e
 8007756:	d10e      	bne.n	8007776 <_vfiprintf_r+0x14e>
 8007758:	f898 3001 	ldrb.w	r3, [r8, #1]
 800775c:	2b2a      	cmp	r3, #42	; 0x2a
 800775e:	d138      	bne.n	80077d2 <_vfiprintf_r+0x1aa>
 8007760:	9b03      	ldr	r3, [sp, #12]
 8007762:	1d1a      	adds	r2, r3, #4
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	9203      	str	r2, [sp, #12]
 8007768:	2b00      	cmp	r3, #0
 800776a:	bfb8      	it	lt
 800776c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007770:	f108 0802 	add.w	r8, r8, #2
 8007774:	9305      	str	r3, [sp, #20]
 8007776:	4d33      	ldr	r5, [pc, #204]	; (8007844 <_vfiprintf_r+0x21c>)
 8007778:	f898 1000 	ldrb.w	r1, [r8]
 800777c:	2203      	movs	r2, #3
 800777e:	4628      	mov	r0, r5
 8007780:	f7f8 fd26 	bl	80001d0 <memchr>
 8007784:	b140      	cbz	r0, 8007798 <_vfiprintf_r+0x170>
 8007786:	2340      	movs	r3, #64	; 0x40
 8007788:	1b40      	subs	r0, r0, r5
 800778a:	fa03 f000 	lsl.w	r0, r3, r0
 800778e:	9b04      	ldr	r3, [sp, #16]
 8007790:	4303      	orrs	r3, r0
 8007792:	f108 0801 	add.w	r8, r8, #1
 8007796:	9304      	str	r3, [sp, #16]
 8007798:	f898 1000 	ldrb.w	r1, [r8]
 800779c:	482a      	ldr	r0, [pc, #168]	; (8007848 <_vfiprintf_r+0x220>)
 800779e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077a2:	2206      	movs	r2, #6
 80077a4:	f108 0701 	add.w	r7, r8, #1
 80077a8:	f7f8 fd12 	bl	80001d0 <memchr>
 80077ac:	2800      	cmp	r0, #0
 80077ae:	d037      	beq.n	8007820 <_vfiprintf_r+0x1f8>
 80077b0:	4b26      	ldr	r3, [pc, #152]	; (800784c <_vfiprintf_r+0x224>)
 80077b2:	bb1b      	cbnz	r3, 80077fc <_vfiprintf_r+0x1d4>
 80077b4:	9b03      	ldr	r3, [sp, #12]
 80077b6:	3307      	adds	r3, #7
 80077b8:	f023 0307 	bic.w	r3, r3, #7
 80077bc:	3308      	adds	r3, #8
 80077be:	9303      	str	r3, [sp, #12]
 80077c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077c2:	444b      	add	r3, r9
 80077c4:	9309      	str	r3, [sp, #36]	; 0x24
 80077c6:	e750      	b.n	800766a <_vfiprintf_r+0x42>
 80077c8:	fb05 3202 	mla	r2, r5, r2, r3
 80077cc:	2001      	movs	r0, #1
 80077ce:	4688      	mov	r8, r1
 80077d0:	e78a      	b.n	80076e8 <_vfiprintf_r+0xc0>
 80077d2:	2300      	movs	r3, #0
 80077d4:	f108 0801 	add.w	r8, r8, #1
 80077d8:	9305      	str	r3, [sp, #20]
 80077da:	4619      	mov	r1, r3
 80077dc:	250a      	movs	r5, #10
 80077de:	4640      	mov	r0, r8
 80077e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077e4:	3a30      	subs	r2, #48	; 0x30
 80077e6:	2a09      	cmp	r2, #9
 80077e8:	d903      	bls.n	80077f2 <_vfiprintf_r+0x1ca>
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d0c3      	beq.n	8007776 <_vfiprintf_r+0x14e>
 80077ee:	9105      	str	r1, [sp, #20]
 80077f0:	e7c1      	b.n	8007776 <_vfiprintf_r+0x14e>
 80077f2:	fb05 2101 	mla	r1, r5, r1, r2
 80077f6:	2301      	movs	r3, #1
 80077f8:	4680      	mov	r8, r0
 80077fa:	e7f0      	b.n	80077de <_vfiprintf_r+0x1b6>
 80077fc:	ab03      	add	r3, sp, #12
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	4622      	mov	r2, r4
 8007802:	4b13      	ldr	r3, [pc, #76]	; (8007850 <_vfiprintf_r+0x228>)
 8007804:	a904      	add	r1, sp, #16
 8007806:	4630      	mov	r0, r6
 8007808:	f3af 8000 	nop.w
 800780c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007810:	4681      	mov	r9, r0
 8007812:	d1d5      	bne.n	80077c0 <_vfiprintf_r+0x198>
 8007814:	89a3      	ldrh	r3, [r4, #12]
 8007816:	065b      	lsls	r3, r3, #25
 8007818:	f53f af7e 	bmi.w	8007718 <_vfiprintf_r+0xf0>
 800781c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800781e:	e77d      	b.n	800771c <_vfiprintf_r+0xf4>
 8007820:	ab03      	add	r3, sp, #12
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	4622      	mov	r2, r4
 8007826:	4b0a      	ldr	r3, [pc, #40]	; (8007850 <_vfiprintf_r+0x228>)
 8007828:	a904      	add	r1, sp, #16
 800782a:	4630      	mov	r0, r6
 800782c:	f000 f888 	bl	8007940 <_printf_i>
 8007830:	e7ec      	b.n	800780c <_vfiprintf_r+0x1e4>
 8007832:	bf00      	nop
 8007834:	0800804c 	.word	0x0800804c
 8007838:	0800808c 	.word	0x0800808c
 800783c:	0800806c 	.word	0x0800806c
 8007840:	0800802c 	.word	0x0800802c
 8007844:	08008092 	.word	0x08008092
 8007848:	08008096 	.word	0x08008096
 800784c:	00000000 	.word	0x00000000
 8007850:	08007603 	.word	0x08007603

08007854 <_printf_common>:
 8007854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007858:	4691      	mov	r9, r2
 800785a:	461f      	mov	r7, r3
 800785c:	688a      	ldr	r2, [r1, #8]
 800785e:	690b      	ldr	r3, [r1, #16]
 8007860:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007864:	4293      	cmp	r3, r2
 8007866:	bfb8      	it	lt
 8007868:	4613      	movlt	r3, r2
 800786a:	f8c9 3000 	str.w	r3, [r9]
 800786e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007872:	4606      	mov	r6, r0
 8007874:	460c      	mov	r4, r1
 8007876:	b112      	cbz	r2, 800787e <_printf_common+0x2a>
 8007878:	3301      	adds	r3, #1
 800787a:	f8c9 3000 	str.w	r3, [r9]
 800787e:	6823      	ldr	r3, [r4, #0]
 8007880:	0699      	lsls	r1, r3, #26
 8007882:	bf42      	ittt	mi
 8007884:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007888:	3302      	addmi	r3, #2
 800788a:	f8c9 3000 	strmi.w	r3, [r9]
 800788e:	6825      	ldr	r5, [r4, #0]
 8007890:	f015 0506 	ands.w	r5, r5, #6
 8007894:	d107      	bne.n	80078a6 <_printf_common+0x52>
 8007896:	f104 0a19 	add.w	sl, r4, #25
 800789a:	68e3      	ldr	r3, [r4, #12]
 800789c:	f8d9 2000 	ldr.w	r2, [r9]
 80078a0:	1a9b      	subs	r3, r3, r2
 80078a2:	42ab      	cmp	r3, r5
 80078a4:	dc28      	bgt.n	80078f8 <_printf_common+0xa4>
 80078a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80078aa:	6822      	ldr	r2, [r4, #0]
 80078ac:	3300      	adds	r3, #0
 80078ae:	bf18      	it	ne
 80078b0:	2301      	movne	r3, #1
 80078b2:	0692      	lsls	r2, r2, #26
 80078b4:	d42d      	bmi.n	8007912 <_printf_common+0xbe>
 80078b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078ba:	4639      	mov	r1, r7
 80078bc:	4630      	mov	r0, r6
 80078be:	47c0      	blx	r8
 80078c0:	3001      	adds	r0, #1
 80078c2:	d020      	beq.n	8007906 <_printf_common+0xb2>
 80078c4:	6823      	ldr	r3, [r4, #0]
 80078c6:	68e5      	ldr	r5, [r4, #12]
 80078c8:	f8d9 2000 	ldr.w	r2, [r9]
 80078cc:	f003 0306 	and.w	r3, r3, #6
 80078d0:	2b04      	cmp	r3, #4
 80078d2:	bf08      	it	eq
 80078d4:	1aad      	subeq	r5, r5, r2
 80078d6:	68a3      	ldr	r3, [r4, #8]
 80078d8:	6922      	ldr	r2, [r4, #16]
 80078da:	bf0c      	ite	eq
 80078dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078e0:	2500      	movne	r5, #0
 80078e2:	4293      	cmp	r3, r2
 80078e4:	bfc4      	itt	gt
 80078e6:	1a9b      	subgt	r3, r3, r2
 80078e8:	18ed      	addgt	r5, r5, r3
 80078ea:	f04f 0900 	mov.w	r9, #0
 80078ee:	341a      	adds	r4, #26
 80078f0:	454d      	cmp	r5, r9
 80078f2:	d11a      	bne.n	800792a <_printf_common+0xd6>
 80078f4:	2000      	movs	r0, #0
 80078f6:	e008      	b.n	800790a <_printf_common+0xb6>
 80078f8:	2301      	movs	r3, #1
 80078fa:	4652      	mov	r2, sl
 80078fc:	4639      	mov	r1, r7
 80078fe:	4630      	mov	r0, r6
 8007900:	47c0      	blx	r8
 8007902:	3001      	adds	r0, #1
 8007904:	d103      	bne.n	800790e <_printf_common+0xba>
 8007906:	f04f 30ff 	mov.w	r0, #4294967295
 800790a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800790e:	3501      	adds	r5, #1
 8007910:	e7c3      	b.n	800789a <_printf_common+0x46>
 8007912:	18e1      	adds	r1, r4, r3
 8007914:	1c5a      	adds	r2, r3, #1
 8007916:	2030      	movs	r0, #48	; 0x30
 8007918:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800791c:	4422      	add	r2, r4
 800791e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007922:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007926:	3302      	adds	r3, #2
 8007928:	e7c5      	b.n	80078b6 <_printf_common+0x62>
 800792a:	2301      	movs	r3, #1
 800792c:	4622      	mov	r2, r4
 800792e:	4639      	mov	r1, r7
 8007930:	4630      	mov	r0, r6
 8007932:	47c0      	blx	r8
 8007934:	3001      	adds	r0, #1
 8007936:	d0e6      	beq.n	8007906 <_printf_common+0xb2>
 8007938:	f109 0901 	add.w	r9, r9, #1
 800793c:	e7d8      	b.n	80078f0 <_printf_common+0x9c>
	...

08007940 <_printf_i>:
 8007940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007944:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007948:	460c      	mov	r4, r1
 800794a:	7e09      	ldrb	r1, [r1, #24]
 800794c:	b085      	sub	sp, #20
 800794e:	296e      	cmp	r1, #110	; 0x6e
 8007950:	4617      	mov	r7, r2
 8007952:	4606      	mov	r6, r0
 8007954:	4698      	mov	r8, r3
 8007956:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007958:	f000 80b3 	beq.w	8007ac2 <_printf_i+0x182>
 800795c:	d822      	bhi.n	80079a4 <_printf_i+0x64>
 800795e:	2963      	cmp	r1, #99	; 0x63
 8007960:	d036      	beq.n	80079d0 <_printf_i+0x90>
 8007962:	d80a      	bhi.n	800797a <_printf_i+0x3a>
 8007964:	2900      	cmp	r1, #0
 8007966:	f000 80b9 	beq.w	8007adc <_printf_i+0x19c>
 800796a:	2958      	cmp	r1, #88	; 0x58
 800796c:	f000 8083 	beq.w	8007a76 <_printf_i+0x136>
 8007970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007974:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007978:	e032      	b.n	80079e0 <_printf_i+0xa0>
 800797a:	2964      	cmp	r1, #100	; 0x64
 800797c:	d001      	beq.n	8007982 <_printf_i+0x42>
 800797e:	2969      	cmp	r1, #105	; 0x69
 8007980:	d1f6      	bne.n	8007970 <_printf_i+0x30>
 8007982:	6820      	ldr	r0, [r4, #0]
 8007984:	6813      	ldr	r3, [r2, #0]
 8007986:	0605      	lsls	r5, r0, #24
 8007988:	f103 0104 	add.w	r1, r3, #4
 800798c:	d52a      	bpl.n	80079e4 <_printf_i+0xa4>
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	6011      	str	r1, [r2, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	da03      	bge.n	800799e <_printf_i+0x5e>
 8007996:	222d      	movs	r2, #45	; 0x2d
 8007998:	425b      	negs	r3, r3
 800799a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800799e:	486f      	ldr	r0, [pc, #444]	; (8007b5c <_printf_i+0x21c>)
 80079a0:	220a      	movs	r2, #10
 80079a2:	e039      	b.n	8007a18 <_printf_i+0xd8>
 80079a4:	2973      	cmp	r1, #115	; 0x73
 80079a6:	f000 809d 	beq.w	8007ae4 <_printf_i+0x1a4>
 80079aa:	d808      	bhi.n	80079be <_printf_i+0x7e>
 80079ac:	296f      	cmp	r1, #111	; 0x6f
 80079ae:	d020      	beq.n	80079f2 <_printf_i+0xb2>
 80079b0:	2970      	cmp	r1, #112	; 0x70
 80079b2:	d1dd      	bne.n	8007970 <_printf_i+0x30>
 80079b4:	6823      	ldr	r3, [r4, #0]
 80079b6:	f043 0320 	orr.w	r3, r3, #32
 80079ba:	6023      	str	r3, [r4, #0]
 80079bc:	e003      	b.n	80079c6 <_printf_i+0x86>
 80079be:	2975      	cmp	r1, #117	; 0x75
 80079c0:	d017      	beq.n	80079f2 <_printf_i+0xb2>
 80079c2:	2978      	cmp	r1, #120	; 0x78
 80079c4:	d1d4      	bne.n	8007970 <_printf_i+0x30>
 80079c6:	2378      	movs	r3, #120	; 0x78
 80079c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079cc:	4864      	ldr	r0, [pc, #400]	; (8007b60 <_printf_i+0x220>)
 80079ce:	e055      	b.n	8007a7c <_printf_i+0x13c>
 80079d0:	6813      	ldr	r3, [r2, #0]
 80079d2:	1d19      	adds	r1, r3, #4
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	6011      	str	r1, [r2, #0]
 80079d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079e0:	2301      	movs	r3, #1
 80079e2:	e08c      	b.n	8007afe <_printf_i+0x1be>
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	6011      	str	r1, [r2, #0]
 80079e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80079ec:	bf18      	it	ne
 80079ee:	b21b      	sxthne	r3, r3
 80079f0:	e7cf      	b.n	8007992 <_printf_i+0x52>
 80079f2:	6813      	ldr	r3, [r2, #0]
 80079f4:	6825      	ldr	r5, [r4, #0]
 80079f6:	1d18      	adds	r0, r3, #4
 80079f8:	6010      	str	r0, [r2, #0]
 80079fa:	0628      	lsls	r0, r5, #24
 80079fc:	d501      	bpl.n	8007a02 <_printf_i+0xc2>
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	e002      	b.n	8007a08 <_printf_i+0xc8>
 8007a02:	0668      	lsls	r0, r5, #25
 8007a04:	d5fb      	bpl.n	80079fe <_printf_i+0xbe>
 8007a06:	881b      	ldrh	r3, [r3, #0]
 8007a08:	4854      	ldr	r0, [pc, #336]	; (8007b5c <_printf_i+0x21c>)
 8007a0a:	296f      	cmp	r1, #111	; 0x6f
 8007a0c:	bf14      	ite	ne
 8007a0e:	220a      	movne	r2, #10
 8007a10:	2208      	moveq	r2, #8
 8007a12:	2100      	movs	r1, #0
 8007a14:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a18:	6865      	ldr	r5, [r4, #4]
 8007a1a:	60a5      	str	r5, [r4, #8]
 8007a1c:	2d00      	cmp	r5, #0
 8007a1e:	f2c0 8095 	blt.w	8007b4c <_printf_i+0x20c>
 8007a22:	6821      	ldr	r1, [r4, #0]
 8007a24:	f021 0104 	bic.w	r1, r1, #4
 8007a28:	6021      	str	r1, [r4, #0]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d13d      	bne.n	8007aaa <_printf_i+0x16a>
 8007a2e:	2d00      	cmp	r5, #0
 8007a30:	f040 808e 	bne.w	8007b50 <_printf_i+0x210>
 8007a34:	4665      	mov	r5, ip
 8007a36:	2a08      	cmp	r2, #8
 8007a38:	d10b      	bne.n	8007a52 <_printf_i+0x112>
 8007a3a:	6823      	ldr	r3, [r4, #0]
 8007a3c:	07db      	lsls	r3, r3, #31
 8007a3e:	d508      	bpl.n	8007a52 <_printf_i+0x112>
 8007a40:	6923      	ldr	r3, [r4, #16]
 8007a42:	6862      	ldr	r2, [r4, #4]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	bfde      	ittt	le
 8007a48:	2330      	movle	r3, #48	; 0x30
 8007a4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a52:	ebac 0305 	sub.w	r3, ip, r5
 8007a56:	6123      	str	r3, [r4, #16]
 8007a58:	f8cd 8000 	str.w	r8, [sp]
 8007a5c:	463b      	mov	r3, r7
 8007a5e:	aa03      	add	r2, sp, #12
 8007a60:	4621      	mov	r1, r4
 8007a62:	4630      	mov	r0, r6
 8007a64:	f7ff fef6 	bl	8007854 <_printf_common>
 8007a68:	3001      	adds	r0, #1
 8007a6a:	d14d      	bne.n	8007b08 <_printf_i+0x1c8>
 8007a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a70:	b005      	add	sp, #20
 8007a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a76:	4839      	ldr	r0, [pc, #228]	; (8007b5c <_printf_i+0x21c>)
 8007a78:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007a7c:	6813      	ldr	r3, [r2, #0]
 8007a7e:	6821      	ldr	r1, [r4, #0]
 8007a80:	1d1d      	adds	r5, r3, #4
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6015      	str	r5, [r2, #0]
 8007a86:	060a      	lsls	r2, r1, #24
 8007a88:	d50b      	bpl.n	8007aa2 <_printf_i+0x162>
 8007a8a:	07ca      	lsls	r2, r1, #31
 8007a8c:	bf44      	itt	mi
 8007a8e:	f041 0120 	orrmi.w	r1, r1, #32
 8007a92:	6021      	strmi	r1, [r4, #0]
 8007a94:	b91b      	cbnz	r3, 8007a9e <_printf_i+0x15e>
 8007a96:	6822      	ldr	r2, [r4, #0]
 8007a98:	f022 0220 	bic.w	r2, r2, #32
 8007a9c:	6022      	str	r2, [r4, #0]
 8007a9e:	2210      	movs	r2, #16
 8007aa0:	e7b7      	b.n	8007a12 <_printf_i+0xd2>
 8007aa2:	064d      	lsls	r5, r1, #25
 8007aa4:	bf48      	it	mi
 8007aa6:	b29b      	uxthmi	r3, r3
 8007aa8:	e7ef      	b.n	8007a8a <_printf_i+0x14a>
 8007aaa:	4665      	mov	r5, ip
 8007aac:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ab0:	fb02 3311 	mls	r3, r2, r1, r3
 8007ab4:	5cc3      	ldrb	r3, [r0, r3]
 8007ab6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007aba:	460b      	mov	r3, r1
 8007abc:	2900      	cmp	r1, #0
 8007abe:	d1f5      	bne.n	8007aac <_printf_i+0x16c>
 8007ac0:	e7b9      	b.n	8007a36 <_printf_i+0xf6>
 8007ac2:	6813      	ldr	r3, [r2, #0]
 8007ac4:	6825      	ldr	r5, [r4, #0]
 8007ac6:	6961      	ldr	r1, [r4, #20]
 8007ac8:	1d18      	adds	r0, r3, #4
 8007aca:	6010      	str	r0, [r2, #0]
 8007acc:	0628      	lsls	r0, r5, #24
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	d501      	bpl.n	8007ad6 <_printf_i+0x196>
 8007ad2:	6019      	str	r1, [r3, #0]
 8007ad4:	e002      	b.n	8007adc <_printf_i+0x19c>
 8007ad6:	066a      	lsls	r2, r5, #25
 8007ad8:	d5fb      	bpl.n	8007ad2 <_printf_i+0x192>
 8007ada:	8019      	strh	r1, [r3, #0]
 8007adc:	2300      	movs	r3, #0
 8007ade:	6123      	str	r3, [r4, #16]
 8007ae0:	4665      	mov	r5, ip
 8007ae2:	e7b9      	b.n	8007a58 <_printf_i+0x118>
 8007ae4:	6813      	ldr	r3, [r2, #0]
 8007ae6:	1d19      	adds	r1, r3, #4
 8007ae8:	6011      	str	r1, [r2, #0]
 8007aea:	681d      	ldr	r5, [r3, #0]
 8007aec:	6862      	ldr	r2, [r4, #4]
 8007aee:	2100      	movs	r1, #0
 8007af0:	4628      	mov	r0, r5
 8007af2:	f7f8 fb6d 	bl	80001d0 <memchr>
 8007af6:	b108      	cbz	r0, 8007afc <_printf_i+0x1bc>
 8007af8:	1b40      	subs	r0, r0, r5
 8007afa:	6060      	str	r0, [r4, #4]
 8007afc:	6863      	ldr	r3, [r4, #4]
 8007afe:	6123      	str	r3, [r4, #16]
 8007b00:	2300      	movs	r3, #0
 8007b02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b06:	e7a7      	b.n	8007a58 <_printf_i+0x118>
 8007b08:	6923      	ldr	r3, [r4, #16]
 8007b0a:	462a      	mov	r2, r5
 8007b0c:	4639      	mov	r1, r7
 8007b0e:	4630      	mov	r0, r6
 8007b10:	47c0      	blx	r8
 8007b12:	3001      	adds	r0, #1
 8007b14:	d0aa      	beq.n	8007a6c <_printf_i+0x12c>
 8007b16:	6823      	ldr	r3, [r4, #0]
 8007b18:	079b      	lsls	r3, r3, #30
 8007b1a:	d413      	bmi.n	8007b44 <_printf_i+0x204>
 8007b1c:	68e0      	ldr	r0, [r4, #12]
 8007b1e:	9b03      	ldr	r3, [sp, #12]
 8007b20:	4298      	cmp	r0, r3
 8007b22:	bfb8      	it	lt
 8007b24:	4618      	movlt	r0, r3
 8007b26:	e7a3      	b.n	8007a70 <_printf_i+0x130>
 8007b28:	2301      	movs	r3, #1
 8007b2a:	464a      	mov	r2, r9
 8007b2c:	4639      	mov	r1, r7
 8007b2e:	4630      	mov	r0, r6
 8007b30:	47c0      	blx	r8
 8007b32:	3001      	adds	r0, #1
 8007b34:	d09a      	beq.n	8007a6c <_printf_i+0x12c>
 8007b36:	3501      	adds	r5, #1
 8007b38:	68e3      	ldr	r3, [r4, #12]
 8007b3a:	9a03      	ldr	r2, [sp, #12]
 8007b3c:	1a9b      	subs	r3, r3, r2
 8007b3e:	42ab      	cmp	r3, r5
 8007b40:	dcf2      	bgt.n	8007b28 <_printf_i+0x1e8>
 8007b42:	e7eb      	b.n	8007b1c <_printf_i+0x1dc>
 8007b44:	2500      	movs	r5, #0
 8007b46:	f104 0919 	add.w	r9, r4, #25
 8007b4a:	e7f5      	b.n	8007b38 <_printf_i+0x1f8>
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1ac      	bne.n	8007aaa <_printf_i+0x16a>
 8007b50:	7803      	ldrb	r3, [r0, #0]
 8007b52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b56:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b5a:	e76c      	b.n	8007a36 <_printf_i+0xf6>
 8007b5c:	0800809d 	.word	0x0800809d
 8007b60:	080080ae 	.word	0x080080ae

08007b64 <_sbrk_r>:
 8007b64:	b538      	push	{r3, r4, r5, lr}
 8007b66:	4c06      	ldr	r4, [pc, #24]	; (8007b80 <_sbrk_r+0x1c>)
 8007b68:	2300      	movs	r3, #0
 8007b6a:	4605      	mov	r5, r0
 8007b6c:	4608      	mov	r0, r1
 8007b6e:	6023      	str	r3, [r4, #0]
 8007b70:	f7ff f8b0 	bl	8006cd4 <_sbrk>
 8007b74:	1c43      	adds	r3, r0, #1
 8007b76:	d102      	bne.n	8007b7e <_sbrk_r+0x1a>
 8007b78:	6823      	ldr	r3, [r4, #0]
 8007b7a:	b103      	cbz	r3, 8007b7e <_sbrk_r+0x1a>
 8007b7c:	602b      	str	r3, [r5, #0]
 8007b7e:	bd38      	pop	{r3, r4, r5, pc}
 8007b80:	200007e0 	.word	0x200007e0

08007b84 <__sread>:
 8007b84:	b510      	push	{r4, lr}
 8007b86:	460c      	mov	r4, r1
 8007b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b8c:	f000 f896 	bl	8007cbc <_read_r>
 8007b90:	2800      	cmp	r0, #0
 8007b92:	bfab      	itete	ge
 8007b94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b96:	89a3      	ldrhlt	r3, [r4, #12]
 8007b98:	181b      	addge	r3, r3, r0
 8007b9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b9e:	bfac      	ite	ge
 8007ba0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ba2:	81a3      	strhlt	r3, [r4, #12]
 8007ba4:	bd10      	pop	{r4, pc}

08007ba6 <__swrite>:
 8007ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007baa:	461f      	mov	r7, r3
 8007bac:	898b      	ldrh	r3, [r1, #12]
 8007bae:	05db      	lsls	r3, r3, #23
 8007bb0:	4605      	mov	r5, r0
 8007bb2:	460c      	mov	r4, r1
 8007bb4:	4616      	mov	r6, r2
 8007bb6:	d505      	bpl.n	8007bc4 <__swrite+0x1e>
 8007bb8:	2302      	movs	r3, #2
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc0:	f000 f868 	bl	8007c94 <_lseek_r>
 8007bc4:	89a3      	ldrh	r3, [r4, #12]
 8007bc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bce:	81a3      	strh	r3, [r4, #12]
 8007bd0:	4632      	mov	r2, r6
 8007bd2:	463b      	mov	r3, r7
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bda:	f000 b817 	b.w	8007c0c <_write_r>

08007bde <__sseek>:
 8007bde:	b510      	push	{r4, lr}
 8007be0:	460c      	mov	r4, r1
 8007be2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be6:	f000 f855 	bl	8007c94 <_lseek_r>
 8007bea:	1c43      	adds	r3, r0, #1
 8007bec:	89a3      	ldrh	r3, [r4, #12]
 8007bee:	bf15      	itete	ne
 8007bf0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007bf2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007bf6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007bfa:	81a3      	strheq	r3, [r4, #12]
 8007bfc:	bf18      	it	ne
 8007bfe:	81a3      	strhne	r3, [r4, #12]
 8007c00:	bd10      	pop	{r4, pc}

08007c02 <__sclose>:
 8007c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c06:	f000 b813 	b.w	8007c30 <_close_r>
	...

08007c0c <_write_r>:
 8007c0c:	b538      	push	{r3, r4, r5, lr}
 8007c0e:	4c07      	ldr	r4, [pc, #28]	; (8007c2c <_write_r+0x20>)
 8007c10:	4605      	mov	r5, r0
 8007c12:	4608      	mov	r0, r1
 8007c14:	4611      	mov	r1, r2
 8007c16:	2200      	movs	r2, #0
 8007c18:	6022      	str	r2, [r4, #0]
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	f7ff f809 	bl	8006c32 <_write>
 8007c20:	1c43      	adds	r3, r0, #1
 8007c22:	d102      	bne.n	8007c2a <_write_r+0x1e>
 8007c24:	6823      	ldr	r3, [r4, #0]
 8007c26:	b103      	cbz	r3, 8007c2a <_write_r+0x1e>
 8007c28:	602b      	str	r3, [r5, #0]
 8007c2a:	bd38      	pop	{r3, r4, r5, pc}
 8007c2c:	200007e0 	.word	0x200007e0

08007c30 <_close_r>:
 8007c30:	b538      	push	{r3, r4, r5, lr}
 8007c32:	4c06      	ldr	r4, [pc, #24]	; (8007c4c <_close_r+0x1c>)
 8007c34:	2300      	movs	r3, #0
 8007c36:	4605      	mov	r5, r0
 8007c38:	4608      	mov	r0, r1
 8007c3a:	6023      	str	r3, [r4, #0]
 8007c3c:	f7ff f815 	bl	8006c6a <_close>
 8007c40:	1c43      	adds	r3, r0, #1
 8007c42:	d102      	bne.n	8007c4a <_close_r+0x1a>
 8007c44:	6823      	ldr	r3, [r4, #0]
 8007c46:	b103      	cbz	r3, 8007c4a <_close_r+0x1a>
 8007c48:	602b      	str	r3, [r5, #0]
 8007c4a:	bd38      	pop	{r3, r4, r5, pc}
 8007c4c:	200007e0 	.word	0x200007e0

08007c50 <_fstat_r>:
 8007c50:	b538      	push	{r3, r4, r5, lr}
 8007c52:	4c07      	ldr	r4, [pc, #28]	; (8007c70 <_fstat_r+0x20>)
 8007c54:	2300      	movs	r3, #0
 8007c56:	4605      	mov	r5, r0
 8007c58:	4608      	mov	r0, r1
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	6023      	str	r3, [r4, #0]
 8007c5e:	f7ff f810 	bl	8006c82 <_fstat>
 8007c62:	1c43      	adds	r3, r0, #1
 8007c64:	d102      	bne.n	8007c6c <_fstat_r+0x1c>
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	b103      	cbz	r3, 8007c6c <_fstat_r+0x1c>
 8007c6a:	602b      	str	r3, [r5, #0]
 8007c6c:	bd38      	pop	{r3, r4, r5, pc}
 8007c6e:	bf00      	nop
 8007c70:	200007e0 	.word	0x200007e0

08007c74 <_isatty_r>:
 8007c74:	b538      	push	{r3, r4, r5, lr}
 8007c76:	4c06      	ldr	r4, [pc, #24]	; (8007c90 <_isatty_r+0x1c>)
 8007c78:	2300      	movs	r3, #0
 8007c7a:	4605      	mov	r5, r0
 8007c7c:	4608      	mov	r0, r1
 8007c7e:	6023      	str	r3, [r4, #0]
 8007c80:	f7ff f80f 	bl	8006ca2 <_isatty>
 8007c84:	1c43      	adds	r3, r0, #1
 8007c86:	d102      	bne.n	8007c8e <_isatty_r+0x1a>
 8007c88:	6823      	ldr	r3, [r4, #0]
 8007c8a:	b103      	cbz	r3, 8007c8e <_isatty_r+0x1a>
 8007c8c:	602b      	str	r3, [r5, #0]
 8007c8e:	bd38      	pop	{r3, r4, r5, pc}
 8007c90:	200007e0 	.word	0x200007e0

08007c94 <_lseek_r>:
 8007c94:	b538      	push	{r3, r4, r5, lr}
 8007c96:	4c07      	ldr	r4, [pc, #28]	; (8007cb4 <_lseek_r+0x20>)
 8007c98:	4605      	mov	r5, r0
 8007c9a:	4608      	mov	r0, r1
 8007c9c:	4611      	mov	r1, r2
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	6022      	str	r2, [r4, #0]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	f7ff f808 	bl	8006cb8 <_lseek>
 8007ca8:	1c43      	adds	r3, r0, #1
 8007caa:	d102      	bne.n	8007cb2 <_lseek_r+0x1e>
 8007cac:	6823      	ldr	r3, [r4, #0]
 8007cae:	b103      	cbz	r3, 8007cb2 <_lseek_r+0x1e>
 8007cb0:	602b      	str	r3, [r5, #0]
 8007cb2:	bd38      	pop	{r3, r4, r5, pc}
 8007cb4:	200007e0 	.word	0x200007e0

08007cb8 <__malloc_lock>:
 8007cb8:	4770      	bx	lr

08007cba <__malloc_unlock>:
 8007cba:	4770      	bx	lr

08007cbc <_read_r>:
 8007cbc:	b538      	push	{r3, r4, r5, lr}
 8007cbe:	4c07      	ldr	r4, [pc, #28]	; (8007cdc <_read_r+0x20>)
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	4608      	mov	r0, r1
 8007cc4:	4611      	mov	r1, r2
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	6022      	str	r2, [r4, #0]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	f7fe ff94 	bl	8006bf8 <_read>
 8007cd0:	1c43      	adds	r3, r0, #1
 8007cd2:	d102      	bne.n	8007cda <_read_r+0x1e>
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	b103      	cbz	r3, 8007cda <_read_r+0x1e>
 8007cd8:	602b      	str	r3, [r5, #0]
 8007cda:	bd38      	pop	{r3, r4, r5, pc}
 8007cdc:	200007e0 	.word	0x200007e0

08007ce0 <_init>:
 8007ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce2:	bf00      	nop
 8007ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ce6:	bc08      	pop	{r3}
 8007ce8:	469e      	mov	lr, r3
 8007cea:	4770      	bx	lr

08007cec <_fini>:
 8007cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cee:	bf00      	nop
 8007cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cf2:	bc08      	pop	{r3}
 8007cf4:	469e      	mov	lr, r3
 8007cf6:	4770      	bx	lr
